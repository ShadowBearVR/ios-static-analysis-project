{
 "vulnerabilities": [
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 55,
   "class": "AppDelegate.m (55:5)",
   "vul_id": "45d6f4260b5848eb6a98dbe8c23f6b30",
   "method": "NSLog(@\"handle url %@\",URLString);",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/AppDelegate.m (55:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.3,
   "cwe": "CWE-539",
   "line": 76,
   "class": "BinaryCookiesExerciseViewController.m (76:54)",
   "vul_id": "5bce251e9a7dc24aa56ab585476072a1",
   "method": "NSMutableArray *cookies = [[[NSHTTPCookieStorage sharedHTTPCookieStorage] cookiesForURL:endPointURL]mutableCopy];",
   "column": 54,
   "description": "Cookie Storage.",
   "classMessage": "iGoat/iGoat/iGoat/Binary Cookies/BinaryCookiesExerciseViewController.m (76:54)"
  },
  {
   "cvss": 5.3,
   "cwe": "CWE-539",
   "line": 120,
   "class": "BinaryCookiesExerciseViewController.m (120:27)",
   "vul_id": "2e4b2a9701f94bf49d9837fe1d592cdc",
   "method": "[[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookies:cookies.copy forURL:endPointURL mainDocumentURL:nil];",
   "column": 27,
   "description": "Cookie Storage.",
   "classMessage": "iGoat/iGoat/iGoat/Binary Cookies/BinaryCookiesExerciseViewController.m (120:27)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 37,
   "class": "BrokenCryptographyExerciseViewController.m (37:5)",
   "vul_id": "40f9a513e2d6e64a4a46ed66663aa577",
   "method": "NSLog(@\"plain data is %@\", data);",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Broken Cryptography/BrokenCryptographyExerciseViewController.m (37:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 40,
   "class": "BrokenCryptographyExerciseViewController.m (40:5)",
   "vul_id": "5d7ed4b37772492573e2dece44c9137e",
   "method": "NSLog(@\"encryted data is %@\", encrypted_data);",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Broken Cryptography/BrokenCryptographyExerciseViewController.m (40:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 60,
   "class": "BrokenCryptographyExerciseViewController.m (60:7)",
   "vul_id": "c4838b5b503370cbe0a27521dfcc5118",
   "method": "//    NSLog(@\"decrypted data is %@\", decryptedData);",
   "column": 7,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Broken Cryptography/BrokenCryptographyExerciseViewController.m (60:7)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 63,
   "class": "BrokenCryptographyExerciseViewController.m (63:7)",
   "vul_id": "2bfec12ef195c53903d4de50fabdb363",
   "method": "//    NSLog(@\"data is %@\", decryptedPassword);",
   "column": 7,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Broken Cryptography/BrokenCryptographyExerciseViewController.m (63:7)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 84,
   "class": "CoreDataExerciseViewController.m (84:9)",
   "vul_id": "feea73b4da72f852897dfa976a00c101",
   "method": "NSLog(@\"Error in saving data: %@\", [error localizedDescription]);",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Core Data/CoreDataExerciseViewController.m (84:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 87,
   "class": "CoreDataExerciseViewController.m (87:9)",
   "vul_id": "afea5df2487ad4dbe7dae0746ffd6040",
   "method": "NSLog(@\"data stored in core data\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Core Data/CoreDataExerciseViewController.m (87:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 42,
   "class": "CyrptoChallengeVC.m (42:57)",
   "vul_id": "1edbae50dd5af6fa901b4f502d00ebfe",
   "method": "NSLog(@\"%@\", error);",
   "column": 57,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Cryto Challenge/CyrptoChallengeVC.m (42:57)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 46,
   "class": "CyrptoChallengeVC.m (46:57)",
   "vul_id": "62bd97fdc2c3b9a4efa14784e2e8f5e0",
   "method": "NSLog(@\"%@\", httpResponse);",
   "column": 57,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Cryto Challenge/CyrptoChallengeVC.m (46:57)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 9.8,
   "cwe": "CWE-200",
   "line": 67,
   "class": "CutAndPasteExerciseController.m (67:5)",
   "vul_id": "b83b6b14eb4db5bc7cf72dd1516ba89d",
   "method": "UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];",
   "column": 5,
   "description": "The application copies data to the UIPasteboard. Confidential data must not be copied to the UIPasteboard, as other applications can access it.",
   "classMessage": "iGoat/iGoat/iGoat/Cut Paste/CutAndPasteExerciseController.m (67:5)"
  },
  {
   "cvss": 9.8,
   "cwe": "CWE-200",
   "line": 67,
   "class": "CutAndPasteExerciseController.m (67:33)",
   "vul_id": "3c0b316b87c997358eccd7c622630232",
   "method": "UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];",
   "column": 33,
   "description": "The application copies data to the UIPasteboard. Confidential data must not be copied to the UIPasteboard, as other applications can access it.",
   "classMessage": "iGoat/iGoat/iGoat/Cut Paste/CutAndPasteExerciseController.m (67:33)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 49,
   "class": "DeviceLogsExerciseViewController.m (49:5)",
   "vul_id": "8709549f3a4bdf0e18e57c820ca68a47",
   "method": "NSLog(@\"CC value : %@\", _ccField.text);",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Device Logging/DeviceLogsExerciseViewController.m (49:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 50,
   "class": "DeviceLogsExerciseViewController.m (50:5)",
   "vul_id": "27c31cc0f7ae90001c00f63bc8ae7231",
   "method": "NSLog(@\"CVV value : %@\", _cvvField.text);",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Device Logging/DeviceLogsExerciseViewController.m (50:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 51,
   "class": "DeviceLogsExerciseViewController.m (51:5)",
   "vul_id": "8d4ef3a7fb3232f83290d8c9bd7837d8",
   "method": "NSLog(@\"PIN value :  %@\", _pinField.text);",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Device Logging/DeviceLogsExerciseViewController.m (51:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 58,
   "class": "ExerciseContainerViewController.m (58:5)",
   "vul_id": "94316bfb39c0aa0b107da92336028c7c",
   "method": "NSLog(@\"Nib file to be loaded: %@\", nibName);",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Exercise Base/ExerciseContainerViewController.m (58:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5,
   "cwe": "CWE-695",
   "line": 48,
   "class": "KeychainExerciseViewController.m (48:55)",
   "vul_id": "936c9789fa89fa3b76130292e2ed6f31",
   "method": "[storeCredentials setObject:(id)CFBridgingRelease(kSecAttrAccessibleWhenUnlocked) forKey:(id)CFBridgingRelease(kSecAttrAccessible)];",
   "column": 55,
   "description": "Local File I/O Operations.",
   "classMessage": "iGoat/iGoat/iGoat/Key Chain/KeychainExerciseViewController.m (48:55)"
  },
  {
   "cvss": 5,
   "cwe": "CWE-695",
   "line": 78,
   "class": "KeychainExerciseViewController.m (78:62)",
   "vul_id": "b7e6975d3fb2a42c9149ecaf03fb811b",
   "method": "// Making dictionary with information to update \"SecItemUpdate\" ready. It's",
   "column": 62,
   "description": "Local File I/O Operations.",
   "classMessage": "iGoat/iGoat/iGoat/Key Chain/KeychainExerciseViewController.m (78:62)"
  },
  {
   "cvss": 5,
   "cwe": "CWE-695",
   "line": 87,
   "class": "KeychainExerciseViewController.m (87:62)",
   "vul_id": "761cb874762ff39f706cc779dff867b3",
   "method": "[tempUpdateQuery setObject:(id)CFBridgingRelease(kSecAttrAccessibleWhenUnlocked) forKey:(id)CFBridgingRelease(kSecAttrAccessible)];",
   "column": 62,
   "description": "Local File I/O Operations.",
   "classMessage": "iGoat/iGoat/iGoat/Key Chain/KeychainExerciseViewController.m (87:62)"
  },
  {
   "cvss": 5,
   "cwe": "CWE-695",
   "line": 89,
   "class": "KeychainExerciseViewController.m (89:23)",
   "vul_id": "20d3eb7bce99fa0518ecb5c739286022",
   "method": "results = SecItemUpdate((CFDictionaryRef) CFBridgingRetain(updateQuery), (CFDictionaryRef) CFBridgingRetain(tempUpdateQuery));",
   "column": 23,
   "description": "Local File I/O Operations.",
   "classMessage": "iGoat/iGoat/iGoat/Key Chain/KeychainExerciseViewController.m (89:23)"
  },
  {
   "cvss": 5,
   "cwe": "CWE-695",
   "line": 99,
   "class": "KeychainExerciseViewController.m (99:19)",
   "vul_id": "30255f15a536da786e2991d33a666cab",
   "method": "results = SecItemAdd((CFDictionaryRef) CFBridgingRetain(storeCredentials), NULL);",
   "column": 19,
   "description": "Local File I/O Operations.",
   "classMessage": "iGoat/iGoat/iGoat/Key Chain/KeychainExerciseViewController.m (99:19)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 70,
   "class": "KeychainExerciseViewController.m (70:13)",
   "vul_id": "16d9f98d14e55281b597b4be33855d69",
   "method": "NSLog(@\"Password from keychain: %@\",passwordFromKeychain);",
   "column": 13,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Key Chain/KeychainExerciseViewController.m (70:13)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 107,
   "class": "KeychainExerciseViewController.m (107:5)",
   "vul_id": "363630bd5add658b650a907004db3ca8",
   "method": "NSLog(@\"In storeButtonPressed()\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Key Chain/KeychainExerciseViewController.m (107:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 117,
   "class": "KeychainExerciseViewController.m (117:5)",
   "vul_id": "3c6ea75577c401dae32bd829b3676407",
   "method": "NSLog(@\"Username: %@, password: %@, remember me: %d\", self.username.text, self.password.text, self.rememberMe.on);",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Key Chain/KeychainExerciseViewController.m (117:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 30,
   "class": "KeychainAnalyzerViewController.m (30:5)",
   "vul_id": "575b92ff23fd235d04b25aff650a5188",
   "method": "NSLog(@\"%@\", sourcePath);",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/KeychainAnalyzer/KeychainAnalyzerViewController.m (30:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 28,
   "class": "LocalDataStorageExerciseController.m (28:11)",
   "vul_id": "1f2fadf9962bba2460921ada1920c48b",
   "method": "//sqlite3_exec(credentialsDB, \"PRAGMA key = 'secretKey!'\", NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/Local DataStorage/LocalDataStorageExerciseController.m (28:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 33,
   "class": "LocalDataStorageExerciseController.m (33:3)",
   "vul_id": "40f86253ca2f1ec5471787baa3791362",
   "method": "sqlite3_exec(credentialsDB, createStmt, NULL, NULL, NULL);",
   "column": 3,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/Local DataStorage/LocalDataStorageExerciseController.m (33:3)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 97,
   "class": "LocalDataStorageExerciseController.m (97:4)",
   "vul_id": "d3852de5303d7c76568d52e0e36ce040",
   "method": "// sqlite3_exec(credentialsDB, \"PRAGMA key = 'secretKey!'\", NULL, NULL, NULL);",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/Local DataStorage/LocalDataStorageExerciseController.m (97:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 45,
   "class": "LocalDataStorageExerciseController.m (45:13)",
   "vul_id": "51bbc8417d2434c356d19f0f8f855380",
   "method": "sqlite3_finalize(compiledStmt);",
   "column": 13,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/Local DataStorage/LocalDataStorageExerciseController.m (45:13)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 68,
   "class": "LocalDataStorageExerciseController.m (68:8)",
   "vul_id": "3adaa248dfe12c976034122c7a14cb19",
   "method": "if (sqlite3_finalize(compiledStmt) != SQLITE_OK) {",
   "column": 8,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/Local DataStorage/LocalDataStorageExerciseController.m (68:8)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 62,
   "class": "LocalDataStorageExerciseController.m (62:5)",
   "vul_id": "766050b3e17f07faaca1cea05eb9d817",
   "method": "NSLog(@\"Error storing credentials in SQLite database.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Local DataStorage/LocalDataStorageExerciseController.m (62:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 69,
   "class": "LocalDataStorageExerciseController.m (69:5)",
   "vul_id": "c74a021560bd70ccaf6e2a58dab78fe7",
   "method": "NSLog(@\"Error finalizing SQLite compiled statement.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Local DataStorage/LocalDataStorageExerciseController.m (69:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 71,
   "class": "LocalDataStorageExerciseController.m (71:17)",
   "vul_id": "619f3b27fb1beebb2f0e45b57611034e",
   "method": "NSLog(@\"Error closing SQLite database.\");",
   "column": 17,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Local DataStorage/LocalDataStorageExerciseController.m (71:17)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 75,
   "class": "LocalDataStorageExerciseController.m (75:4)",
   "vul_id": "19315d4715fe0ef9f15ec59d665ae667",
   "method": "NSLog(@\"Error closing SQLite database.\");",
   "column": 4,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Local DataStorage/LocalDataStorageExerciseController.m (75:4)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 0,
   "cwe": "CWE-693",
   "line": 99,
   "class": "MethodSwizzlingExerciseController.m (99:69)",
   "vul_id": "f07dbe13a493350e41cedf2bac3c7e22",
   "method": "fileExists = [[NSFileManager defaultManager] fileExistsAtPath:@\"/Applications/Cydia.app\"];",
   "column": 69,
   "description": "The application may contain Jailbreak detection mechanisms.",
   "classMessage": "iGoat/iGoat/iGoat/Method Swizzling/MethodSwizzlingExerciseController.m (99:69)"
  },
  {
   "cvss": 0,
   "cwe": "CWE-693",
   "line": 165,
   "class": "MethodSwizzlingExerciseController.m (165:33)",
   "vul_id": "989e40cc6820e1e9c081c71c0fd9242c",
   "method": "FILE* cydiaFileHandle = fopen(\"/Applications/Cydia.app\", \"r\");",
   "column": 33,
   "description": "The application may contain Jailbreak detection mechanisms.",
   "classMessage": "iGoat/iGoat/iGoat/Method Swizzling/MethodSwizzlingExerciseController.m (165:33)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 29,
   "class": "PlistStorageExerciseViewController.m (29:5)",
   "vul_id": "3817dc953c7beae0d55c9320591a20a2",
   "method": "NSLog(@\"plist path %@\",destinationPath);",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Plist Storage/PlistStorageExerciseViewController.m (29:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 31,
   "class": "PlistStorageExerciseViewController.m (31:11)",
   "vul_id": "3d8a87ced07fc521611bad06826672d6",
   "method": "//NSLog(@\"database localtion %@\",destinationPath);",
   "column": 11,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Plist Storage/PlistStorageExerciseViewController.m (31:11)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 49,
   "class": "PlistStorageExerciseViewController.m (49:9)",
   "vul_id": "1a6d65df990349dbe655bc4cb1dab2bc",
   "method": "NSLog(@\"blank\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Plist Storage/PlistStorageExerciseViewController.m (49:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 76,
   "class": "PlistStorageExerciseViewController.m (76:13)",
   "vul_id": "5f9708682188cc2b9caa4eb0678577e6",
   "method": "NSLog(@\"Login Success\");",
   "column": 13,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Plist Storage/PlistStorageExerciseViewController.m (76:13)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 95,
   "class": "PlistStorageExerciseViewController.m (95:13)",
   "vul_id": "01ff749d2ff9fdcee85fbe2a0e2dfe14",
   "method": "NSLog(@\"Login Fail\");",
   "column": 13,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Plist Storage/PlistStorageExerciseViewController.m (95:13)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 51,
   "class": "RandomKeyGenerationExerciseViewController.m (51:9)",
   "vul_id": "4d99d1a3cec35693d5154dad526989af",
   "method": "sqlite3_exec(credentialsDB, encrptStmt, NULL, NULL, NULL);",
   "column": 9,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/Random Key/RandomKeyGenerationExerciseViewController.m (51:9)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 56,
   "class": "RandomKeyGenerationExerciseViewController.m (56:9)",
   "vul_id": "15577decbd25358422f640e8101d4522",
   "method": "sqlite3_exec(credentialsDB, createStmt, NULL, NULL, NULL);",
   "column": 9,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/Random Key/RandomKeyGenerationExerciseViewController.m (56:9)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 133,
   "class": "RandomKeyGenerationExerciseViewController.m (133:4)",
   "vul_id": "f9dc7f407511e50c903f496caf68c7e1",
   "method": "// sqlite3_exec(credentialsDB, \"PRAGMA key = 'secretKey!'\", NULL, NULL, NULL);",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/Random Key/RandomKeyGenerationExerciseViewController.m (133:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 68,
   "class": "RandomKeyGenerationExerciseViewController.m (68:13)",
   "vul_id": "24cbe87d9e5ee057450bf330f12e61cd",
   "method": "sqlite3_finalize(compiledStmt);",
   "column": 13,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/Random Key/RandomKeyGenerationExerciseViewController.m (68:13)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 91,
   "class": "RandomKeyGenerationExerciseViewController.m (91:42)",
   "vul_id": "70c2b7e0018b9b48bfe0dcebab8d800a",
   "method": "int compiledStmtStatusCode = sqlite3_finalize(compiledStmt);",
   "column": 42,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/Random Key/RandomKeyGenerationExerciseViewController.m (91:42)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 49,
   "class": "RandomKeyGenerationExerciseViewController.m (49:9)",
   "vul_id": "2550d17684dd507ea1cd21d591e10e5b",
   "method": "NSLog(@\"encryption key is %@\",[[UIDevice currentDevice] identifierForVendor]);",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Random Key/RandomKeyGenerationExerciseViewController.m (49:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 85,
   "class": "RandomKeyGenerationExerciseViewController.m (85:17)",
   "vul_id": "5a8a50103cb69fcb10270a7b71c94750",
   "method": "NSLog(@\"Error storing credentials in SQLite database.\");",
   "column": 17,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Random Key/RandomKeyGenerationExerciseViewController.m (85:17)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 94,
   "class": "RandomKeyGenerationExerciseViewController.m (94:17)",
   "vul_id": "8344a0bf3b1a454dca056323407c8b6e",
   "method": "NSLog(@\"Error finalizing SQLite compiled statement.\");",
   "column": 17,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Random Key/RandomKeyGenerationExerciseViewController.m (94:17)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 96,
   "class": "RandomKeyGenerationExerciseViewController.m (96:17)",
   "vul_id": "f9209382c39d96f4b97324ceaf2ebb07",
   "method": "NSLog(@\"Error closing SQLite database.\");",
   "column": 17,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Random Key/RandomKeyGenerationExerciseViewController.m (96:17)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 99,
   "class": "RandomKeyGenerationExerciseViewController.m (99:13)",
   "vul_id": "9a8a4a3f0e32d313479f707cac52494d",
   "method": "NSLog(@\"Error closing SQLite database.\");",
   "column": 13,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Random Key/RandomKeyGenerationExerciseViewController.m (99:13)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-295",
   "line": 111,
   "class": "PublicKeyPinningExerciseController.m (111:50)",
   "vul_id": "34b4fcd5576caeb9083d8faeb5025bfe",
   "method": "- (BOOL)connection:(NSURLConnection *)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)protectionSpace {",
   "column": 50,
   "description": "The application allows self-signed or invalid SSL certificates. The application is vulnerable to MITM (Man-In-The-Middle) attacks.",
   "classMessage": "iGoat/iGoat/iGoat/PublicKey Pinning/PublicKeyPinningExerciseController.m (111:50)",
   "recomendation": "Certificates must be carefully managed and verified to ensure that data is encrypted with the intended owner's public key."
  },
  {
   "cvss": 5,
   "cwe": "CWE-695",
   "line": 293,
   "class": "PublicKeyPinningExerciseController.m (293:16)",
   "vul_id": "d7acbf6a9d5bc88a662e0757739695a5",
   "method": "sanityCheck = SecItemAdd((__bridge CFDictionaryRef) attributes, \u0026result);",
   "column": 16,
   "description": "Local File I/O Operations.",
   "classMessage": "iGoat/iGoat/iGoat/PublicKey Pinning/PublicKeyPinningExerciseController.m (293:16)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 108,
   "class": "PublicKeyPinningExerciseController.m (108:5)",
   "vul_id": "6a7875e3219b924cdb1fe725ae07959e",
   "method": "NSLog(@\"Request failed: %@ %@\", [error localizedDescription], [[error userInfo] objectForKey:NSURLErrorFailingURLStringErrorKey]);",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/PublicKey Pinning/PublicKeyPinningExerciseController.m (108:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 186,
   "class": "PublicKeyPinningExerciseController.m (186:2)",
   "vul_id": "7ab61ee50f28fc2f78b4bf3016be9293",
   "method": "NSLog(@\"PublicKetPinningExerciseController: didReceiveAuthenticationChallenge: connection=nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/PublicKey Pinning/PublicKeyPinningExerciseController.m (186:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 192,
   "class": "PublicKeyPinningExerciseController.m (192:2)",
   "vul_id": "1d2d506b07ed776af8a349b06d961b12",
   "method": "NSLog(@\"PublicKetPinningExerciseController: didReceiveAuthenticationChallenge: challenge=nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/PublicKey Pinning/PublicKeyPinningExerciseController.m (192:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 200,
   "class": "PublicKeyPinningExerciseController.m (200:2)",
   "vul_id": "c2318b3fb563c97e720323c0afce781a",
   "method": "NSLog(@\"PublicKetPinningExerciseController: didReceiveAuthenticationChallenge: serverTrust=nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/PublicKey Pinning/PublicKeyPinningExerciseController.m (200:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 207,
   "class": "PublicKeyPinningExerciseController.m (207:2)",
   "vul_id": "ee49e3521a6b3b091bdd4f738f49785a",
   "method": "NSLog(@\"PublicKetPinningExerciseController: didReceiveAuthenticationChallenge: errSecSuccess != status\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/PublicKey Pinning/PublicKeyPinningExerciseController.m (207:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 214,
   "class": "PublicKeyPinningExerciseController.m (214:2)",
   "vul_id": "48465a03d21d818550a80460865cb57e",
   "method": "NSLog(@\"PublicKetPinningExerciseController: didReceiveAuthenticationChallenge: receivedPublicKeyRef=nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/PublicKey Pinning/PublicKeyPinningExerciseController.m (214:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 223,
   "class": "PublicKeyPinningExerciseController.m (223:2)",
   "vul_id": "84ddee3520c322de9dd06d40028bba8a",
   "method": "NSLog(@\"PublicKetPinningExerciseController: didReceiveAuthenticationChallenge: file1=nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/PublicKey Pinning/PublicKeyPinningExerciseController.m (223:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 230,
   "class": "PublicKeyPinningExerciseController.m (230:2)",
   "vul_id": "619cc0dc927696fab8cb9922bd795560",
   "method": "NSLog(@\"PublicKetPinningExerciseController: didReceiveAuthenticationChallenge: cert1=nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/PublicKey Pinning/PublicKeyPinningExerciseController.m (230:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 242,
   "class": "PublicKeyPinningExerciseController.m (242:2)",
   "vul_id": "513b20855dc832092577b3d2b2ef1e5a",
   "method": "NSLog(@\"PublicKetPinningExerciseController: didReceiveAuthenticationChallenge: errSecSuccess != status\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/PublicKey Pinning/PublicKeyPinningExerciseController.m (242:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 249,
   "class": "PublicKeyPinningExerciseController.m (249:2)",
   "vul_id": "9e51c8c97a422b2e03a7ce3dcaf742c8",
   "method": "NSLog(@\"PublicKetPinningExerciseController: didReceiveAuthenticationChallenge: errSecSuccess != status\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/PublicKey Pinning/PublicKeyPinningExerciseController.m (249:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 256,
   "class": "PublicKeyPinningExerciseController.m (256:2)",
   "vul_id": "bc479fdb8880c872bf395a7818a357bb",
   "method": "NSLog(@\"PublicKetPinningExerciseController: didReceiveAuthenticationChallenge: calculatedPublicKey1Ref=nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/PublicKey Pinning/PublicKeyPinningExerciseController.m (256:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-295",
   "line": 103,
   "class": "RemoteAuthenticationExerciseController.m (103:51)",
   "vul_id": "cf83d66c124b019adf779c516ab4ba4f",
   "method": "- (BOOL)connection:(NSURLConnection *)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)protectionSpace {",
   "column": 51,
   "description": "The application allows self-signed or invalid SSL certificates. The application is vulnerable to MITM (Man-In-The-Middle) attacks.",
   "classMessage": "iGoat/iGoat/iGoat/Remote Authentication/RemoteAuthenticationExerciseController.m (103:51)",
   "recomendation": "Certificates must be carefully managed and verified to ensure that data is encrypted with the intended owner's public key."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 68,
   "class": "RemoteAuthenticationExerciseController.m (68:5)",
   "vul_id": "cbfe182f55f273b59f61c35352979316",
   "method": "NSLog(@\"Request failed: %@ %@\", [error localizedDescription],",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Remote Authentication/RemoteAuthenticationExerciseController.m (68:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 34,
   "class": "SQLInjectionExerciseController.m (34:5)",
   "vul_id": "64aa95793316718fd3cb19d5f19c62d8",
   "method": "sqlite3_finalize(stmt);",
   "column": 5,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/SQL Injection/SQLInjectionExerciseController.m (34:5)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 77,
   "class": "SecureUserDefaultsViewController.m (77:5)",
   "vul_id": "939d99163e09ccc76e77c965dd7f5448",
   "method": "NSLog(@\"*******************SecureUserDefaults*******************\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/SecureUserDefaults/SecureUserDefaultsViewController.m (77:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 79,
   "class": "SecureUserDefaultsViewController.m (79:5)",
   "vul_id": "217e2335113f7bd7b8ba5beb903078ed",
   "method": "NSLog(@\"Encryption key: %@\",encryptionKey);",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/SecureUserDefaults/SecureUserDefaultsViewController.m (79:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 85,
   "class": "SecureUserDefaultsViewController.m (85:9)",
   "vul_id": "e3e40145c53472e456c2eb00e5753a66",
   "method": "NSLog(@\"\\n%@:%@\",fNameKey,[defaults objectForKey:fNameKey]);",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/SecureUserDefaults/SecureUserDefaultsViewController.m (85:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 91,
   "class": "SecureUserDefaultsViewController.m (91:9)",
   "vul_id": "a37364c1b47731d8aaed270df5d5c0ef",
   "method": "NSLog(@\"\\n%@:%@\",lNameKey,[defaults objectForKey:lNameKey]);",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/SecureUserDefaults/SecureUserDefaultsViewController.m (91:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 97,
   "class": "SecureUserDefaultsViewController.m (97:9)",
   "vul_id": "9ad3be46a5db463b00fc6366b78589c5",
   "method": "NSLog(@\"\\n%@:%@\",genderKey,[defaults objectForKey:genderKey]);",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/SecureUserDefaults/SecureUserDefaultsViewController.m (97:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 103,
   "class": "SecureUserDefaultsViewController.m (103:9)",
   "vul_id": "7d6ee25cd1bd5a7386d6b2539a6df43f",
   "method": "NSLog(@\"\\n%@:%@\",mobileKey,[defaults objectForKey:mobileKey]);",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/SecureUserDefaults/SecureUserDefaultsViewController.m (103:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 109,
   "class": "SecureUserDefaultsViewController.m (109:9)",
   "vul_id": "559deb9d982ae73e716cbf158d499941",
   "method": "NSLog(@\"\\n%@:%@\",locationKey,[defaults objectForKey:locationKey]);",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/SecureUserDefaults/SecureUserDefaultsViewController.m (109:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 112,
   "class": "SecureUserDefaultsViewController.m (112:5)",
   "vul_id": "af9ba301716bf530c67a39e07e560216",
   "method": "NSLog(@\"*********************************************************************\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/SecureUserDefaults/SecureUserDefaultsViewController.m (112:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-295",
   "line": 123,
   "class": "ServerCommunicationExerciseController.m (123:51)",
   "vul_id": "3cddc76cbe721aba25ba2b17da81e70b",
   "method": "- (BOOL)connection:(NSURLConnection *)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)protectionSpace {",
   "column": 51,
   "description": "The application allows self-signed or invalid SSL certificates. The application is vulnerable to MITM (Man-In-The-Middle) attacks.",
   "classMessage": "iGoat/iGoat/iGoat/Server Communication/ServerCommunicationExerciseController.m (123:51)",
   "recomendation": "Certificates must be carefully managed and verified to ensure that data is encrypted with the intended owner's public key."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 99,
   "class": "ServerCommunicationExerciseController.m (99:5)",
   "vul_id": "0aa0246bc13696c775437a38d21e2fae",
   "method": "NSLog(@\"Request failed: %@ %@\", [error localizedDescription], [[error userInfo] objectForKey:NSURLErrorFailingURLStringErrorKey]);",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Server Communication/ServerCommunicationExerciseController.m (99:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 76,
   "class": "SocialEngineeringVC.m (76:35)",
   "vul_id": "7f2709688dead2a38ea75ce68a20b390",
   "method": "NSLog(@\"Switch to fall back authentication - ie, display a keypad or password entry box\");",
   "column": 35,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Social Engineering/SocialEngineeringVC.m (76:35)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 0,
   "cwe": "CWE-693",
   "line": 99,
   "class": "MethodSwizzlingExerciseController.m (99:69)",
   "vul_id": "f07dbe13a493350e41cedf2bac3c7e22",
   "method": "fileExists = [[NSFileManager defaultManager] fileExistsAtPath:@\"/Applications/Cydia.app\"];",
   "column": 69,
   "description": "The application may contain Jailbreak detection mechanisms.",
   "classMessage": "iGoat/iGoat/iGoat/String Analysis/Method Swizzling/MethodSwizzlingExerciseController.m (99:69)"
  },
  {
   "cvss": 0,
   "cwe": "CWE-693",
   "line": 165,
   "class": "MethodSwizzlingExerciseController.m (165:33)",
   "vul_id": "989e40cc6820e1e9c081c71c0fd9242c",
   "method": "FILE* cydiaFileHandle = fopen(\"/Applications/Cydia.app\", \"r\");",
   "column": 33,
   "description": "The application may contain Jailbreak detection mechanisms.",
   "classMessage": "iGoat/iGoat/iGoat/String Analysis/Method Swizzling/MethodSwizzlingExerciseController.m (165:33)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 18,
   "class": "DDASLLogger.h (18:20)",
   "vul_id": "dfca9c0e36358705c54a31e4feff3156",
   "method": "* the traditional NSLog() function directs it's output to two places:",
   "column": 20,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDASLLogger.h (18:20)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 23,
   "class": "DDASLLogger.h (23:17)",
   "vul_id": "d03102e536b5a1fdce72d556ea881d5f",
   "method": "* To duplicate NSLog() functionality you can simply add this logger and a tty logger.",
   "column": 17,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDASLLogger.h (23:17)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 2.2,
   "cwe": "CWE-676",
   "line": 61,
   "class": "DDASLLogCapture.m (61:5)",
   "vul_id": "9e00984c050308beb8c092188d83869e",
   "method": "sprintf(pid, \"%d\", processId);",
   "column": 5,
   "description": "The application may contain prohibited APIs. These APIs are insecure and should not be used.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDASLLogCapture.m (61:5)",
   "recomendation": "Avoid using unsafe API (s) and never rely on data entered by the user, always sanitize the data entered."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 228,
   "class": "DDAbstractDatabaseLogger.m (228:5)",
   "vul_id": "0f1c910434158506e25269b169162801",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (228:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 229,
   "class": "DDAbstractDatabaseLogger.m (229:5)",
   "vul_id": "90f473757cd143ab3ff55c0b8ea1a1af",
   "method": "NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (229:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 274,
   "class": "DDAbstractDatabaseLogger.m (274:9)",
   "vul_id": "2c752dabd9a7bba924c734b329eb9678",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (274:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 294,
   "class": "DDAbstractDatabaseLogger.m (294:5)",
   "vul_id": "1d2e16683154828f5c498eca58147ab0",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (294:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 295,
   "class": "DDAbstractDatabaseLogger.m (295:5)",
   "vul_id": "c7c52f92d0776c958072c7b0636bb349",
   "method": "NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (295:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 376,
   "class": "DDAbstractDatabaseLogger.m (376:9)",
   "vul_id": "d3a1fa37bcd4f099118a044909f0b7d6",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (376:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 396,
   "class": "DDAbstractDatabaseLogger.m (396:5)",
   "vul_id": "c516b507adafaddf5d203700804de70d",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (396:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 397,
   "class": "DDAbstractDatabaseLogger.m (397:5)",
   "vul_id": "1668e0ae090dee4a3e368c24788ae3ca",
   "method": "NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (397:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 484,
   "class": "DDAbstractDatabaseLogger.m (484:9)",
   "vul_id": "a3b3835ca2c3449f6065ea128691a77d",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (484:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 504,
   "class": "DDAbstractDatabaseLogger.m (504:5)",
   "vul_id": "116cff4cee1956eca4d7b8818aad4c9a",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (504:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 505,
   "class": "DDAbstractDatabaseLogger.m (505:5)",
   "vul_id": "b63b69c4c558c775a366eafce8c93d95",
   "method": "NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (505:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 585,
   "class": "DDAbstractDatabaseLogger.m (585:9)",
   "vul_id": "198d157519c225b9f2c95839384de456",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (585:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 605,
   "class": "DDAbstractDatabaseLogger.m (605:5)",
   "vul_id": "fb37364941ef68bd6ccb0f13880856f6",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (605:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 606,
   "class": "DDAbstractDatabaseLogger.m (606:5)",
   "vul_id": "2ed53fe39581267be292e5265782fdff",
   "method": "NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (606:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 638,
   "class": "DDAbstractDatabaseLogger.m (638:9)",
   "vul_id": "566dffbba1571ed25da195c586f3fb77",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDAbstractDatabaseLogger.m (638:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 28,
   "class": "DDTTYLogger.h (28:20)",
   "vul_id": "4f771776d21d789610d7edff514f3777",
   "method": "* the traditional NSLog() function directs it's output to two places:",
   "column": 20,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.h (28:20)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 33,
   "class": "DDTTYLogger.h (33:17)",
   "vul_id": "edafc8f40f2174483efc767513a2a763",
   "method": "* To duplicate NSLog() functionality you can simply add this logger and an asl logger.",
   "column": 17,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.h (33:17)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 41,
   "class": "DDLog.h (41:4)",
   "vul_id": "9ece3c8ae9f99f882f71afae5b6adbbc",
   "method": "* NSLog(@\"Fatal error, no dohickey found!\"); -\u003e DDLogError(@\"Fatal error, no dohickey found!\");",
   "column": 4,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDLog.h (41:4)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 31,
   "class": "DDFileLogger.m (31:57)",
   "vul_id": "40f8be8bbe6bc21ee9707e35ec2088f4",
   "method": "#define NSLogError(frmt, ...)    do{ if(LOG_LEVEL \u003e= 1) NSLog((frmt), ##__VA_ARGS__); } while(0)",
   "column": 57,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (31:57)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 32,
   "class": "DDFileLogger.m (32:57)",
   "vul_id": "595088465596614d8be2da3493339cf7",
   "method": "#define NSLogWarn(frmt, ...)     do{ if(LOG_LEVEL \u003e= 2) NSLog((frmt), ##__VA_ARGS__); } while(0)",
   "column": 57,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (32:57)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 33,
   "class": "DDFileLogger.m (33:57)",
   "vul_id": "92d698e6368f525d56898e21a4bee6fe",
   "method": "#define NSLogInfo(frmt, ...)     do{ if(LOG_LEVEL \u003e= 3) NSLog((frmt), ##__VA_ARGS__); } while(0)",
   "column": 57,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (33:57)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 34,
   "class": "DDFileLogger.m (34:57)",
   "vul_id": "027884430231a1e04c3f0bbc04f5a648",
   "method": "#define NSLogDebug(frmt, ...)    do{ if(LOG_LEVEL \u003e= 4) NSLog((frmt), ##__VA_ARGS__); } while(0)",
   "column": 57,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (34:57)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 35,
   "class": "DDFileLogger.m (35:57)",
   "vul_id": "5a6b034e4637cd98aa7886c8dbdd9042",
   "method": "#define NSLogVerbose(frmt, ...)  do{ if(LOG_LEVEL \u003e= 5) NSLog((frmt), ##__VA_ARGS__); } while(0)",
   "column": 57,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (35:57)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 643,
   "class": "DDFileLogger.m (643:5)",
   "vul_id": "c8f2cd64a5b91dc0acb03405f4bc9135",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (643:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 644,
   "class": "DDFileLogger.m (644:5)",
   "vul_id": "552c68e75457b6ef85dc24949b00de03",
   "method": "NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (644:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 674,
   "class": "DDFileLogger.m (674:5)",
   "vul_id": "f34358f9ca0d9f7e60c4d42045f8508a",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (674:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 675,
   "class": "DDFileLogger.m (675:5)",
   "vul_id": "3b94eb978ebcaac2d2ab5a92443c8fc3",
   "method": "NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (675:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 702,
   "class": "DDFileLogger.m (702:5)",
   "vul_id": "f94095279e71319e927a5df891dd7f22",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (702:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 703,
   "class": "DDFileLogger.m (703:5)",
   "vul_id": "34912c68afa56a3e00de50ca16156563",
   "method": "NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (703:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 732,
   "class": "DDFileLogger.m (732:5)",
   "vul_id": "20ba12f109eb7f634cd34822d5439342",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (732:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 733,
   "class": "DDFileLogger.m (733:5)",
   "vul_id": "1afcf3010986c5863db0ccb8c138600e",
   "method": "NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (733:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 826,
   "class": "DDFileLogger.m (826:9)",
   "vul_id": "deeed95e14ee19d6ef9030d8517f9e90",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (826:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 4.3,
   "cwe": "CWE-311",
   "line": 93,
   "class": "DDFileLogger.m (93:50)",
   "vul_id": "00b17d16ac5eeb09d89ca2a4cf59d6d5",
   "method": "if ([fileProtectionLevel isEqualToString:NSFileProtectionNone] ||",
   "column": 50,
   "description": "The file has no special protections associated with it.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (93:50)"
  },
  {
   "cvss": 4.3,
   "cwe": "CWE-311",
   "line": 948,
   "class": "DDFileLogger.m (948:43)",
   "vul_id": "8f983554fca283e3e6a6632a9738ba9c",
   "method": "// If user has owerwritten to NSFileProtectionNone there is no neeed to create a new one.",
   "column": 43,
   "description": "The file has no special protections associated with it.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (948:43)"
  },
  {
   "cvss": 4.3,
   "cwe": "CWE-311",
   "line": 953,
   "class": "DDFileLogger.m (953:123)",
   "vul_id": "80324d6717fbb63bf8290a356128bcdc",
   "method": "if (! ([key isEqualToString:NSFileProtectionCompleteUntilFirstUserAuthentication] || [key isEqualToString:NSFileProtectionNone])) {",
   "column": 123,
   "description": "The file has no special protections associated with it.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDFileLogger.m (953:123)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 37,
   "class": "DDLog.m (37:48)",
   "vul_id": "8645578aa957d4cb0e1157b4448489a5",
   "method": "#define NSLogDebug(frmt, ...) do{ if(DD_DEBUG) NSLog((frmt), ##__VA_ARGS__); } while(0)",
   "column": 48,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDLog.m (37:48)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 555,
   "class": "DDLog.m (555:5)",
   "vul_id": "41fa38b8d4bce06c5bb96b61775f1fbd",
   "method": "NSAssert(dispatch_get_specific(GlobalLoggingQueueIdentityKey),",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDLog.m (555:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 597,
   "class": "DDLog.m (597:5)",
   "vul_id": "7759944556d1afaed37d8adca0b98fd3",
   "method": "NSAssert(dispatch_get_specific(GlobalLoggingQueueIdentityKey),",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDLog.m (597:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 636,
   "class": "DDLog.m (636:5)",
   "vul_id": "c49366387f94489649fa42c4ccc1db35",
   "method": "NSAssert(dispatch_get_specific(GlobalLoggingQueueIdentityKey),",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDLog.m (636:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 657,
   "class": "DDLog.m (657:5)",
   "vul_id": "f1c3cda847af1d416ba3aec7d3670f07",
   "method": "NSAssert(dispatch_get_specific(GlobalLoggingQueueIdentityKey),",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDLog.m (657:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 674,
   "class": "DDLog.m (674:5)",
   "vul_id": "82e01975b71e242a670fd8054d77a0fe",
   "method": "NSAssert(dispatch_get_specific(GlobalLoggingQueueIdentityKey),",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDLog.m (674:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 745,
   "class": "DDLog.m (745:5)",
   "vul_id": "bc9563b5e772760eb85348877107f4ba",
   "method": "NSAssert(dispatch_get_specific(GlobalLoggingQueueIdentityKey),",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDLog.m (745:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1207,
   "class": "DDLog.m (1207:5)",
   "vul_id": "623cb34f83607c7a5807f09f7ded0201",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDLog.m (1207:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1208,
   "class": "DDLog.m (1208:5)",
   "vul_id": "3bc1adda3fab1cb12276c0390d8e1094",
   "method": "NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDLog.m (1208:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1227,
   "class": "DDLog.m (1227:5)",
   "vul_id": "2ba792e1291ab63f954955f940bf064f",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDLog.m (1227:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1228,
   "class": "DDLog.m (1228:5)",
   "vul_id": "36147835054c5edfac59a6781415577a",
   "method": "NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDLog.m (1228:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 2.2,
   "cwe": "CWE-676",
   "line": 893,
   "class": "DDLog.m (893:5)",
   "vul_id": "f77cd40d912dde15ed8a73785719763d",
   "method": "strncpy(result, str, length);",
   "column": 5,
   "description": "The application may contain prohibited APIs. These APIs are insecure and should not be used.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDLog.m (893:5)",
   "recomendation": "Avoid using unsafe API (s) and never rely on data entered by the user, always sanitize the data entered."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 29,
   "class": "DDTTYLogger.m (29:57)",
   "vul_id": "12f27eb52ceac09ab4a80f5022a39c46",
   "method": "#define NSLogError(frmt, ...)    do{ if(LOG_LEVEL \u003e= 1) NSLog((frmt), ##__VA_ARGS__); } while(0)",
   "column": 57,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (29:57)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 30,
   "class": "DDTTYLogger.m (30:57)",
   "vul_id": "543b35c4d9485c322b7881efde94e8b5",
   "method": "#define NSLogWarn(frmt, ...)     do{ if(LOG_LEVEL \u003e= 2) NSLog((frmt), ##__VA_ARGS__); } while(0)",
   "column": 57,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (30:57)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 31,
   "class": "DDTTYLogger.m (31:57)",
   "vul_id": "fd9a5873d03648d59377279a9fa85b9c",
   "method": "#define NSLogInfo(frmt, ...)     do{ if(LOG_LEVEL \u003e= 3) NSLog((frmt), ##__VA_ARGS__); } while(0)",
   "column": 57,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (31:57)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 32,
   "class": "DDTTYLogger.m (32:57)",
   "vul_id": "524bb1c54b7f5d102bd0a570ff275011",
   "method": "#define NSLogDebug(frmt, ...)    do{ if(LOG_LEVEL \u003e= 4) NSLog((frmt), ##__VA_ARGS__); } while(0)",
   "column": 57,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (32:57)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 33,
   "class": "DDTTYLogger.m (33:57)",
   "vul_id": "d6566a2e6abe16b1d1fb619dff87ebb8",
   "method": "#define NSLogVerbose(frmt, ...)  do{ if(LOG_LEVEL \u003e= 5) NSLog((frmt), ##__VA_ARGS__); } while(0)",
   "column": 57,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (33:57)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 243,
   "class": "DDTTYLogger.m (243:5)",
   "vul_id": "6ac846da288f6ef54f652e00a9e54b66",
   "method": "NSAssert([codes_fg count] == [codes_bg count], @\"Invalid colors/codes array(s)\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (243:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 244,
   "class": "DDTTYLogger.m (244:5)",
   "vul_id": "4e89108ba22a35287eba470d96bc4380",
   "method": "NSAssert([codes_fg count] == [colors count],   @\"Invalid colors/codes array(s)\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (244:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 666,
   "class": "DDTTYLogger.m (666:5)",
   "vul_id": "30f30fe184760ef118410db0c0e41160",
   "method": "NSAssert([codes_fg count] == [codes_bg count], @\"Invalid colors/codes array(s)\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (666:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 667,
   "class": "DDTTYLogger.m (667:5)",
   "vul_id": "654144c219ce401e8b4a0564a777bbd7",
   "method": "NSAssert([codes_fg count] == [colors count],   @\"Invalid colors/codes array(s)\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (667:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 881,
   "class": "DDTTYLogger.m (881:5)",
   "vul_id": "879672323c1eb61be7767d9a6c14f27c",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (881:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 882,
   "class": "DDTTYLogger.m (882:5)",
   "vul_id": "421e18e2a85b5503fe292a34e89e42cf",
   "method": "NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (882:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 918,
   "class": "DDTTYLogger.m (918:5)",
   "vul_id": "37928f79f07e2e4f35a8f38dca6c7be6",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (918:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 919,
   "class": "DDTTYLogger.m (919:5)",
   "vul_id": "a1e060c5d01710aefdc5f51884c295e6",
   "method": "NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (919:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 972,
   "class": "DDTTYLogger.m (972:9)",
   "vul_id": "698d1c9d76de32d39af452f0ab67718d",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (972:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 982,
   "class": "DDTTYLogger.m (982:5)",
   "vul_id": "56b42d98a79674646b348a08be7a6b2a",
   "method": "NSAssert([(id \u003cNSObject\u003e)tag conformsToProtocol:@protocol(NSCopying)], @\"Invalid tag\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (982:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1007,
   "class": "DDTTYLogger.m (1007:9)",
   "vul_id": "7fa754bc4980fee0830e8f5c01c261c1",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (1007:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1051,
   "class": "DDTTYLogger.m (1051:9)",
   "vul_id": "61f177f3e483ff0f484fa487c494af7b",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (1051:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1061,
   "class": "DDTTYLogger.m (1061:5)",
   "vul_id": "7619f77a42ddb8b95204649783af7ce2",
   "method": "NSAssert([(id \u003cNSObject\u003e)tag conformsToProtocol:@protocol(NSCopying)], @\"Invalid tag\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (1061:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1078,
   "class": "DDTTYLogger.m (1078:9)",
   "vul_id": "3b7806a30a81904332657dfeee565c63",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (1078:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1103,
   "class": "DDTTYLogger.m (1103:9)",
   "vul_id": "7c67bbee58ee9c5829e3ed41df37792c",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (1103:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1128,
   "class": "DDTTYLogger.m (1128:9)",
   "vul_id": "1302b070c6246bf3683d551ffb83ad3d",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (1128:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1154,
   "class": "DDTTYLogger.m (1154:9)",
   "vul_id": "507cb65e0569e3238bb0393d217a7c22",
   "method": "NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CocoaLumberjack/DDTTYLogger.m (1154:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 104,
   "class": "CBLReplication.h (104:68)",
   "vul_id": "d46d73da6ca18efe7fd6ce3a63bdffc9",
   "method": "This can either come from the URL itself (if it's of the form \"http://user:pass@example.com\")",
   "column": 68,
   "description": "Password in URL. File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/CouchBase/CouchbaseLite.framework/Headers/CBLReplication.h (104:68)",
   "recomendation": "Credentials must not be stored in the git code or repository, an attacker could decompile the application and obtain the credential. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 330,
   "class": "RLMArray.h (330:6)",
   "vul_id": "5793b645176dee2549b928c8c1dfe7d9",
   "method": "NSLog(@\"person.dogs.count: %zu\", person.dogs.count); // =\u003e 0",
   "column": 6,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/Realm/Realm.framework/Headers/RLMArray.h (330:6)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 335,
   "class": "RLMArray.h (335:10)",
   "vul_id": "61fa84e0234d05654c16b1011826076f",
   "method": "NSLog(@\"dogs.count: %zu\", dogs.count) // =\u003e 1",
   "column": 10,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/Realm/Realm.framework/Headers/RLMArray.h (335:10)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 222,
   "class": "RLMCollection.h (222:6)",
   "vul_id": "86f37662f7b2eadd40bcdb644d1aba9a",
   "method": "NSLog(@\"dogs.count: %zu\", dogs.count); // =\u003e 0",
   "column": 6,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/Realm/Realm.framework/Headers/RLMCollection.h (222:6)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 227,
   "class": "RLMCollection.h (227:10)",
   "vul_id": "9e9bb3cf953496089947684b09b907db",
   "method": "NSLog(@\"dogs.count: %zu\", dogs.count); // =\u003e 1",
   "column": 10,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/Realm/Realm.framework/Headers/RLMCollection.h (227:10)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 227,
   "class": "RLMResults.h (227:6)",
   "vul_id": "cefa47081d68a0d5870f85508785bed5",
   "method": "NSLog(@\"dogs.count: %zu\", dogs.count); // =\u003e 0",
   "column": 6,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/Realm/Realm.framework/Headers/RLMResults.h (227:6)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 232,
   "class": "RLMResults.h (232:10)",
   "vul_id": "c433013e975929ac8758db645e5d6210",
   "method": "NSLog(@\"dogs.count: %zu\", dogs.count); // =\u003e 1",
   "column": 10,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/Realm/Realm.framework/Headers/RLMResults.h (232:10)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.9,
   "cwe": "CWE-327",
   "line": 203,
   "class": "CocoaSecurity.m (203:8)",
   "vul_id": "120487c0a966f1848bdab53fb7a2e3d1",
   "method": "CC_SHA1([hashData bytes], (CC_LONG)[hashData length], digest);",
   "column": 8,
   "description": "SHA1 is a weak hash, which can generate repeated hashes.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/SecureNSUserDefaults/CocoaSecurity.m (203:8)",
   "recomendation": "When it is necessary to store or transmit sensitive data, give preference to modern encryption algorithms and check frequently that the algorithm used has not become obsolete."
  },
  {
   "cvss": 5.9,
   "cwe": "CWE-327",
   "line": 203,
   "class": "CocoaSecurity.m (203:5)",
   "vul_id": "9b8ae498b55779dfc80b1edc8aca7169",
   "method": "CC_SHA1([hashData bytes], (CC_LONG)[hashData length], digest);",
   "column": 5,
   "description": "SHA1 is a weak hash, which can generate repeated hashes.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/SecureNSUserDefaults/CocoaSecurity.m (203:5)",
   "recomendation": "When it is necessary to store or transmit sensitive data, give preference to modern encryption algorithms and check frequently that the algorithm used has not become obsolete."
  },
  {
   "cvss": 5.9,
   "cwe": "CWE-327",
   "line": 165,
   "class": "CocoaSecurity.m (165:21)",
   "vul_id": "4112cffb0c13f6e3eb142cb111b2bbdb",
   "method": "digest = malloc(CC_MD5_DIGEST_LENGTH);",
   "column": 21,
   "description": "The app is using weak encryption APIs and / or that are known to have hash conflicts.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/SecureNSUserDefaults/CocoaSecurity.m (165:21)"
  },
  {
   "cvss": 5.9,
   "cwe": "CWE-327",
   "line": 167,
   "class": "CocoaSecurity.m (167:5)",
   "vul_id": "c7839cde78b6d0993eb2629cde9009e8",
   "method": "CC_MD5([hashData bytes], (CC_LONG)[hashData length], digest);",
   "column": 5,
   "description": "The app is using weak encryption APIs and / or that are known to have hash conflicts.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/SecureNSUserDefaults/CocoaSecurity.m (167:5)"
  },
  {
   "cvss": 5.9,
   "cwe": "CWE-327",
   "line": 168,
   "class": "CocoaSecurity.m (168:92)",
   "vul_id": "6a3bd48b6fc079e408fc710eedd34463",
   "method": "CocoaSecurityResult *result = [[CocoaSecurityResult alloc] initWithBytes:digest length:CC_MD5_DIGEST_LENGTH];",
   "column": 92,
   "description": "The app is using weak encryption APIs and / or that are known to have hash conflicts.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/SecureNSUserDefaults/CocoaSecurity.m (168:92)"
  },
  {
   "cvss": 5.9,
   "cwe": "CWE-327",
   "line": 181,
   "class": "CocoaSecurity.m (181:21)",
   "vul_id": "824b26b900e1749cc3a49b86231f8c05",
   "method": "digest = malloc(CC_MD5_DIGEST_LENGTH);",
   "column": 21,
   "description": "The app is using weak encryption APIs and / or that are known to have hash conflicts.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/SecureNSUserDefaults/CocoaSecurity.m (181:21)"
  },
  {
   "cvss": 5.9,
   "cwe": "CWE-327",
   "line": 185,
   "class": "CocoaSecurity.m (185:92)",
   "vul_id": "e1eb4765b0d7e3eb104be0bc3900683e",
   "method": "CocoaSecurityResult *result = [[CocoaSecurityResult alloc] initWithBytes:digest length:CC_MD5_DIGEST_LENGTH];",
   "column": 92,
   "description": "The app is using weak encryption APIs and / or that are known to have hash conflicts.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/SecureNSUserDefaults/CocoaSecurity.m (185:92)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 118,
   "class": "NSUserDefaults+SecureAdditions.m (118:5)",
   "vul_id": "b6dd082db635ed3b1010632048c8b401",
   "method": "NSAssert(_secret, @\"Secret may not be nil when storing an object securely\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/SecureNSUserDefaults/NSUserDefaults+SecureAdditions.m (118:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 148,
   "class": "NSUserDefaults+SecureAdditions.m (148:9)",
   "vul_id": "d2433d5535cf72e40eee8fa078bb5d7b",
   "method": "NSLog(@\"Cannot receive object from encrypted data storage: %@\", exception.reason);",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/SecureNSUserDefaults/NSUserDefaults+SecureAdditions.m (148:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 190,
   "class": "NSUserDefaults+SecureAdditions.m (190:5)",
   "vul_id": "9614f510a51221c9f7c8eefa6aa7cd67",
   "method": "NSAssert(_secret, @\"Secret may not be nil when storing an object securely\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/SecureNSUserDefaults/NSUserDefaults+SecureAdditions.m (190:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 214,
   "class": "NSUserDefaults+SecureAdditions.m (214:9)",
   "vul_id": "91f3cdacdf5c65617643d814de89f857",
   "method": "NSLog(@\"Cannot store object securely: %@\", exception.reason);",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/SecureNSUserDefaults/NSUserDefaults+SecureAdditions.m (214:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 187,
   "class": "YDBCKChangeSet.m (187:3)",
   "vul_id": "c86f8fec6ad0b2327d1f56629a334101",
   "method": "NSAssert([deletedRecordIDs isKindOfClass:[NSMutableArray class]], @\"Deserialized object is wrong class\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Utilities/YDBCKChangeSet.m (187:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 208,
   "class": "YDBCKChangeSet.m (208:3)",
   "vul_id": "b2fa640aad3f22e98a939a0ba6a8606c",
   "method": "NSAssert([modifiedRecordsArray isKindOfClass:[NSArray class]], @\"Deserialized object is wrong class\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Utilities/YDBCKChangeSet.m (208:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 136,
   "class": "YDBCKRecord.m (136:4)",
   "vul_id": "358e36a3afe5fa1423b21cb9868ead72",
   "method": "//\tNSLog(@\"decodeObjectForKey: %@\", key);",
   "column": 4,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Utilities/YDBCKRecord.m (136:4)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 51,
   "class": "YDBCKChangeQueue.m (51:2)",
   "vul_id": "60c32713ec1322b1ae4ca4df0b412d8d",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (51:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 139,
   "class": "YDBCKChangeQueue.m (139:2)",
   "vul_id": "5b8cdbc413019f79c0bd6407a2378f46",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (139:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 166,
   "class": "YDBCKChangeQueue.m (166:2)",
   "vul_id": "d4f39a8019c680495bead6b1d4f37bd7",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (166:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 167,
   "class": "YDBCKChangeQueue.m (167:2)",
   "vul_id": "558ddbd0980e6f9a95aa0f73a4b2a997",
   "method": "NSAssert(pendingQueue.isPendingQueue, @\"Bad parameter: 'pendingQueue' is not a pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (167:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 168,
   "class": "YDBCKChangeQueue.m (168:2)",
   "vul_id": "32864740df6600f965b8a46375b7ce7a",
   "method": "NSAssert([self.lockUUID isEqualToString:pendingQueue.lockUUID], @\"Bad state: Not locked for pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (168:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 171,
   "class": "YDBCKChangeQueue.m (171:2)",
   "vul_id": "2efc6d08d149eed90eff6d355e6db92f",
   "method": "NSAssert(count == [pendingQueue-\u003eoldChangeSets count], @\"Logic error !\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (171:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 224,
   "class": "YDBCKChangeQueue.m (224:2)",
   "vul_id": "43083049812668cc9099ccda16ee17f8",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (224:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 274,
   "class": "YDBCKChangeQueue.m (274:2)",
   "vul_id": "d32abc418818347835be1f0011c37d35",
   "method": "NSAssert(self.isPendingQueue, @\"Method can only be invoked on pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (274:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 305,
   "class": "YDBCKChangeQueue.m (305:2)",
   "vul_id": "f144928a985d12e7183d237039290c49",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (305:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 324,
   "class": "YDBCKChangeQueue.m (324:2)",
   "vul_id": "69fda5ed16249c85c2a11eca6822aa52",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (324:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 345,
   "class": "YDBCKChangeQueue.m (345:2)",
   "vul_id": "0fec3d70d125a246e7eedfa779a80927",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (345:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 362,
   "class": "YDBCKChangeQueue.m (362:2)",
   "vul_id": "b256c50387b1ab13a92b1008297517ae",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (362:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 498,
   "class": "YDBCKChangeQueue.m (498:2)",
   "vul_id": "f1c2b3cd4c67768aa8d456f67d655524",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (498:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 499,
   "class": "YDBCKChangeQueue.m (499:2)",
   "vul_id": "1199818b77f6e3033084a2cc7219392c",
   "method": "NSAssert(pendingQueue.isPendingQueue, @\"Bad parameter: 'pendingQueue' is not a pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (499:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 500,
   "class": "YDBCKChangeQueue.m (500:2)",
   "vul_id": "18ecc43afd9de0788aeacdfcfd913231",
   "method": "NSAssert(pendingQueue-\u003enewChangeSets == nil, @\"Cannot modify pendingQueue after newChangeSets has been fetched\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (500:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 501,
   "class": "YDBCKChangeQueue.m (501:2)",
   "vul_id": "bce46426b24bacce831f56a2405ce1f3",
   "method": "NSAssert([self.lockUUID isEqualToString:pendingQueue.lockUUID], @\"Bad state: Not locked for pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (501:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 548,
   "class": "YDBCKChangeQueue.m (548:2)",
   "vul_id": "51b55e2fef44588921a9fb2b6c3335bf",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (548:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 549,
   "class": "YDBCKChangeQueue.m (549:2)",
   "vul_id": "a024dea28d50f799b55753a37fd39736",
   "method": "NSAssert(pendingQueue.isPendingQueue, @\"Bad parameter: 'pendingQueue' is not a pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (549:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 550,
   "class": "YDBCKChangeQueue.m (550:2)",
   "vul_id": "3cca13c2852423525b7125dd23ba8479",
   "method": "NSAssert(pendingQueue-\u003enewChangeSets == nil, @\"Cannot modify pendingQueue after newChangeSets has been fetched\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (550:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 551,
   "class": "YDBCKChangeQueue.m (551:2)",
   "vul_id": "ff1d9a7a2611fcfcb052e189154ec31d",
   "method": "NSAssert([self.lockUUID isEqualToString:pendingQueue.lockUUID], @\"Bad state: Not locked for pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (551:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 647,
   "class": "YDBCKChangeQueue.m (647:2)",
   "vul_id": "2857453ed8b392734c738c877d367210",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (647:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 648,
   "class": "YDBCKChangeQueue.m (648:2)",
   "vul_id": "0170c2539eff3d4eb8216fe632a05864",
   "method": "NSAssert(pendingQueue.isPendingQueue, @\"Bad parameter: 'pendingQueue' is not a pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (648:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 649,
   "class": "YDBCKChangeQueue.m (649:2)",
   "vul_id": "7a99f4313113e92d4a8718883ae7f56a",
   "method": "NSAssert(pendingQueue-\u003enewChangeSets == nil, @\"Cannot modify pendingQueue after newChangeSets has been fetched\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (649:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 650,
   "class": "YDBCKChangeQueue.m (650:2)",
   "vul_id": "6f33915c65acc9333151d4ece84cf6b8",
   "method": "NSAssert([self.lockUUID isEqualToString:pendingQueue.lockUUID], @\"Bad state: Not locked for pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (650:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 716,
   "class": "YDBCKChangeQueue.m (716:2)",
   "vul_id": "d4215822bfc3eb86784e348f7597a48f",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (716:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 717,
   "class": "YDBCKChangeQueue.m (717:2)",
   "vul_id": "4f81015571ba4a2944f2312881a09ee0",
   "method": "NSAssert(pendingQueue.isPendingQueue, @\"Bad parameter: 'pendingQueue' is not a pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (717:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 718,
   "class": "YDBCKChangeQueue.m (718:2)",
   "vul_id": "bc142e1252c4f9d6ad29ce93e372d330",
   "method": "NSAssert(pendingQueue-\u003enewChangeSets == nil, @\"Cannot modify pendingQueue after newChangeSets has been fetched\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (718:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 719,
   "class": "YDBCKChangeQueue.m (719:2)",
   "vul_id": "239e1c5aaf6ea964d822030c27485039",
   "method": "NSAssert([self.lockUUID isEqualToString:pendingQueue.lockUUID], @\"Bad state: Not locked for pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (719:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 809,
   "class": "YDBCKChangeQueue.m (809:2)",
   "vul_id": "061eceec5b8294bb93443710c626de0d",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (809:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 810,
   "class": "YDBCKChangeQueue.m (810:2)",
   "vul_id": "665da06f244e030b5eb990d5e62c2418",
   "method": "NSAssert(pendingQueue.isPendingQueue, @\"Bad parameter: 'pendingQueue' is not a pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (810:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 811,
   "class": "YDBCKChangeQueue.m (811:2)",
   "vul_id": "96a69bf12fd34940f4819ad235b15ac8",
   "method": "NSAssert(pendingQueue-\u003enewChangeSets == nil, @\"Cannot modify pendingQueue after newChangeSets has been fetched\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (811:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 812,
   "class": "YDBCKChangeQueue.m (812:2)",
   "vul_id": "af39f683777621bb3524d646309d3259",
   "method": "NSAssert([self.lockUUID isEqualToString:pendingQueue.lockUUID], @\"Bad state: Not locked for pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (812:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 982,
   "class": "YDBCKChangeQueue.m (982:2)",
   "vul_id": "0ed01f283095b75ff078819e0d33319e",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (982:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 983,
   "class": "YDBCKChangeQueue.m (983:2)",
   "vul_id": "9a6ffd9acced41f8a6e6998615016d67",
   "method": "NSAssert(pendingQueue.isPendingQueue, @\"Bad parameter: 'pendingQueue' is not a pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (983:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 984,
   "class": "YDBCKChangeQueue.m (984:2)",
   "vul_id": "2a80a6e8d8b4aa3f32d3c210541eff2b",
   "method": "NSAssert(pendingQueue-\u003enewChangeSets == nil, @\"Cannot modify pendingQueue after newChangeSets has been fetched\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (984:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 985,
   "class": "YDBCKChangeQueue.m (985:2)",
   "vul_id": "cb0017af188dc7167dcce7c77a8dd091",
   "method": "NSAssert([self.lockUUID isEqualToString:pendingQueue.lockUUID], @\"Bad state: Not locked for pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (985:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1053,
   "class": "YDBCKChangeQueue.m (1053:2)",
   "vul_id": "6952db66f0f299e24b4a18430e7a1edb",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (1053:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1054,
   "class": "YDBCKChangeQueue.m (1054:2)",
   "vul_id": "1731899431d5203c201e1356d712fd40",
   "method": "NSAssert(pendingQueue.isPendingQueue, @\"Bad parameter: 'pendingQueue' is not a pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (1054:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1055,
   "class": "YDBCKChangeQueue.m (1055:2)",
   "vul_id": "df6eac7edff386ccf22b03875ff0e5f5",
   "method": "NSAssert(pendingQueue-\u003enewChangeSets == nil, @\"Cannot modify pendingQueue after newChangeSets has been fetched\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (1055:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1056,
   "class": "YDBCKChangeQueue.m (1056:2)",
   "vul_id": "2aa0427bc819b1f8007145c36e245ac1",
   "method": "NSAssert([self.lockUUID isEqualToString:pendingQueue.lockUUID], @\"Bad state: Not locked for pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (1056:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1179,
   "class": "YDBCKChangeQueue.m (1179:2)",
   "vul_id": "2d9a836fbc7db86d904b00d840ad1837",
   "method": "NSAssert(self.isMasterQueue, @\"Method can only be invoked on masterQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (1179:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1180,
   "class": "YDBCKChangeQueue.m (1180:2)",
   "vul_id": "be6ff697988e14c73fc9c6377392d374",
   "method": "NSAssert(pendingQueue.isPendingQueue, @\"Bad parameter: 'pendingQueue' is not a pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (1180:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1181,
   "class": "YDBCKChangeQueue.m (1181:2)",
   "vul_id": "7ac1b34325b46325936e26fce2e4828f",
   "method": "NSAssert(pendingQueue-\u003enewChangeSets == nil, @\"Cannot modify pendingQueue after newChangeSets has been fetched\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (1181:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1182,
   "class": "YDBCKChangeQueue.m (1182:2)",
   "vul_id": "b5eb797838b4ebd5493253cc8be1b2c5",
   "method": "NSAssert([self.lockUUID isEqualToString:pendingQueue.lockUUID], @\"Bad state: Not locked for pendingQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/Internal/YDBCKChangeQueue.m (1182:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 64,
   "class": "YapDatabaseCloudKit.m (64:16)",
   "vul_id": "858b66fad45aa00618a4da64b70e90c7",
   "method": "int status = sqlite3_exec(db, [dropTable UTF8String], NULL, NULL, NULL);",
   "column": 16,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKit.m (64:16)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 549,
   "class": "YapDatabaseCloudKit.m (549:3)",
   "vul_id": "ec18dd9151a1d1418b263983ea39899a",
   "method": "NSAssert([dbID isKindOfClass:[NSString class]], @\"Invalid databaseIdentifier\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKit.m (549:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 72,
   "class": "YapDatabaseFilteredView.m (72:2)",
   "vul_id": "aabbb809bed5d33736128824ba4827b5",
   "method": "NSAssert(inParentViewName != nil, @\"Invalid parameter: parentViewName == nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/FilteredViews/YapDatabaseFilteredView.m (72:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 73,
   "class": "YapDatabaseFilteredView.m (73:2)",
   "vul_id": "56cf17de2c8e4ceaa3a2dc7dc1036d73",
   "method": "NSAssert(filtering != nil, @\"Invalid parameter: filtering == nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/FilteredViews/YapDatabaseFilteredView.m (73:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1384,
   "class": "YapDatabaseFilteredViewTransaction.m (1384:2)",
   "vul_id": "fd64a29352eddef9b995bb163610f792",
   "method": "NSAssert(filtering != nil, @\"Invalid parameter: filtering == nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/FilteredViews/YapDatabaseFilteredViewTransaction.m (1384:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 36,
   "class": "YapDatabaseFullTextSearch.m (36:11)",
   "vul_id": "6da4be4900a8ce1f2e2392f4e6091c22",
   "method": "status = sqlite3_exec(db, [dropTable UTF8String], NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/FullTextSearch/YapDatabaseFullTextSearch.m (36:11)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 85,
   "class": "YapDatabaseFullTextSearch.m (85:3)",
   "vul_id": "8eb103b5aa6b7555e36c3bf6b0c4315b",
   "method": "NSAssert(NO, @\"Empty columnNames array\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/FullTextSearch/YapDatabaseFullTextSearch.m (85:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 93,
   "class": "YapDatabaseFullTextSearch.m (93:4)",
   "vul_id": "8350189d1b2d9ca54ba65e8e48f91765",
   "method": "NSAssert(NO, @\"Invalid column name. Not a string: %@\", columnName);",
   "column": 4,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/FullTextSearch/YapDatabaseFullTextSearch.m (93:4)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 100,
   "class": "YapDatabaseFullTextSearch.m (100:4)",
   "vul_id": "2385222ab7c5be7b467d7cebe6204c1c",
   "method": "NSAssert(NO, @\"Invalid column name. Cannot contain quotes: %@\", columnName);",
   "column": 4,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/FullTextSearch/YapDatabaseFullTextSearch.m (100:4)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 105,
   "class": "YapDatabaseFullTextSearch.m (105:2)",
   "vul_id": "a3398a545725895444202fb652326355",
   "method": "NSAssert(inHandler != NULL, @\"Null handler\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/FullTextSearch/YapDatabaseFullTextSearch.m (105:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 197,
   "class": "YapDatabaseCloudKitTransaction.m (197:11)",
   "vul_id": "31c7276e9c3f9c380ecb6fdff474bfab",
   "method": "status = sqlite3_exec(db, [createMappingTable UTF8String], NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (197:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 206,
   "class": "YapDatabaseCloudKitTransaction.m (206:11)",
   "vul_id": "72998b780a27fc810baa7910d70fad02",
   "method": "status = sqlite3_exec(db, [createMappingTableIndex UTF8String], NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (206:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 229,
   "class": "YapDatabaseCloudKitTransaction.m (229:11)",
   "vul_id": "fb59787edd330196db9144f4463320ad",
   "method": "status = sqlite3_exec(db, [createRecordTable UTF8String], NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (229:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 253,
   "class": "YapDatabaseCloudKitTransaction.m (253:11)",
   "vul_id": "1f15bc1ea4800e15789a352bdf47b19b",
   "method": "status = sqlite3_exec(db, [createQueueTable UTF8String], NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (253:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 378,
   "class": "YapDatabaseCloudKitTransaction.m (378:2)",
   "vul_id": "da4a103398350cc47a6e9301dfbbedee",
   "method": "sqlite3_finalize(statement);",
   "column": 2,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (378:2)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 1550,
   "class": "YapDatabaseCloudKitTransaction.m (1550:3)",
   "vul_id": "6c2333fb5a2b831b19fead20eb5da996",
   "method": "sqlite3_finalize(statement);",
   "column": 3,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (1550:3)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2028,
   "class": "YapDatabaseCloudKitTransaction.m (2028:3)",
   "vul_id": "453e800dfb9fa9bff85846e18ba08a43",
   "method": "sqlite3_finalize(statement);",
   "column": 3,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (2028:3)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2307,
   "class": "YapDatabaseCloudKitTransaction.m (2307:3)",
   "vul_id": "eb6d7bf48d94d6589061d5a5056a09cc",
   "method": "sqlite3_finalize(statement);",
   "column": 3,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (2307:3)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 129,
   "class": "YapDatabaseCloudKitTransaction.m (129:3)",
   "vul_id": "5aacbb186a9ea6a0cfaa17f8ad870057",
   "method": "NSAssert(NO, @\"Attempting invalid upgrade path !\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (129:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1562,
   "class": "YapDatabaseCloudKitTransaction.m (1562:3)",
   "vul_id": "ea69c74c389bf1fcff922b5db871655b",
   "method": "NSAssert(dirtyMappingTableInfo.dirty_recordTable_hash != nil, @\"Logic error\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (1562:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1597,
   "class": "YapDatabaseCloudKitTransaction.m (1597:3)",
   "vul_id": "f30583e64d3ab2409afa3897229598e7",
   "method": "NSAssert(dirtyMappingTableInfo.dirty_recordTable_hash != nil, @\"Logic error\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (1597:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2049,
   "class": "YapDatabaseCloudKitTransaction.m (2049:2)",
   "vul_id": "bb033a1086c1375a3fc5e26e5574da41",
   "method": "NSAssert(dirtyRecordTableInfo.dirty_record != nil, @\"Logic error\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (2049:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2050,
   "class": "YapDatabaseCloudKitTransaction.m (2050:2)",
   "vul_id": "c4845ee7928ad3d242cdc2747b228f2a",
   "method": "NSAssert(dirtyRecordTableInfo.dirty_ownerCount \u003e 0, @\"Logic error\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (2050:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2116,
   "class": "YapDatabaseCloudKitTransaction.m (2116:2)",
   "vul_id": "1bb7261caaa9bcae45ebc97c6f639940",
   "method": "NSAssert(dirtyRecordTableInfo.dirty_record != nil, @\"Logic error\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (2116:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2117,
   "class": "YapDatabaseCloudKitTransaction.m (2117:2)",
   "vul_id": "6a324e729f12c9af6395cd92d3f9add3",
   "method": "NSAssert(dirtyRecordTableInfo.dirty_ownerCount \u003e 0, @\"Logic error\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (2117:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2454,
   "class": "YapDatabaseCloudKitTransaction.m (2454:2)",
   "vul_id": "91a9885c1441ea13f68cd894a6cd29cf",
   "method": "NSAssert(changeSet.hasChangesToDeletedRecordIDs || changeSet.hasChangesToModifiedRecords,",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (2454:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2836,
   "class": "YapDatabaseCloudKitTransaction.m (2836:4)",
   "vul_id": "10d09cd02a64fbf97ad2ac587f874bb0",
   "method": "NSAssert(![queuedChangeSet.uuid isEqualToString:changeSet.uuid], @\"Logic error\");",
   "column": 4,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (2836:4)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 2.2,
   "cwe": "CWE-676",
   "line": 1066,
   "class": "YapDatabaseCloudKitTransaction.m (1066:3)",
   "vul_id": "34d75193ba826a08539e41407d05d28a",
   "method": "memcpy(buffer, (void *)'_', 1); // prefix with underscore to differentiate between nil \u0026 empty-string",
   "column": 3,
   "description": "The application may contain prohibited APIs. These APIs are insecure and should not be used.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/CloudKit/YapDatabaseCloudKitTransaction.m (1066:3)",
   "recomendation": "Avoid using unsafe API (s) and never rely on data entered by the user, always sanitize the data entered."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 144,
   "class": "YapDatabaseFullTextSearchTransaction.m (144:15)",
   "vul_id": "db6b0f675da9b525898b88d5d8b8882b",
   "method": "int status = sqlite3_exec(db, [dropTable UTF8String], NULL, NULL, NULL);",
   "column": 15,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/FullTextSearch/YapDatabaseFullTextSearchTransaction.m (144:15)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 202,
   "class": "YapDatabaseFullTextSearchTransaction.m (202:15)",
   "vul_id": "785c21f0e630fd6a6bc17e2d9598ead6",
   "method": "int status = sqlite3_exec(db, [createTable UTF8String], NULL, NULL, NULL);",
   "column": 15,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/FullTextSearch/YapDatabaseFullTextSearchTransaction.m (202:15)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 471,
   "class": "YapDatabaseFullTextSearchTransaction.m (471:2)",
   "vul_id": "874959fac0312012d74238beae6d0ef5",
   "method": "sqlite3_finalize(statement);",
   "column": 2,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/FullTextSearch/YapDatabaseFullTextSearchTransaction.m (471:2)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 27,
   "class": "YapDatabaseExtension.m (27:2)",
   "vul_id": "6ab4f05184c76f20bc7f814fc5e52f35",
   "method": "NSAssert(NO, @\"Missing required method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtension.m (27:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 113,
   "class": "YapDatabaseExtension.m (113:2)",
   "vul_id": "814cedba781e28f7b5133404c526d14f",
   "method": "NSAssert(NO, @\"Missing required method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtension.m (113:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 35,
   "class": "YapDatabaseExtensionConnection.m (35:2)",
   "vul_id": "0f9ac872e635b29f00cfee7f8060916b",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionConnection.m (35:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 48,
   "class": "YapDatabaseExtensionConnection.m (48:2)",
   "vul_id": "84e7f800d60a3662954dc524d8615f24",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionConnection.m (48:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 72,
   "class": "YapDatabaseExtensionConnection.m (72:2)",
   "vul_id": "89dfc288ead14d028a0545559cf8df44",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionConnection.m (72:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 115,
   "class": "YapDatabaseExtensionConnection.m (115:2)",
   "vul_id": "f3883eb86abc7123cec4c0c76040e01a",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionConnection.m (115:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 134,
   "class": "YapDatabaseExtensionConnection.m (134:2)",
   "vul_id": "d314d84c10b87d3d8f0fb6acac52110a",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionConnection.m (134:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 151,
   "class": "YapDatabaseExtensionConnection.m (151:2)",
   "vul_id": "9d29d4761bf9f7bc311728b38f677bb5",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionConnection.m (151:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 43,
   "class": "YapDatabaseRelationship.m (43:15)",
   "vul_id": "c85bef9b4ac5aa7cc705d342ea10d501",
   "method": "int status = sqlite3_exec(db, [dropTable UTF8String], NULL, NULL, NULL);",
   "column": 15,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Relationships/YapDatabaseRelationship.m (43:15)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 91,
   "class": "YapDatabaseExtensionTransaction.m (91:2)",
   "vul_id": "2df5e1cb203e39be3bbca47fbc912ac0",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (91:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 119,
   "class": "YapDatabaseExtensionTransaction.m (119:2)",
   "vul_id": "972252c251af7f7561df8efa1f9741d4",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (119:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 170,
   "class": "YapDatabaseExtensionTransaction.m (170:2)",
   "vul_id": "5864a554b38b4129e7bc745843bc895a",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (170:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 188,
   "class": "YapDatabaseExtensionTransaction.m (188:2)",
   "vul_id": "095c76b8835c5c4930fe42fdabe4c49e",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (188:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 206,
   "class": "YapDatabaseExtensionTransaction.m (206:2)",
   "vul_id": "c858734131509ac525868e6dc0ef2c66",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (206:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 216,
   "class": "YapDatabaseExtensionTransaction.m (216:2)",
   "vul_id": "c74f7193d8d048b50a81a7e469c89208",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (216:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 240,
   "class": "YapDatabaseExtensionTransaction.m (240:2)",
   "vul_id": "52100b6c9d9757dad501534da6ed179e",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (240:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 259,
   "class": "YapDatabaseExtensionTransaction.m (259:2)",
   "vul_id": "7e1dacb3e1e485e15baeb842c61cb19e",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (259:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 276,
   "class": "YapDatabaseExtensionTransaction.m (276:2)",
   "vul_id": "385e6d1d4da3ca3d9364390e65e03776",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (276:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 293,
   "class": "YapDatabaseExtensionTransaction.m (293:2)",
   "vul_id": "f973c9b727284b5e21b22d9547d8fb50",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (293:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 305,
   "class": "YapDatabaseExtensionTransaction.m (305:2)",
   "vul_id": "0a9d2d90ed93bd4d1058aeb4c5d0cce2",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (305:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 317,
   "class": "YapDatabaseExtensionTransaction.m (317:2)",
   "vul_id": "3cb72462690ace13c5be82cdf9515f07",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (317:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 329,
   "class": "YapDatabaseExtensionTransaction.m (329:2)",
   "vul_id": "879a9e0ac49c78410361e5ded4dace7b",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (329:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 349,
   "class": "YapDatabaseExtensionTransaction.m (349:2)",
   "vul_id": "543f2bc8d2fc0c2b5b2805e4d85aa59d",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (349:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 360,
   "class": "YapDatabaseExtensionTransaction.m (360:2)",
   "vul_id": "7fa15a5dcf319b7b08ab09f572a8bc9e",
   "method": "NSAssert(NO, @\"Missing required override method(%@) in class(%@)\", NSStringFromSelector(_cmd), [self class]);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (360:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 572,
   "class": "YapDatabaseExtensionTransaction.m (572:3)",
   "vul_id": "41153479392d4bda0d96f653c89e1f9a",
   "method": "NSAssert(NO, @\"Cannot modify database outside of readWrite transaction!\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (572:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 632,
   "class": "YapDatabaseExtensionTransaction.m (632:3)",
   "vul_id": "189f462bd9c93418c273221f668f2eb0",
   "method": "NSAssert(NO, @\"Cannot modify database outside of readWrite transaction!\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (632:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 692,
   "class": "YapDatabaseExtensionTransaction.m (692:3)",
   "vul_id": "93ee9ee2d63a13eaf1f8f4ffcc3f1f05",
   "method": "NSAssert(NO, @\"Cannot modify database outside of readWrite transaction!\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (692:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 742,
   "class": "YapDatabaseExtensionTransaction.m (742:3)",
   "vul_id": "f6cf83f5ae3914f80e2447a76b989d57",
   "method": "NSAssert(NO, @\"Cannot modify database outside of readWrite transaction!\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (742:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 790,
   "class": "YapDatabaseExtensionTransaction.m (790:3)",
   "vul_id": "71cd0a36f83c0e5237383f15b942f2a1",
   "method": "NSAssert(NO, @\"Cannot modify database outside of readWrite transaction!\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (790:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 817,
   "class": "YapDatabaseExtensionTransaction.m (817:3)",
   "vul_id": "0a642bdba128869c99f8e156b761f74c",
   "method": "NSAssert(NO, @\"Cannot modify database outside of readWrite transaction!\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Protocol/YapDatabaseExtensionTransaction.m (817:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 40,
   "class": "YapDatabaseSearchResultsView.m (40:16)",
   "vul_id": "d6687f47eb2b4aa35b115b11f37fac49",
   "method": "int status = sqlite3_exec(db, [dropTable UTF8String], NULL, NULL, NULL);",
   "column": 16,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsView.m (40:16)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 93,
   "class": "YapDatabaseSearchResultsView.m (93:2)",
   "vul_id": "a4b98b2b1c41b80435bec32a0d31cf1f",
   "method": "NSAssert(inFullTextSearchName != nil, @\"Invalid fullTextSearchName\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsView.m (93:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 94,
   "class": "YapDatabaseSearchResultsView.m (94:2)",
   "vul_id": "04fc4c82cda0e8854fb572d2691bcbd1",
   "method": "NSAssert(inParentViewName != nil, @\"Invalid parentViewName\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsView.m (94:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 114,
   "class": "YapDatabaseSearchResultsView.m (114:2)",
   "vul_id": "fb887e0818a8906db669d066ca81ca44",
   "method": "NSAssert(inFullTextSearchName != nil, @\"Invalid parameter: fullTextSearchName == nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsView.m (114:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 116,
   "class": "YapDatabaseSearchResultsView.m (116:2)",
   "vul_id": "f066f0ad68277312a96354dba16b11a0",
   "method": "NSAssert(grouping != NULL, @\"Invalid parameter: grouping == nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsView.m (116:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 117,
   "class": "YapDatabaseSearchResultsView.m (117:2)",
   "vul_id": "04141f319835183bee6676a57a9068c5",
   "method": "NSAssert(sorting != NULL, @\"Invalid parameter: sorting == nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsView.m (117:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 156,
   "class": "YapDatabaseSearchResultsViewConnection.m (156:2)",
   "vul_id": "e9d277d5f2c04968b68b98b644c9e5f4",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsViewConnection.m (156:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 173,
   "class": "YapDatabaseSearchResultsViewConnection.m (173:2)",
   "vul_id": "5203d010a8ea428d443818bc10f66cc7",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsViewConnection.m (173:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 190,
   "class": "YapDatabaseSearchResultsViewConnection.m (190:2)",
   "vul_id": "70b1446dc731563c5bb52e4fca40ab5b",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsViewConnection.m (190:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 206,
   "class": "YapDatabaseSearchResultsViewConnection.m (206:2)",
   "vul_id": "efabece7f58a1d93779ed0796e0da61f",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsViewConnection.m (206:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 243,
   "class": "YapDatabaseSearchResultsViewConnection.m (243:2)",
   "vul_id": "e0f971036286145ed667e22511848d30",
   "method": "NSAssert(dispatch_get_specific(databaseConnection-\u003eIsOnConnectionQueueKey), @\"Expected to be on connectionQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsViewConnection.m (243:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 251,
   "class": "YapDatabaseSearchResultsViewConnection.m (251:2)",
   "vul_id": "0d655756637e09dd25ec13c39adbdb88",
   "method": "NSAssert(dispatch_get_specific(databaseConnection-\u003eIsOnConnectionQueueKey), @\"Expected to be on connectionQueue\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsViewConnection.m (251:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 274,
   "class": "YapDatabaseSearchResultsViewTransaction.m (274:17)",
   "vul_id": "3c8f4ac05d64077f0ac12b562f114d3a",
   "method": "int status = sqlite3_exec(db, [createSnippetTable UTF8String], NULL, NULL, NULL);",
   "column": 17,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsViewTransaction.m (274:17)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 964,
   "class": "YapDatabaseSearchResultsViewTransaction.m (964:4)",
   "vul_id": "e2dc8a0aeccbb74c43ca585e2db0f523",
   "method": "sqlite3_finalize(statement);",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsViewTransaction.m (964:4)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 378,
   "class": "YapDatabaseSearchResultsViewTransaction.m (378:3)",
   "vul_id": "c98d10258918fd60e9715376da46da9c",
   "method": "NSAssert(snippets != nil, @\"Forgot to initialize snippets variable !\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsViewTransaction.m (378:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 428,
   "class": "YapDatabaseSearchResultsViewTransaction.m (428:2)",
   "vul_id": "79ceafd3a2a73b97adaadf8cc61243a3",
   "method": "NSAssert(((YapDatabaseSearchResultsView *)viewConnection-\u003eview)-\u003eparentViewName != nil,",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsViewTransaction.m (428:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 516,
   "class": "YapDatabaseSearchResultsViewTransaction.m (516:2)",
   "vul_id": "b5ff03118b7e59849a4befdabdf2924b",
   "method": "NSAssert(((YapDatabaseSearchResultsView *)viewConnection-\u003eview)-\u003eparentViewName != nil,",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsViewTransaction.m (516:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2088,
   "class": "YapDatabaseSearchResultsViewTransaction.m (2088:2)",
   "vul_id": "6cac8f571f57c7faebfde63fe61f52b6",
   "method": "NSAssert(((YapDatabaseSearchResultsView *)viewConnection-\u003eview)-\u003eparentViewName != nil,",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsViewTransaction.m (2088:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2234,
   "class": "YapDatabaseSearchResultsViewTransaction.m (2234:2)",
   "vul_id": "c4906eef9f10dbc9297e507fdd178466",
   "method": "NSAssert(((YapDatabaseSearchResultsView *)viewConnection-\u003eview)-\u003eparentViewName == nil,",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SearchResults/YapDatabaseSearchResultsViewTransaction.m (2234:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 35,
   "class": "YapDatabaseSecondaryIndex.m (35:15)",
   "vul_id": "78da11f968ac00c965d50998041294df",
   "method": "int status = sqlite3_exec(db, [dropTable UTF8String], NULL, NULL, NULL);",
   "column": 15,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SecondaryIndex/YapDatabaseSecondaryIndex.m (35:15)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 61,
   "class": "YapDatabaseSecondaryIndex.m (61:2)",
   "vul_id": "b0dcc0c35fda9ef62869519a907118f8",
   "method": "NSAssert(NO, @\"Must use designated initializer\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SecondaryIndex/YapDatabaseSecondaryIndex.m (61:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 87,
   "class": "YapDatabaseSecondaryIndex.m (87:3)",
   "vul_id": "71a8dd5a1fa2d5b11ec78ce7b713595e",
   "method": "NSAssert(NO, @\"Invalid setup: nil\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SecondaryIndex/YapDatabaseSecondaryIndex.m (87:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 95,
   "class": "YapDatabaseSecondaryIndex.m (95:3)",
   "vul_id": "144747d0395ad72e66962c9ee933cd95",
   "method": "NSAssert(NO, @\"Invalid setup: empty\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SecondaryIndex/YapDatabaseSecondaryIndex.m (95:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 103,
   "class": "YapDatabaseSecondaryIndex.m (103:3)",
   "vul_id": "d88d2aa8ca2121f9b817aae9637110e3",
   "method": "NSAssert(NO, @\"Invalid handler: NULL\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SecondaryIndex/YapDatabaseSecondaryIndex.m (103:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 88,
   "class": "YapDatabaseSecondaryIndexSetup.m (88:3)",
   "vul_id": "ca55cadc7e1e121165e8d1f22e57be01",
   "method": "NSAssert(NO, @\"Invalid columnName: nil\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SecondaryIndex/YapDatabaseSecondaryIndexSetup.m (88:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 96,
   "class": "YapDatabaseSecondaryIndexSetup.m (96:3)",
   "vul_id": "59d84245cb315b5126fd515540d26f55",
   "method": "NSAssert(NO, @\"Invalid columnName: columnName is reserved\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SecondaryIndex/YapDatabaseSecondaryIndexSetup.m (96:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 104,
   "class": "YapDatabaseSecondaryIndexSetup.m (104:3)",
   "vul_id": "021f1673a7b79e089a8cf523621ec6c4",
   "method": "NSAssert(NO, @\"Invalid columnName: columnName already exists\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SecondaryIndex/YapDatabaseSecondaryIndexSetup.m (104:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 114,
   "class": "YapDatabaseSecondaryIndexSetup.m (114:3)",
   "vul_id": "e0a648e5d6fde565f6aeb182b2f5d69f",
   "method": "NSAssert(NO, @\"Invalid type\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SecondaryIndex/YapDatabaseSecondaryIndexSetup.m (114:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 191,
   "class": "YapDatabaseRelationshipTransaction.m (191:15)",
   "vul_id": "eadca70423486a33396f74e57457bd2d",
   "method": "int status = sqlite3_exec(db, [dropTable UTF8String], NULL, NULL, NULL);",
   "column": 15,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Relationships/YapDatabaseRelationshipTransaction.m (191:15)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 234,
   "class": "YapDatabaseRelationshipTransaction.m (234:11)",
   "vul_id": "f10d94980e9dfca2846d103b6654c811",
   "method": "status = sqlite3_exec(db, [createTable UTF8String], NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Relationships/YapDatabaseRelationshipTransaction.m (234:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 242,
   "class": "YapDatabaseRelationshipTransaction.m (242:11)",
   "vul_id": "58a5b41ed04cb4559ce08085c190b467",
   "method": "status = sqlite3_exec(db, [createNameIndex UTF8String], NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Relationships/YapDatabaseRelationshipTransaction.m (242:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 250,
   "class": "YapDatabaseRelationshipTransaction.m (250:11)",
   "vul_id": "563e45eb8dd8caf4bcafe44b27aecc6d",
   "method": "status = sqlite3_exec(db, [createSrcIndex UTF8String], NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Relationships/YapDatabaseRelationshipTransaction.m (250:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 258,
   "class": "YapDatabaseRelationshipTransaction.m (258:11)",
   "vul_id": "7cf128f67253881253327d77392ce4b4",
   "method": "status = sqlite3_exec(db, [createDstIndex UTF8String], NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Relationships/YapDatabaseRelationshipTransaction.m (258:11)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1318,
   "class": "YapDatabaseRelationshipTransaction.m (1318:2)",
   "vul_id": "faee5a7fa8af57460c43b6f39dc7288c",
   "method": "NSAssert(name != nil, @\"Internal logic error\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Relationships/YapDatabaseRelationshipTransaction.m (1318:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1364,
   "class": "YapDatabaseRelationshipTransaction.m (1364:2)",
   "vul_id": "fafa5f369c019eae265fa8b70a6556e1",
   "method": "NSAssert(dstFilePath != nil, @\"Internal logic error\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Relationships/YapDatabaseRelationshipTransaction.m (1364:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1365,
   "class": "YapDatabaseRelationshipTransaction.m (1365:2)",
   "vul_id": "ce0a3f141a0c9c833cd56691d5226016",
   "method": "NSAssert(name != nil, @\"Internal logic error\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Relationships/YapDatabaseRelationshipTransaction.m (1365:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2080,
   "class": "YapDatabaseRelationshipTransaction.m (2080:2)",
   "vul_id": "024eaf1acb88fb0e9a0b9050863d3c1e",
   "method": "NSAssert((edge-\u003eflags \u0026 YDB_FlagsHasEdgeRowid), @\"Logic error - edgeRowid not set\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Relationships/YapDatabaseRelationshipTransaction.m (2080:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2106,
   "class": "YapDatabaseRelationshipTransaction.m (2106:2)",
   "vul_id": "f9e4addbdcb096a6bf36dcd02d1f49cf",
   "method": "NSAssert((edge-\u003eflags \u0026 YDB_FlagsHasEdgeRowid), @\"Logic error - edgeRowid not set\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Relationships/YapDatabaseRelationshipTransaction.m (2106:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 3,
   "class": "YapDatabaseViewState.m (3:27)",
   "vul_id": "2e215a252c62ff04bb7c98f6059afe54",
   "method": "#define AssertIsMutable() NSAssert(!isImmutable, @\"Attempting to mutate immutable state\")",
   "column": 27,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/Internal/YapDatabaseViewState.m (3:27)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 191,
   "class": "YapDatabaseViewState.m (191:2)",
   "vul_id": "ed58bca1f9063ae6933b7fc177efb8a5",
   "method": "NSAssert(count == 0, @\"Attempting to remove non-empty group\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/Internal/YapDatabaseViewState.m (191:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 192,
   "class": "YapDatabaseSecondaryIndexTransaction.m (192:15)",
   "vul_id": "f92efab1d313e493e06eceb5024c6d53",
   "method": "int status = sqlite3_exec(db, [dropTable UTF8String], NULL, NULL, NULL);",
   "column": 15,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SecondaryIndex/YapDatabaseSecondaryIndexTransaction.m (192:15)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 240,
   "class": "YapDatabaseSecondaryIndexTransaction.m (240:15)",
   "vul_id": "a33cbbe9451a78729a2c661502166d95",
   "method": "int status = sqlite3_exec(db, [createTable UTF8String], NULL, NULL, NULL);",
   "column": 15,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SecondaryIndex/YapDatabaseSecondaryIndexTransaction.m (240:15)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 254,
   "class": "YapDatabaseSecondaryIndexTransaction.m (254:12)",
   "vul_id": "066c473bc061d004f6f71d70ec46d82a",
   "method": "status = sqlite3_exec(db, [createIndex UTF8String], NULL, NULL, NULL);",
   "column": 12,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SecondaryIndex/YapDatabaseSecondaryIndexTransaction.m (254:12)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 639,
   "class": "YapDatabaseSecondaryIndexTransaction.m (639:2)",
   "vul_id": "c15e4d9be4b1b7657098ac6d2f2e215d",
   "method": "sqlite3_finalize(statement);",
   "column": 2,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/SecondaryIndex/YapDatabaseSecondaryIndexTransaction.m (639:2)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 842,
   "class": "YapDatabaseViewChange.m (842:10)",
   "vul_id": "731f35e9ee5a40dc8e62443969751040",
   "method": "//\tNSLog(@\"rowChange(%lu) \u003c finalRangeMin(%lu) \u003c= finalRangeMax(%lu)\",",
   "column": 10,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/Utilities/YapDatabaseViewChange.m (842:10)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 851,
   "class": "YapDatabaseViewChange.m (851:10)",
   "vul_id": "5a0bd2b0ccaa2e12e6ef9a3865fe0baa",
   "method": "//\tNSLog(@\"rowChange(%lu) \u003c finalRangeMax(%lu)\",",
   "column": 10,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/Utilities/YapDatabaseViewChange.m (851:10)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 858,
   "class": "YapDatabaseViewChange.m (858:9)",
   "vul_id": "c7b3b711dd2de57bb37f74e72b5095e1",
   "method": "//\tNSLog(@\"finalRangeMin(%lu) \u003c= finalRangeMax(%lu)\",",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/Utilities/YapDatabaseViewChange.m (858:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1490,
   "class": "YapDatabaseViewChange.m (1490:3)",
   "vul_id": "8bdbe787f08b3842077783a6f88f9fd7",
   "method": "NSAssert(originalRangeOpts.pin == finalRangeOpts.pin, @\"Logic error: Pins do not match !\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/Utilities/YapDatabaseViewChange.m (1490:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 495,
   "class": "YapDatabaseViewMappings.m (495:2)",
   "vul_id": "2f3da6b8e992e49e0804ccd9b5c40b6c",
   "method": "NSAssert(snapshotOfLastUpdate != UINT64_MAX, @\"The counts are needed to set rangeOpts.length\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/Utilities/YapDatabaseViewMappings.m (495:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 44,
   "class": "YapDatabaseView.m (44:12)",
   "vul_id": "49493c9ad4dd7e71ef38f95bc6e01ee5",
   "method": "status = sqlite3_exec(db, [dropKeyTable UTF8String], NULL, NULL, NULL);",
   "column": 12,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseView.m (44:12)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 51,
   "class": "YapDatabaseView.m (51:12)",
   "vul_id": "99a42ad3a48657c4a6224cc4e3b0e33d",
   "method": "status = sqlite3_exec(db, [dropPageTable UTF8String], NULL, NULL, NULL);",
   "column": 12,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseView.m (51:12)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 183,
   "class": "YapDatabaseView.m (183:2)",
   "vul_id": "269db7779e6a9d547b65df9babcd5e96",
   "method": "NSAssert(grouping != NULL, @\"Invalid parameter: grouping == nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseView.m (183:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 184,
   "class": "YapDatabaseView.m (184:2)",
   "vul_id": "39c117fb86c26b74c4386cf1bd27bd6d",
   "method": "NSAssert(sorting != NULL, @\"Invalid parameter: sorting == nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseView.m (184:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 809,
   "class": "YapDatabaseViewConnection.m (809:2)",
   "vul_id": "1e2266fe6bd6a77f34c152f63054280c",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewConnection.m (809:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 825,
   "class": "YapDatabaseViewConnection.m (825:2)",
   "vul_id": "7ba5bf2e3901fd963d9f0b4983fea4c3",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewConnection.m (825:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 841,
   "class": "YapDatabaseViewConnection.m (841:2)",
   "vul_id": "073274316c4fe8c9d36e21246df73914",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewConnection.m (841:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 857,
   "class": "YapDatabaseViewConnection.m (857:2)",
   "vul_id": "478c37afc19df1e412114e188d9f66d6",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewConnection.m (857:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 877,
   "class": "YapDatabaseViewConnection.m (877:2)",
   "vul_id": "f9582ddbae84a129ff28b3e1cf599b49",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewConnection.m (877:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 893,
   "class": "YapDatabaseViewConnection.m (893:2)",
   "vul_id": "f60d074a83cb862cbb4dd7b94e8ccba2",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewConnection.m (893:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 911,
   "class": "YapDatabaseViewConnection.m (911:2)",
   "vul_id": "9054f370179db19e4fa25509453d6918",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewConnection.m (911:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 928,
   "class": "YapDatabaseViewConnection.m (928:2)",
   "vul_id": "6dc087e2bd4ffc44ca5e7ffc96b47738",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewConnection.m (928:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 944,
   "class": "YapDatabaseViewConnection.m (944:2)",
   "vul_id": "aa307d5467f2f8362dbf3bdcccc79574",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewConnection.m (944:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 960,
   "class": "YapDatabaseViewConnection.m (960:2)",
   "vul_id": "acdc24a8050fca5f39e2aa9f12aeea15",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewConnection.m (960:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 976,
   "class": "YapDatabaseViewConnection.m (976:2)",
   "vul_id": "3c83cfb9cc2d9b2033efa1679397e495",
   "method": "NSAssert([self isPersistentView], @\"In-memory view accessing sqlite\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewConnection.m (976:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 124,
   "class": "YapDatabaseLogging.h (124:31)",
   "vul_id": "e2f03c827cab347aae774fc64026f8f1",
   "method": "do{ if(ydbLogLevel \u0026 flg) NSLog((@\"%@: \" frmt), THIS_FILE, ##__VA_ARGS__); } while(0)",
   "column": 31,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapDatabaseLogging.h (124:31)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 16,
   "class": "YapDatabasePrivate.h (16:42)",
   "vul_id": "2d28fc61ba64cc77033188de27ef8043",
   "method": "* Helper method to conditionally invoke sqlite3_finalize on a statement, and then set the ivar to NULL.",
   "column": 42,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapDatabasePrivate.h (16:42)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 21,
   "class": "YapDatabasePrivate.h (21:3)",
   "vul_id": "b76d353533cd38939eb997dda223cbc8",
   "method": "sqlite3_finalize(*stmtPtr);",
   "column": 3,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapDatabasePrivate.h (21:3)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 59,
   "class": "YapDebugDictionary.m (59:2)",
   "vul_id": "f8f998c21d09f27a6fd5207a42b64617",
   "method": "NSAssert([key isKindOfClass:keyClass], @\"Invalid key class\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapDebugDictionary.m (59:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 66,
   "class": "YapDebugDictionary.m (66:2)",
   "vul_id": "a6c18b04e251095d9108576faecc7b32",
   "method": "NSAssert([key isKindOfClass:keyClass], @\"Invalid key class\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapDebugDictionary.m (66:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 67,
   "class": "YapDebugDictionary.m (67:2)",
   "vul_id": "a4848e389153148c72110bc5fb02d629",
   "method": "NSAssert([object isKindOfClass:objectClass], @\"Invalid key class\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapDebugDictionary.m (67:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 74,
   "class": "YapDebugDictionary.m (74:2)",
   "vul_id": "8cee7d24ae86d4631ee0d27a43587528",
   "method": "NSAssert([key isKindOfClass:keyClass], @\"Invalid key class\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapDebugDictionary.m (74:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 248,
   "class": "YapMemoryTable.m (248:2)",
   "vul_id": "794891866396b0957577c846aff78025",
   "method": "NSAssert([key isKindOfClass:table-\u003ekeyClass],",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapMemoryTable.m (248:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 343,
   "class": "YapMemoryTable.m (343:2)",
   "vul_id": "1d22dffcf92195bb3f00d8560d8b5cb2",
   "method": "NSAssert([key isKindOfClass:table-\u003ekeyClass],",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapMemoryTable.m (343:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 347,
   "class": "YapMemoryTable.m (347:3)",
   "vul_id": "e15333cb372305a802f9264c0b667e60",
   "method": "NSAssert(NO, @\"Cannot modify table in read-only transaction.\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapMemoryTable.m (347:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 387,
   "class": "YapMemoryTable.m (387:2)",
   "vul_id": "2326bf75f4afd48d4c75193017c1ccc5",
   "method": "NSAssert([key isKindOfClass:table-\u003ekeyClass],",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapMemoryTable.m (387:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 391,
   "class": "YapMemoryTable.m (391:3)",
   "vul_id": "a5bd7d602e02c925735630cf8c407335",
   "method": "NSAssert(NO, @\"Cannot modify table in read-only transaction.\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapMemoryTable.m (391:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 450,
   "class": "YapMemoryTable.m (450:3)",
   "vul_id": "450d73d557ba5fe0c35c00cba70435fb",
   "method": "NSAssert(NO, @\"Cannot modify table in read-only transaction.\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapMemoryTable.m (450:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 461,
   "class": "YapMemoryTable.m (461:4)",
   "vul_id": "c8eec5ee3b596703207e42836a3dddab",
   "method": "NSAssert([key isKindOfClass:table-\u003ekeyClass],",
   "column": 4,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapMemoryTable.m (461:4)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 514,
   "class": "YapMemoryTable.m (514:2)",
   "vul_id": "650c5b709105fc78d90afcec97f0514c",
   "method": "NSAssert(isReadWriteTransaction, @\"Cannot modify table in read-only transaction.\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapMemoryTable.m (514:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 25,
   "class": "YapNull.m (25:2)",
   "vul_id": "3b8dc89794b6ff4a15bd1368b024f963",
   "method": "NSAssert(singleton == nil, @\"Must use singleton via [YapNull null]\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapNull.m (25:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 25,
   "class": "YapTouch.m (25:2)",
   "vul_id": "3c98848692cdeb5c46e14543508ea3a6",
   "method": "NSAssert(singleton == nil, @\"Must use singleton via [YapTouch touch]\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Internal/YapTouch.m (25:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 489,
   "class": "YapCache.m (489:2)",
   "vul_id": "2272f189b58e8f6f779c442cc2eeaa54",
   "method": "NSAssert(count \u003c= countLimit, @\"Invalid count\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Utilities/YapCache.m (489:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 510,
   "class": "YapCache.m (510:2)",
   "vul_id": "e93bb9b320421451a99380dcbf868a88",
   "method": "NSAssert([forwardsKeys isEqual:backwardsKeys], @\"Invalid order\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Utilities/YapCache.m (510:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 2.2,
   "cwe": "CWE-676",
   "line": 112,
   "class": "YapCollectionKey.m (112:2)",
   "vul_id": "d4525077ec036d2f0ede5ea5eae5ff27",
   "method": "memcpy(\u0026keyCallbacks, \u0026kCFTypeDictionaryKeyCallBacks, sizeof(CFDictionaryKeyCallBacks));",
   "column": 2,
   "description": "The application may contain prohibited APIs. These APIs are insecure and should not be used.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Utilities/YapCollectionKey.m (112:2)",
   "recomendation": "Avoid using unsafe API (s) and never rely on data entered by the user, always sanitize the data entered."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 509,
   "class": "YapDatabaseViewTransaction.m (509:16)",
   "vul_id": "25fac0f29ca18ddaf187a6f47db8f72a",
   "method": "int status = sqlite3_exec(db, [dropKeyTable UTF8String], NULL, NULL, NULL);",
   "column": 16,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (509:16)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 529,
   "class": "YapDatabaseViewTransaction.m (529:16)",
   "vul_id": "8295421d7d39c9f42e7d5fa7ef2d50f2",
   "method": "int status = sqlite3_exec(db, [dropPageTable UTF8String], NULL, NULL, NULL);",
   "column": 16,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (529:16)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 569,
   "class": "YapDatabaseViewTransaction.m (569:12)",
   "vul_id": "8fbdf4056fec60c37c91181b79931f9c",
   "method": "status = sqlite3_exec(db, [createMapTable UTF8String], NULL, NULL, NULL);",
   "column": 12,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (569:12)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 577,
   "class": "YapDatabaseViewTransaction.m (577:12)",
   "vul_id": "24fa1ceed46f0b4d73d97cf27b9ad2e4",
   "method": "status = sqlite3_exec(db, [createPageTable UTF8String], NULL, NULL, NULL);",
   "column": 12,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (577:12)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 368,
   "class": "YapDatabaseViewTransaction.m (368:3)",
   "vul_id": "7685625756e37f683b26ef403c93f3bf",
   "method": "sqlite3_finalize(statement);",
   "column": 3,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (368:3)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 1379,
   "class": "YapDatabaseViewTransaction.m (1379:4)",
   "vul_id": "6befb8ceece28873f7bc03eeb859a505",
   "method": "sqlite3_finalize(statement);",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (1379:4)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1510,
   "class": "YapDatabaseViewTransaction.m (1510:2)",
   "vul_id": "da79e5791b5d4d4cad1a80b1ddfbd422",
   "method": "NSAssert(found, @\"Missing rowid in page\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (1510:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1707,
   "class": "YapDatabaseViewTransaction.m (1707:2)",
   "vul_id": "ad7cbf6f2d5cb68737f2abce3eb3da91",
   "method": "NSAssert(pageMetadata != nil, @\"Missing pageMetadata in group(%@)\", group);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (1707:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2135,
   "class": "YapDatabaseViewTransaction.m (2135:2)",
   "vul_id": "c5d846b090ff55e1851611d41c1ab48f",
   "method": "NSAssert(rowid == [page rowidAtIndex:indexWithinPage], @\"Rowid mismatch\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (2135:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2207,
   "class": "YapDatabaseViewTransaction.m (2207:2)",
   "vul_id": "6a6c4352d6555dbcca78c494aabecf61",
   "method": "NSAssert(pageMetadata != nil, @\"Missing pageMetadata in group(%@) withPageKey(%@)\", group, pageKey);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (2207:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2332,
   "class": "YapDatabaseViewTransaction.m (2332:2)",
   "vul_id": "ab2c3933f3de2d7e9edea3ac024c3b6f",
   "method": "NSAssert(pageMetadata != nil, @\"Missing pageMetadata in group(%@) withPageKey(%@)\", group, pageKey);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (2332:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2726,
   "class": "YapDatabaseViewTransaction.m (2726:2)",
   "vul_id": "6344224a93ab35fc35b6dd296bda3479",
   "method": "NSAssert(pageMetadata != nil, @\"Missing pageMetadata in group(%@)\", group);",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (2726:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2890,
   "class": "YapDatabaseViewTransaction.m (2890:6)",
   "vul_id": "662fa493852318f48565e9461a3e452c",
   "method": "NSAssert(NO, @\"Cannot get proper statement! View will become corrupt!\");",
   "column": 6,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (2890:6)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2921,
   "class": "YapDatabaseViewTransaction.m (2921:6)",
   "vul_id": "70ed380465d050824dbf598c28a7ccde",
   "method": "NSAssert(NO, @\"Cannot get proper statement! View will become corrupt!\");",
   "column": 6,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (2921:6)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2978,
   "class": "YapDatabaseViewTransaction.m (2978:6)",
   "vul_id": "18495b63167989409c084d48eacca991",
   "method": "NSAssert(NO, @\"Cannot get proper statement! View will become corrupt!\");",
   "column": 6,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (2978:6)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 3027,
   "class": "YapDatabaseViewTransaction.m (3027:6)",
   "vul_id": "489884fb1eccde8afd2a40927995a052",
   "method": "NSAssert(NO, @\"Cannot get proper statement! View will become corrupt!\");",
   "column": 6,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (3027:6)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 3964,
   "class": "YapDatabaseViewTransaction.m (3964:3)",
   "vul_id": "9e9755f094c6060febf16256f47d1a13",
   "method": "NSAssert(group != nil, @\"Unknown group for pageKey: %@\", pageKey);",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (3964:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 5021,
   "class": "YapDatabaseViewTransaction.m (5021:2)",
   "vul_id": "1269ff7a1c5ac1b42baab30c8b0cd4bb",
   "method": "NSAssert(grouping != nil, @\"Invalid parameter: grouping == nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (5021:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 5022,
   "class": "YapDatabaseViewTransaction.m (5022:2)",
   "vul_id": "aea854a84010bb41b3669f7379408f73",
   "method": "NSAssert(sorting != nil, @\"Invalid parameter: sorting == nil\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/Extensions/Views/YapDatabaseViewTransaction.m (5022:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 673,
   "class": "YapDatabase.m (673:12)",
   "vul_id": "3a8f5a82246170ae60bdf16f9303649b",
   "method": "status = sqlite3_exec(db, [pragma_page_size UTF8String], NULL, NULL, NULL);",
   "column": 12,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (673:12)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 680,
   "class": "YapDatabase.m (680:11)",
   "vul_id": "50f0a70e3485c9b94c55be92bcbdab71",
   "method": "status = sqlite3_exec(db, \"PRAGMA journal_mode = WAL;\", NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (680:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 689,
   "class": "YapDatabase.m (689:12)",
   "vul_id": "fc9a4e2a1124ed756604d5b5f60a5c77",
   "method": "status = sqlite3_exec(db, \"PRAGMA auto_vacuum = FULL; VACUUM;\", NULL, NULL, NULL);",
   "column": 12,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (689:12)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 710,
   "class": "YapDatabase.m (710:11)",
   "vul_id": "da19eead2da91fea81a9bff5451205e8",
   "method": "status = sqlite3_exec(db, \"PRAGMA synchronous = NORMAL;\", NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (710:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 725,
   "class": "YapDatabase.m (725:11)",
   "vul_id": "c194298737230ef6b5036ac9052117bf",
   "method": "status = sqlite3_exec(db, [pragma_journal_size_limit UTF8String], NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (725:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 790,
   "class": "YapDatabase.m (790:11)",
   "vul_id": "78bbab87c863190b35d702a24b8c4386",
   "method": "status = sqlite3_exec(db, createYapTableStatement, NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (790:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 806,
   "class": "YapDatabase.m (806:11)",
   "vul_id": "83f5f6de987de8b2dfd11b7dbf359beb",
   "method": "status = sqlite3_exec(db, createDatabaseTableStatement, NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (806:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 816,
   "class": "YapDatabase.m (816:11)",
   "vul_id": "51b8d7e53aa9a72f332ad7f9309aa58e",
   "method": "status = sqlite3_exec(db, createIndexStatement, NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (816:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 1111,
   "class": "YapDatabase.m (1111:15)",
   "vul_id": "6c1be3a39cf40ea2703d9406a54cb755",
   "method": "int status = sqlite3_exec(db, [query UTF8String], NULL, NULL, NULL);",
   "column": 15,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (1111:15)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 1126,
   "class": "YapDatabase.m (1126:15)",
   "vul_id": "1b08953397e29d7a52b50cfd40cf126b",
   "method": "int status = sqlite3_exec(db, \"DROP TABLE IF EXISTS \\\"yap\\\"\", NULL, NULL, NULL);",
   "column": 15,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (1126:15)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 1148,
   "class": "YapDatabase.m (1148:11)",
   "vul_id": "1690015dd7ddbf656b1542cfc11f6b45",
   "method": "status = sqlite3_exec(db, stmt, NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (1148:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 1155,
   "class": "YapDatabase.m (1155:11)",
   "vul_id": "da0a7018879a6f3ec0e9f30f06ae7dbe",
   "method": "status = sqlite3_exec(db, \"DROP TABLE IF EXISTS \\\"database\\\"\", NULL, NULL, NULL);",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (1155:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 1259,
   "class": "YapDatabase.m (1259:24)",
   "vul_id": "3c3ebbb79d5c1de46d7ee7933a2f2816",
   "method": "int status = status = sqlite3_exec(db, \"BEGIN TRANSACTION;\", NULL, NULL, NULL);",
   "column": 24,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (1259:24)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 1268,
   "class": "YapDatabase.m (1268:24)",
   "vul_id": "1c9b68a59d76afbb8e3fa3f6c27ebf26",
   "method": "int status = status = sqlite3_exec(db, \"COMMIT TRANSACTION;\", NULL, NULL, NULL);",
   "column": 24,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (1268:24)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 856,
   "class": "YapDatabase.m (856:2)",
   "vul_id": "31073b089f764820ed1bf32b18baed16",
   "method": "sqlite3_finalize(statement);",
   "column": 2,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (856:2)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 888,
   "class": "YapDatabase.m (888:2)",
   "vul_id": "9f5e87d054c662063c4028b4e50bc4a2",
   "method": "sqlite3_finalize(statement);",
   "column": 2,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (888:2)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 949,
   "class": "YapDatabase.m (949:2)",
   "vul_id": "a454cd7cbb6c65493fdfe1e1acf8e39f",
   "method": "sqlite3_finalize(statement);",
   "column": 2,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (949:2)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 994,
   "class": "YapDatabase.m (994:2)",
   "vul_id": "c341a4c882e73080ae438724848a37c2",
   "method": "sqlite3_finalize(statement);",
   "column": 2,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (994:2)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 1047,
   "class": "YapDatabase.m (1047:2)",
   "vul_id": "2acb3b2bd1662f2b7d6b5d0e054f2a7f",
   "method": "sqlite3_finalize(statement);",
   "column": 2,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (1047:2)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 1087,
   "class": "YapDatabase.m (1087:2)",
   "vul_id": "e851f1d8d90c33c56a284c576f2ee81e",
   "method": "sqlite3_finalize(pragmaStatement);",
   "column": 2,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (1087:2)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 1307,
   "class": "YapDatabase.m (1307:3)",
   "vul_id": "eeb02bb03f9fd7266cde6d4b8281b2b1",
   "method": "sqlite3_finalize(statement);",
   "column": 3,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (1307:3)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 1346,
   "class": "YapDatabase.m (1346:3)",
   "vul_id": "6fb4af8c0facbd61a424722ca5ea6f0a",
   "method": "sqlite3_finalize(statement);",
   "column": 3,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (1346:3)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2846,
   "class": "YapDatabase.m (2846:6)",
   "vul_id": "c198b5eb8ba3cdef57b34f5c25118cef",
   "method": "sqlite3_finalize(statement);",
   "column": 6,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (2846:6)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 756,
   "class": "YapDatabase.m (756:4)",
   "vul_id": "437a7da3ddb7e852d0b02cf3b951a548",
   "method": "NSAssert(NO, @\"YapDatabaseOptions.cipherKeyBlock cannot return nil!\");",
   "column": 4,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (756:4)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1982,
   "class": "YapDatabase.m (1982:2)",
   "vul_id": "c499b466e31c633b1485dc0166d9d1dd",
   "method": "NSAssert(dispatch_get_specific(IsOnWriteQueueKey), @\"Must go through writeQueue.\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (1982:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2036,
   "class": "YapDatabase.m (2036:2)",
   "vul_id": "0599a7d309c418baf9681d1a946f0500",
   "method": "NSAssert(dispatch_get_specific(IsOnWriteQueueKey), @\"Must go through writeQueue.\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (2036:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2105,
   "class": "YapDatabase.m (2105:2)",
   "vul_id": "f20ee80ab62f9aa2d833080f7ca4b5ef",
   "method": "NSAssert(dispatch_get_specific(IsOnSnapshotQueueKey), @\"Must go through snapshotQueue for atomic access.\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (2105:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2116,
   "class": "YapDatabase.m (2116:2)",
   "vul_id": "3892455613faacddbbb63f2931918f6a",
   "method": "NSAssert(dispatch_get_specific(IsOnSnapshotQueueKey), @\"Must go through snapshotQueue for atomic access.\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (2116:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2391,
   "class": "YapDatabase.m (2391:2)",
   "vul_id": "03447b3b26c7539c774342d03cabb2e4",
   "method": "NSAssert(dispatch_get_specific(IsOnSnapshotQueueKey), @\"Must go through snapshotQueue for atomic access.\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (2391:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2456,
   "class": "YapDatabase.m (2456:2)",
   "vul_id": "69685289f6a5bdcafc758bcb3dd2015a",
   "method": "NSAssert(dispatch_get_specific(IsOnSnapshotQueueKey), @\"Must go through snapshotQueue for atomic access.\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (2456:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2457,
   "class": "YapDatabase.m (2457:2)",
   "vul_id": "03b96a4008f0fa163c0d3ae33cd194bb",
   "method": "NSAssert([pendingChangeset objectForKey:YapDatabaseSnapshotKey], @\"Missing required change key: snapshot\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (2457:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2477,
   "class": "YapDatabase.m (2477:2)",
   "vul_id": "ed2d4ac6ac58f2454b6aaf7f8a475185",
   "method": "NSAssert(dispatch_get_specific(IsOnSnapshotQueueKey), @\"Must go through snapshotQueue for atomic access.\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (2477:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2507,
   "class": "YapDatabase.m (2507:2)",
   "vul_id": "cfab4c93d49f5ab86570b53593a9c715",
   "method": "NSAssert(dispatch_get_specific(IsOnSnapshotQueueKey), @\"Must go through snapshotQueue for atomic access.\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (2507:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2508,
   "class": "YapDatabase.m (2508:2)",
   "vul_id": "1a07a226d8b27f86da52df4325699974",
   "method": "NSAssert([changeset objectForKey:YapDatabaseSnapshotKey], @\"Missing required change key: snapshot\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (2508:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 2.2,
   "cwe": "CWE-676",
   "line": 191,
   "class": "YapDatabase.m (191:4)",
   "vul_id": "a6a4b6a5221082626869183a7affe006",
   "method": "memcpy((void *)\u0026timestamp, [data bytes], sizeof(NSTimeInterval));",
   "column": 4,
   "description": "The application may contain prohibited APIs. These APIs are insecure and should not be used.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabase.m (191:4)",
   "recomendation": "Avoid using unsafe API (s) and never rely on data entered by the user, always sanitize the data entered."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 257,
   "class": "YapDatabaseConnection.m (257:15)",
   "vul_id": "68977feb11a598d49472fd1ddfd3b764",
   "method": "status = sqlite3_exec(db, pragma_stmt, NULL, NULL, NULL);",
   "column": 15,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (257:15)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4652,
   "class": "YapDatabaseConnection.m (4652:13)",
   "vul_id": "ee6b2b90572727b5b530f777160d2d1e",
   "method": "status = sqlite3_exec(db, \"PRAGMA auto_vacuum = FULL;\", NULL, NULL, NULL);",
   "column": 13,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (4652:13)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4660,
   "class": "YapDatabaseConnection.m (4660:13)",
   "vul_id": "d0757c2956febd1418cb024be595c1fd",
   "method": "status = sqlite3_exec(db, \"VACUUM;\", NULL, NULL, NULL);",
   "column": 13,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (4660:13)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4743,
   "class": "YapDatabaseConnection.m (4743:13)",
   "vul_id": "9d7dc4e91b8a0d60591102602a24019c",
   "method": "status = sqlite3_exec(db, \"PRAGMA auto_vacuum = FULL;\", NULL, NULL, NULL);",
   "column": 13,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (4743:13)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4751,
   "class": "YapDatabaseConnection.m (4751:13)",
   "vul_id": "34d7ec9b1daed05b17d01e116a5b514c",
   "method": "status = sqlite3_exec(db, \"VACUUM;\", NULL, NULL, NULL);",
   "column": 13,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (4751:13)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1805,
   "class": "YapDatabaseConnection.m (1805:3)",
   "vul_id": "ad3d56048365a0b796af67406f1bce35",
   "method": "NSAssert(myState != nil, @\"Missing state in database-\u003econnectionStates\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (1805:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1844,
   "class": "YapDatabaseConnection.m (1844:5)",
   "vul_id": "acef9a29cb9e4694feb08667181273bd",
   "method": "NSAssert(snapshot == sqlSnapshot,",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (1844:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 1880,
   "class": "YapDatabaseConnection.m (1880:5)",
   "vul_id": "2c3d3a99d5abce7b95e518848d2f3136",
   "method": "NSAssert(snapshot == globalSnapshot,",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (1880:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2059,
   "class": "YapDatabaseConnection.m (2059:3)",
   "vul_id": "ea9ec4588ae4fb13df6d250e19cac0d9",
   "method": "NSAssert(myState != nil, @\"Missing state in database-\u003econnectionStates\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (2059:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2078,
   "class": "YapDatabaseConnection.m (2078:4)",
   "vul_id": "aa54a1844dcec647525ac027279c1c3d",
   "method": "NSAssert(snapshot == globalSnapshot,",
   "column": 4,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (2078:4)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2288,
   "class": "YapDatabaseConnection.m (2288:4)",
   "vul_id": "695a94598fdef90b09fbd39111062c10",
   "method": "NSAssert(myState != nil, @\"Missing state in database-\u003econnectionStates\");",
   "column": 4,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (2288:4)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2487,
   "class": "YapDatabaseConnection.m (2487:3)",
   "vul_id": "15258e74148312a407cf410a92e05789",
   "method": "NSAssert(myState != nil, @\"Missing state in database-\u003econnectionStates\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (2487:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2564,
   "class": "YapDatabaseConnection.m (2564:3)",
   "vul_id": "7696cf395ce1765e4b557abe02383712",
   "method": "NSAssert(myState != nil, @\"Missing state in database-\u003econnectionStates\");",
   "column": 3,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (2564:3)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 2673,
   "class": "YapDatabaseConnection.m (2673:2)",
   "vul_id": "c7d0a9277e85a9dbc96b963600ed59b4",
   "method": "NSAssert(needsMarkSqlLevelSharedReadLock, @\"Method called but unneeded. Unnecessary overhead.\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (2673:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 3547,
   "class": "YapDatabaseConnection.m (3547:2)",
   "vul_id": "194ff85836a65ec71752d92380413798",
   "method": "NSAssert(dispatch_get_specific(IsOnConnectionQueueKey) ||",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (3547:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 4169,
   "class": "YapDatabaseConnection.m (4169:2)",
   "vul_id": "2b0111a0dd64561cfba8500a6610d1cf",
   "method": "NSAssert(dispatch_get_specific(database-\u003eIsOnWriteQueueKey), @\"Must go through writeQueue.\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (4169:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 4226,
   "class": "YapDatabaseConnection.m (4226:2)",
   "vul_id": "75869797e5b6ff6b1be49e73b0583e10",
   "method": "NSAssert(dispatch_get_specific(database-\u003eIsOnWriteQueueKey), @\"Must go through writeQueue.\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseConnection.m (4226:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 63,
   "class": "KeychainDumper.m (63:13)",
   "vul_id": "be3cd69d931d1b733e1e4a4a1681f7fd",
   "method": "NSLog(@\"Keychain Read Successfully\");",
   "column": 13,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Utilty/KeychainDumper.m (63:13)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 66,
   "class": "KeychainDumper.m (66:13)",
   "vul_id": "784bd55d275163a26e62e0ce16cefd26",
   "method": "NSLog(@\"iGoat keychain Record Item has not found\");",
   "column": 13,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Utilty/KeychainDumper.m (66:13)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 70,
   "class": "KeychainDumper.m (70:13)",
   "vul_id": "3d8af0a29a53bc2f6210e4d4543653ec",
   "method": "NSLog(@\"keychain error code : %d\", ret);",
   "column": 13,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Utilty/KeychainDumper.m (70:13)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 39,
   "class": "NSObject+SBJSON.m (39:9)",
   "vul_id": "79f350406d3d4dd04d3d9f8c89f568f9",
   "method": "NSLog(@\"-JSONRepresentation failed. Error trace is: %@\", [jsonWriter errorTrace]);",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Utilty/NSObject+SBJSON.m (39:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 40,
   "class": "NSString+SBJSON.m (40:9)",
   "vul_id": "b54000ec34e73df1189815e5496ba09b",
   "method": "NSLog(@\"-JSONValue failed. Error trace is: %@\", [jsonParser errorTrace]);",
   "column": 9,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Utilty/NSString+SBJSON.m (40:9)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 159,
   "class": "SBJsonParser.m (159:5)",
   "vul_id": "328acd8bb459902616a3a56cf77670b3",
   "method": "NSAssert(0, @\"Should never get here\");",
   "column": 5,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Utilty/SBJsonParser.m (159:5)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 352,
   "class": "SBJsonParser.m (352:13)",
   "vul_id": "113a7dfdbd8cfa34c01ddb76d447985c",
   "method": "NSLog(@\"should not be able to get here\");",
   "column": 13,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/Utilty/SBJsonParser.m (352:13)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 5,
   "cwe": "CWE-749",
   "line": 23,
   "class": "WeakServerSideControlsVC.m (23:19)",
   "vul_id": "8afc8b80fe67255ea35cdd0c84615b5c",
   "method": "[self.webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:WSSCURL]]];",
   "column": 19,
   "description": "WebView Load Request.",
   "classMessage": "iGoat/iGoat/iGoat/WeakServerSideControls/WeakServerSideControlsVC.m (23:19)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 1875,
   "class": "YapDatabaseTransaction.m (1875:3)",
   "vul_id": "b3e6ee000c419224330c28bbd7da8de8",
   "method": "sqlite3_finalize(statement);",
   "column": 3,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseTransaction.m (1875:3)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2087,
   "class": "YapDatabaseTransaction.m (2087:3)",
   "vul_id": "5b719cb37556b16a1cace65cad2e14bc",
   "method": "sqlite3_finalize(statement);",
   "column": 3,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseTransaction.m (2087:3)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2338,
   "class": "YapDatabaseTransaction.m (2338:3)",
   "vul_id": "b52f09f807f15efeb671d210690f3735",
   "method": "sqlite3_finalize(statement);",
   "column": 3,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseTransaction.m (2338:3)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 5187,
   "class": "YapDatabaseTransaction.m (5187:4)",
   "vul_id": "ae09ea095450d7352a02b757e0236260",
   "method": "sqlite3_finalize(statement);",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseTransaction.m (5187:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 5246,
   "class": "YapDatabaseTransaction.m (5246:4)",
   "vul_id": "ca9c2c4c5c8a1e53c611ac25f5771cf8",
   "method": "sqlite3_finalize(statement);",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseTransaction.m (5246:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 5538,
   "class": "YapDatabaseTransaction.m (5538:4)",
   "vul_id": "12f23c6a338586a99c87b4752fa42df7",
   "method": "sqlite3_finalize(statement);",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseTransaction.m (5538:4)"
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 4696,
   "class": "YapDatabaseTransaction.m (4696:2)",
   "vul_id": "501612b64dea13fd0f2d1c66e3cf3a83",
   "method": "NSAssert(key != nil, @\"Internal error\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseTransaction.m (4696:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 4871,
   "class": "YapDatabaseTransaction.m (4871:2)",
   "vul_id": "812f3b862302906dead6abe3d5fb0efc",
   "method": "NSAssert(key != nil, @\"Internal error\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseTransaction.m (4871:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 5795,
   "class": "YapDatabaseTransaction.m (5795:2)",
   "vul_id": "b44fe1130095b2524a225068a228161e",
   "method": "NSAssert(key != nil, @\"Invalid key!\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseTransaction.m (5795:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 5796,
   "class": "YapDatabaseTransaction.m (5796:2)",
   "vul_id": "13eb45096e74c28813d976ed8f56d27d",
   "method": "NSAssert(extensionName != nil, @\"Invalid extensionName!\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseTransaction.m (5796:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.5,
   "cwe": "CWE-532",
   "line": 5837,
   "class": "YapDatabaseTransaction.m (5837:2)",
   "vul_id": "7016a135cfe9bb93b47e968e4fae9738",
   "method": "NSAssert(extensionName != nil, @\"Invalid extensionName!\");",
   "column": 2,
   "description": "The binary can use the NSLog function for logging. Confidential information should never be recorded.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/YapDatabase/YapDatabaseTransaction.m (5837:2)",
   "recomendation": "Prevent sensitive data from being logged into production."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 440,
   "class": "config.status (440:4)",
   "vul_id": "456ce4343328857e92725e893fdd80df",
   "method": "ac_pwd='/Users/hackerbox/Documents/Dev/igoat/iGoat/sqlcipher'",
   "column": 4,
   "description": "File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "iGoat/iGoat/sqlcipher/config.status (440:4)",
   "recomendation": "Credentials must not be stored in the Git code or repository. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 13750,
   "class": "configure (13750:4)",
   "vul_id": "ec1d8b92ec6cbb88bab1c353cfae7bf6",
   "method": "ac_pwd='$ac_pwd'",
   "column": 4,
   "description": "File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "iGoat/iGoat/sqlcipher/configure (13750:4)",
   "recomendation": "Credentials must not be stored in the Git code or repository. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 70,
   "class": "fts5tok1.test (70:53)",
   "vul_id": "e9a507281920ff9c0debdfad77521357",
   "method": "SELECT input, * FROM t1 WHERE input = 'a b c' AND token = 'b';",
   "column": 53,
   "description": "File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "iGoat/iGoat/sqlcipher/ext/fts5/test/fts5tok1.test (70:53)",
   "recomendation": "Credentials must not be stored in the Git code or repository. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 76,
   "class": "fts5tok1.test (76:33)",
   "vul_id": "5c70e509c9ef7c2cea85b50d267bcc3d",
   "method": "SELECT input, * FROM t1 WHERE token = 'b' AND input = 'a b c';",
   "column": 33,
   "description": "File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "iGoat/iGoat/sqlcipher/ext/fts5/test/fts5tok1.test (76:33)",
   "recomendation": "Credentials must not be stored in the Git code or repository. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 337,
   "class": "sqlite3.h (337:8)",
   "vul_id": "15490e7975ac9798c3114455d54b6faa",
   "method": "** The sqlite3_exec() interface is a convenience wrapper around",
   "column": 8,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (337:8)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 342,
   "class": "sqlite3.h (342:9)",
   "vul_id": "e8f4336059f7fa67d199a2133a362c3c",
   "method": "** ^The sqlite3_exec() interface runs zero or more UTF-8 encoded,",
   "column": 9,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (342:9)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 346,
   "class": "sqlite3.h (346:4)",
   "vul_id": "8cbd02c5fb312e504b2dd7357f3a0a74",
   "method": "** sqlite3_exec() is not NULL, then it is invoked for each result row",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (346:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 348,
   "class": "sqlite3.h (348:4)",
   "vul_id": "e68dbfd6169814fa9372c1b717be2e21",
   "method": "** sqlite3_exec() is relayed through to the 1st argument of each",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (348:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 349,
   "class": "sqlite3.h (349:54)",
   "vul_id": "5f56dbb6486effb0f86db46623aa7df6",
   "method": "** callback invocation.  ^If the callback pointer to sqlite3_exec()",
   "column": 54,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (349:54)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 354,
   "class": "sqlite3.h (354:4)",
   "vul_id": "d9a7aad95484c07b1e9c3e27e73c4d4b",
   "method": "** sqlite3_exec(), then execution of the current statement stops and",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (354:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 355,
   "class": "sqlite3.h (355:65)",
   "vul_id": "ef69c1f24ec39097a38d61fea7b90321",
   "method": "** subsequent statements are skipped.  ^If the 5th parameter to sqlite3_exec()",
   "column": 65,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (355:65)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 360,
   "class": "sqlite3.h (360:4)",
   "vul_id": "a1235fcbabad899cce6ebc7e06c8ad03",
   "method": "** sqlite3_exec() after the error message string is no longer needed.",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (360:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 361,
   "class": "sqlite3.h (361:29)",
   "vul_id": "62aad14ecc9bd8e3669f7be6121244f5",
   "method": "** ^If the 5th parameter to sqlite3_exec() is not NULL and no errors",
   "column": 29,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (361:29)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 362,
   "class": "sqlite3.h (362:16)",
   "vul_id": "21de5d390913112fd3675be069f57a18",
   "method": "** occur, then sqlite3_exec() sets the pointer in its 5th parameter to",
   "column": 16,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (362:16)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 365,
   "class": "sqlite3.h (365:11)",
   "vul_id": "37c35dd5b6d4b7d770718fb69a5283d5",
   "method": "** ^If an sqlite3_exec() callback returns non-zero, the sqlite3_exec()",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (365:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 365,
   "class": "sqlite3.h (365:57)",
   "vul_id": "db79278c7181b951cb002fe1d6568788",
   "method": "** ^If an sqlite3_exec() callback returns non-zero, the sqlite3_exec()",
   "column": 57,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (365:57)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 369,
   "class": "sqlite3.h (369:29)",
   "vul_id": "e0208d7ad3b3f7fa612651522b01c139",
   "method": "** ^The 2nd argument to the sqlite3_exec() callback function is the",
   "column": 29,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (369:29)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 370,
   "class": "sqlite3.h (370:63)",
   "vul_id": "2b4752a670ac1e44832aa2a35e846354",
   "method": "** number of columns in the result.  ^The 3rd argument to the sqlite3_exec()",
   "column": 63,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (370:63)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 374,
   "class": "sqlite3.h (374:4)",
   "vul_id": "efea59d96df962c5e6c2c5ae78080c5b",
   "method": "** sqlite3_exec() callback is a NULL pointer.  ^The 4th argument to the",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (374:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 375,
   "class": "sqlite3.h (375:4)",
   "vul_id": "baee1d4544b74912ff8574f3c51d35bb",
   "method": "** sqlite3_exec() callback is an array of pointers to strings where each",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (375:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 379,
   "class": "sqlite3.h (379:29)",
   "vul_id": "01abb0f2ee7ed2c13da6743f30f8cd23",
   "method": "** ^If the 2nd parameter to sqlite3_exec() is a NULL pointer, a pointer",
   "column": 29,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (379:29)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 387,
   "class": "sqlite3.h (387:63)",
   "vul_id": "0496a600ab6a65870cf9ab6cde1308d4",
   "method": "** \u003cli\u003e The application must ensure that the 1st parameter to sqlite3_exec()",
   "column": 63,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (387:63)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 390,
   "class": "sqlite3.h (390:30)",
   "vul_id": "401e99f0a1b223977f676575d5c67ff9",
   "method": "**      the 1st parameter to sqlite3_exec() while sqlite3_exec() is running.",
   "column": 30,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (390:30)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 390,
   "class": "sqlite3.h (390:51)",
   "vul_id": "f45fc59db3134478fc34dee9308b438e",
   "method": "**      the 1st parameter to sqlite3_exec() while sqlite3_exec() is running.",
   "column": 51,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (390:51)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 392,
   "class": "sqlite3.h (392:30)",
   "vul_id": "3ebd13eb126137308eb496645fb4e260",
   "method": "**      the 2nd parameter of sqlite3_exec() while sqlite3_exec() is running.",
   "column": 30,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (392:30)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 392,
   "class": "sqlite3.h (392:51)",
   "vul_id": "2ad74b7bf2606113b0d873352d805e74",
   "method": "**      the 2nd parameter of sqlite3_exec() while sqlite3_exec() is running.",
   "column": 51,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (392:51)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 395,
   "class": "sqlite3.h (395:16)",
   "vul_id": "93a4f5e84206ea3d57887fc60d46d43a",
   "method": "SQLITE_API int sqlite3_exec(",
   "column": 16,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (395:16)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2365,
   "class": "sqlite3.h (2365:5)",
   "vul_id": "fa0e352727dfae556de7320ff0e43a21",
   "method": "** [sqlite3_exec()].  The sqlite3_get_table() routine does not have access",
   "column": 5,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (2365:5)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2368,
   "class": "sqlite3.h (2368:43)",
   "vul_id": "353c2bcfd2fa1b953cbc5430a7d9457e",
   "method": "** wrapper layer outside of the internal [sqlite3_exec()] call are not",
   "column": 43,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (2368:43)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2441,
   "class": "sqlite3.h (2441:5)",
   "vul_id": "45ed5e60ad99484149a8ec9b3cdf2eb2",
   "method": "**  sqlite3_exec(db, zSQL, 0, 0, 0);",
   "column": 5,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (2441:5)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2469,
   "class": "sqlite3.h (2469:5)",
   "vul_id": "68cef0d9b06eec08db0585b3d0710cd8",
   "method": "**  sqlite3_exec(db, zSQL, 0, 0, 0);",
   "column": 5,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (2469:5)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2928,
   "class": "sqlite3.h (2928:5)",
   "vul_id": "e50c62def80393593ddef5bc7f778b94",
   "method": "** [sqlite3_exec()], [sqlite3_step()] and [sqlite3_get_table()] for",
   "column": 5,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (2928:5)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 3581,
   "class": "sqlite3.h (3581:11)",
   "vul_id": "f0c7b4ad53a95f2275e9be507fbc1c8c",
   "method": "** calls [sqlite3_exec()], then the following SQL statement would",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (3581:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 302,
   "class": "sqlite3.h (302:25)",
   "vul_id": "e880f262ff05af4e98e210470c7927dd",
   "method": "** Applications should [sqlite3_finalize | finalize] all [prepared statements],",
   "column": 25,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (302:25)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 338,
   "class": "sqlite3.h (338:51)",
   "vul_id": "028d5d03884756290876048613ffefab",
   "method": "** [sqlite3_prepare_v2()], [sqlite3_step()], and [sqlite3_finalize()],",
   "column": 51,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (338:51)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 3310,
   "class": "sqlite3.h (3310:35)",
   "vul_id": "c1a5474887365baa794f6a1172f83a05",
   "method": "** \u003cli\u003e Destroy the object using [sqlite3_finalize()].",
   "column": 35,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (3310:35)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 3463,
   "class": "sqlite3.h (3463:25)",
   "vul_id": "10b34d615381302e669afbed3d0241d6",
   "method": "** SQL statement using [sqlite3_finalize()] after it has finished with it.",
   "column": 25,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (3463:25)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 3901,
   "class": "sqlite3.h (3901:21)",
   "vul_id": "fb94c3412b65df3eb7d64db210b7fdda",
   "method": "** is destroyed by [sqlite3_finalize()] or until the statement is automatically",
   "column": 21,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (3901:21)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 3930,
   "class": "sqlite3.h (3930:11)",
   "vul_id": "9c9259a16f582b12cbea4543b964f38b",
   "method": "** using [sqlite3_finalize()] or until the statement is automatically",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (3930:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4053,
   "class": "sqlite3.h (4053:18)",
   "vul_id": "a6cb6d90d0ea47376221f1bf3e49c948",
   "method": "** already been [sqlite3_finalize | finalized] or on one that had",
   "column": 18,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (4053:18)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4074,
   "class": "sqlite3.h (4074:26)",
   "vul_id": "80d5edcba80efe2c87a6086a98acfad7",
   "method": "** [sqlite3_reset()] or [sqlite3_finalize()] in order to find one of the",
   "column": 26,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (4074:26)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4156,
   "class": "sqlite3.h (4156:27)",
   "vul_id": "4ec4929bb52eb3ac6aead9323ba919cf",
   "method": "** [sqlite3_reset()] nor [sqlite3_finalize()] have been called subsequently.",
   "column": 27,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (4156:27)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4158,
   "class": "sqlite3.h (4158:5)",
   "vul_id": "e9bde0e435ed51a2b460079118f07e11",
   "method": "** [sqlite3_finalize()] or after [sqlite3_step()] has returned",
   "column": 5,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (4158:5)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4160,
   "class": "sqlite3.h (4160:49)",
   "vul_id": "289258fc929bd4d3dc1d3100331f0e90",
   "method": "** If [sqlite3_step()] or [sqlite3_reset()] or [sqlite3_finalize()]",
   "column": 49,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (4160:49)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4283,
   "class": "sqlite3.h (4283:5)",
   "vul_id": "5654946d49baf9978275fcf8732c9d86",
   "method": "** [sqlite3_finalize()] is called.  ^The memory space used to hold strings",
   "column": 5,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (4283:5)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4309,
   "class": "sqlite3.h (4309:9)",
   "vul_id": "521ff233dcafcce6dbbd1873572e5714",
   "method": "** ^The sqlite3_finalize() function is called to delete a [prepared statement].",
   "column": 9,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (4309:9)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4311,
   "class": "sqlite3.h (4311:54)",
   "vul_id": "332fde1dc4181e2034222df3182ea9ae",
   "method": "** or if the statement is never been evaluated, then sqlite3_finalize() returns",
   "column": 54,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (4311:54)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4313,
   "class": "sqlite3.h (4313:4)",
   "vul_id": "55e0ccd5aeeada30b4a8493c3d9405f7",
   "method": "** sqlite3_finalize(S) returns the appropriate [error code] or",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (4313:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4316,
   "class": "sqlite3.h (4316:9)",
   "vul_id": "1fb5c4440b3c266046371e0cf20aa055",
   "method": "** ^The sqlite3_finalize(S) routine can be called at any point during",
   "column": 9,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (4316:9)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4323,
   "class": "sqlite3.h (4323:14)",
   "vul_id": "f3423b084380d2baeaf36923dfa7beab",
   "method": "** ^Invoking sqlite3_finalize() on a NULL pointer is a harmless no-op.",
   "column": 14,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (4323:14)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4331,
   "class": "sqlite3.h (4331:16)",
   "vul_id": "2c7b7097234cb01560f5c38ae9451cb4",
   "method": "SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt);",
   "column": 16,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (4331:16)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4728,
   "class": "sqlite3.h (4728:38)",
   "vul_id": "3cd29f2c8f769a5ffb3451f19547e26f",
   "method": "** \u003cli\u003e ^(when [sqlite3_reset()] or [sqlite3_finalize()] is called for the",
   "column": 38,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3.h (4728:38)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 367,
   "class": "sqlite3ext.h (367:9)",
   "vul_id": "db1df72f81f30ceb8724cd857fb09f21",
   "method": "#define sqlite3_exec                   sqlite3_api-\u003eexec",
   "column": 9,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3ext.h (367:9)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 371,
   "class": "sqlite3ext.h (371:9)",
   "vul_id": "a6b5ec0c9ddb65a059b7d3e5f5237137",
   "method": "#define sqlite3_finalize               sqlite3_api-\u003efinalize",
   "column": 9,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/sqlite3ext.h (371:9)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 367,
   "class": "sqlite3ext.h (367:9)",
   "vul_id": "db1df72f81f30ceb8724cd857fb09f21",
   "method": "#define sqlite3_exec                   sqlite3_api-\u003eexec",
   "column": 9,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/src/sqlite3ext.h (367:9)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 371,
   "class": "sqlite3ext.h (371:9)",
   "vul_id": "a6b5ec0c9ddb65a059b7d3e5f5237137",
   "method": "#define sqlite3_finalize               sqlite3_api-\u003efinalize",
   "column": 9,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/src/sqlite3ext.h (371:9)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 367,
   "class": "sqlite3ext.h (367:9)",
   "vul_id": "db1df72f81f30ceb8724cd857fb09f21",
   "method": "#define sqlite3_exec                   sqlite3_api-\u003eexec",
   "column": 9,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3ext.h (367:9)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 371,
   "class": "sqlite3ext.h (371:9)",
   "vul_id": "a6b5ec0c9ddb65a059b7d3e5f5237137",
   "method": "#define sqlite3_finalize               sqlite3_api-\u003efinalize",
   "column": 9,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3ext.h (371:9)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 337,
   "class": "sqlite3.h (337:8)",
   "vul_id": "15490e7975ac9798c3114455d54b6faa",
   "method": "** The sqlite3_exec() interface is a convenience wrapper around",
   "column": 8,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (337:8)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 342,
   "class": "sqlite3.h (342:9)",
   "vul_id": "e8f4336059f7fa67d199a2133a362c3c",
   "method": "** ^The sqlite3_exec() interface runs zero or more UTF-8 encoded,",
   "column": 9,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (342:9)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 346,
   "class": "sqlite3.h (346:4)",
   "vul_id": "8cbd02c5fb312e504b2dd7357f3a0a74",
   "method": "** sqlite3_exec() is not NULL, then it is invoked for each result row",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (346:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 348,
   "class": "sqlite3.h (348:4)",
   "vul_id": "e68dbfd6169814fa9372c1b717be2e21",
   "method": "** sqlite3_exec() is relayed through to the 1st argument of each",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (348:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 349,
   "class": "sqlite3.h (349:54)",
   "vul_id": "5f56dbb6486effb0f86db46623aa7df6",
   "method": "** callback invocation.  ^If the callback pointer to sqlite3_exec()",
   "column": 54,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (349:54)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 354,
   "class": "sqlite3.h (354:4)",
   "vul_id": "d9a7aad95484c07b1e9c3e27e73c4d4b",
   "method": "** sqlite3_exec(), then execution of the current statement stops and",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (354:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 355,
   "class": "sqlite3.h (355:65)",
   "vul_id": "ef69c1f24ec39097a38d61fea7b90321",
   "method": "** subsequent statements are skipped.  ^If the 5th parameter to sqlite3_exec()",
   "column": 65,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (355:65)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 360,
   "class": "sqlite3.h (360:4)",
   "vul_id": "a1235fcbabad899cce6ebc7e06c8ad03",
   "method": "** sqlite3_exec() after the error message string is no longer needed.",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (360:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 361,
   "class": "sqlite3.h (361:29)",
   "vul_id": "62aad14ecc9bd8e3669f7be6121244f5",
   "method": "** ^If the 5th parameter to sqlite3_exec() is not NULL and no errors",
   "column": 29,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (361:29)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 362,
   "class": "sqlite3.h (362:16)",
   "vul_id": "21de5d390913112fd3675be069f57a18",
   "method": "** occur, then sqlite3_exec() sets the pointer in its 5th parameter to",
   "column": 16,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (362:16)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 365,
   "class": "sqlite3.h (365:11)",
   "vul_id": "37c35dd5b6d4b7d770718fb69a5283d5",
   "method": "** ^If an sqlite3_exec() callback returns non-zero, the sqlite3_exec()",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (365:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 365,
   "class": "sqlite3.h (365:57)",
   "vul_id": "db79278c7181b951cb002fe1d6568788",
   "method": "** ^If an sqlite3_exec() callback returns non-zero, the sqlite3_exec()",
   "column": 57,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (365:57)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 369,
   "class": "sqlite3.h (369:29)",
   "vul_id": "e0208d7ad3b3f7fa612651522b01c139",
   "method": "** ^The 2nd argument to the sqlite3_exec() callback function is the",
   "column": 29,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (369:29)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 370,
   "class": "sqlite3.h (370:63)",
   "vul_id": "2b4752a670ac1e44832aa2a35e846354",
   "method": "** number of columns in the result.  ^The 3rd argument to the sqlite3_exec()",
   "column": 63,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (370:63)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 374,
   "class": "sqlite3.h (374:4)",
   "vul_id": "efea59d96df962c5e6c2c5ae78080c5b",
   "method": "** sqlite3_exec() callback is a NULL pointer.  ^The 4th argument to the",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (374:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 375,
   "class": "sqlite3.h (375:4)",
   "vul_id": "baee1d4544b74912ff8574f3c51d35bb",
   "method": "** sqlite3_exec() callback is an array of pointers to strings where each",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (375:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 379,
   "class": "sqlite3.h (379:29)",
   "vul_id": "01abb0f2ee7ed2c13da6743f30f8cd23",
   "method": "** ^If the 2nd parameter to sqlite3_exec() is a NULL pointer, a pointer",
   "column": 29,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (379:29)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 387,
   "class": "sqlite3.h (387:63)",
   "vul_id": "0496a600ab6a65870cf9ab6cde1308d4",
   "method": "** \u003cli\u003e The application must ensure that the 1st parameter to sqlite3_exec()",
   "column": 63,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (387:63)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 390,
   "class": "sqlite3.h (390:30)",
   "vul_id": "401e99f0a1b223977f676575d5c67ff9",
   "method": "**      the 1st parameter to sqlite3_exec() while sqlite3_exec() is running.",
   "column": 30,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (390:30)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 390,
   "class": "sqlite3.h (390:51)",
   "vul_id": "f45fc59db3134478fc34dee9308b438e",
   "method": "**      the 1st parameter to sqlite3_exec() while sqlite3_exec() is running.",
   "column": 51,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (390:51)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 392,
   "class": "sqlite3.h (392:30)",
   "vul_id": "3ebd13eb126137308eb496645fb4e260",
   "method": "**      the 2nd parameter of sqlite3_exec() while sqlite3_exec() is running.",
   "column": 30,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (392:30)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 392,
   "class": "sqlite3.h (392:51)",
   "vul_id": "2ad74b7bf2606113b0d873352d805e74",
   "method": "**      the 2nd parameter of sqlite3_exec() while sqlite3_exec() is running.",
   "column": 51,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (392:51)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 395,
   "class": "sqlite3.h (395:16)",
   "vul_id": "93a4f5e84206ea3d57887fc60d46d43a",
   "method": "SQLITE_API int sqlite3_exec(",
   "column": 16,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (395:16)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2365,
   "class": "sqlite3.h (2365:5)",
   "vul_id": "fa0e352727dfae556de7320ff0e43a21",
   "method": "** [sqlite3_exec()].  The sqlite3_get_table() routine does not have access",
   "column": 5,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (2365:5)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2368,
   "class": "sqlite3.h (2368:43)",
   "vul_id": "353c2bcfd2fa1b953cbc5430a7d9457e",
   "method": "** wrapper layer outside of the internal [sqlite3_exec()] call are not",
   "column": 43,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (2368:43)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2441,
   "class": "sqlite3.h (2441:5)",
   "vul_id": "45ed5e60ad99484149a8ec9b3cdf2eb2",
   "method": "**  sqlite3_exec(db, zSQL, 0, 0, 0);",
   "column": 5,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (2441:5)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2469,
   "class": "sqlite3.h (2469:5)",
   "vul_id": "68cef0d9b06eec08db0585b3d0710cd8",
   "method": "**  sqlite3_exec(db, zSQL, 0, 0, 0);",
   "column": 5,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (2469:5)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 2928,
   "class": "sqlite3.h (2928:5)",
   "vul_id": "e50c62def80393593ddef5bc7f778b94",
   "method": "** [sqlite3_exec()], [sqlite3_step()] and [sqlite3_get_table()] for",
   "column": 5,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (2928:5)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 3581,
   "class": "sqlite3.h (3581:11)",
   "vul_id": "f0c7b4ad53a95f2275e9be507fbc1c8c",
   "method": "** calls [sqlite3_exec()], then the following SQL statement would",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (3581:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 302,
   "class": "sqlite3.h (302:25)",
   "vul_id": "e880f262ff05af4e98e210470c7927dd",
   "method": "** Applications should [sqlite3_finalize | finalize] all [prepared statements],",
   "column": 25,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (302:25)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 338,
   "class": "sqlite3.h (338:51)",
   "vul_id": "028d5d03884756290876048613ffefab",
   "method": "** [sqlite3_prepare_v2()], [sqlite3_step()], and [sqlite3_finalize()],",
   "column": 51,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (338:51)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 3310,
   "class": "sqlite3.h (3310:35)",
   "vul_id": "c1a5474887365baa794f6a1172f83a05",
   "method": "** \u003cli\u003e Destroy the object using [sqlite3_finalize()].",
   "column": 35,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (3310:35)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 3463,
   "class": "sqlite3.h (3463:25)",
   "vul_id": "10b34d615381302e669afbed3d0241d6",
   "method": "** SQL statement using [sqlite3_finalize()] after it has finished with it.",
   "column": 25,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (3463:25)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 3901,
   "class": "sqlite3.h (3901:21)",
   "vul_id": "fb94c3412b65df3eb7d64db210b7fdda",
   "method": "** is destroyed by [sqlite3_finalize()] or until the statement is automatically",
   "column": 21,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (3901:21)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 3930,
   "class": "sqlite3.h (3930:11)",
   "vul_id": "9c9259a16f582b12cbea4543b964f38b",
   "method": "** using [sqlite3_finalize()] or until the statement is automatically",
   "column": 11,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (3930:11)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4053,
   "class": "sqlite3.h (4053:18)",
   "vul_id": "a6cb6d90d0ea47376221f1bf3e49c948",
   "method": "** already been [sqlite3_finalize | finalized] or on one that had",
   "column": 18,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (4053:18)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4074,
   "class": "sqlite3.h (4074:26)",
   "vul_id": "80d5edcba80efe2c87a6086a98acfad7",
   "method": "** [sqlite3_reset()] or [sqlite3_finalize()] in order to find one of the",
   "column": 26,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (4074:26)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4156,
   "class": "sqlite3.h (4156:27)",
   "vul_id": "4ec4929bb52eb3ac6aead9323ba919cf",
   "method": "** [sqlite3_reset()] nor [sqlite3_finalize()] have been called subsequently.",
   "column": 27,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (4156:27)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4158,
   "class": "sqlite3.h (4158:5)",
   "vul_id": "e9bde0e435ed51a2b460079118f07e11",
   "method": "** [sqlite3_finalize()] or after [sqlite3_step()] has returned",
   "column": 5,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (4158:5)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4160,
   "class": "sqlite3.h (4160:49)",
   "vul_id": "289258fc929bd4d3dc1d3100331f0e90",
   "method": "** If [sqlite3_step()] or [sqlite3_reset()] or [sqlite3_finalize()]",
   "column": 49,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (4160:49)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4283,
   "class": "sqlite3.h (4283:5)",
   "vul_id": "5654946d49baf9978275fcf8732c9d86",
   "method": "** [sqlite3_finalize()] is called.  ^The memory space used to hold strings",
   "column": 5,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (4283:5)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4309,
   "class": "sqlite3.h (4309:9)",
   "vul_id": "521ff233dcafcce6dbbd1873572e5714",
   "method": "** ^The sqlite3_finalize() function is called to delete a [prepared statement].",
   "column": 9,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (4309:9)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4311,
   "class": "sqlite3.h (4311:54)",
   "vul_id": "332fde1dc4181e2034222df3182ea9ae",
   "method": "** or if the statement is never been evaluated, then sqlite3_finalize() returns",
   "column": 54,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (4311:54)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4313,
   "class": "sqlite3.h (4313:4)",
   "vul_id": "55e0ccd5aeeada30b4a8493c3d9405f7",
   "method": "** sqlite3_finalize(S) returns the appropriate [error code] or",
   "column": 4,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (4313:4)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4316,
   "class": "sqlite3.h (4316:9)",
   "vul_id": "1fb5c4440b3c266046371e0cf20aa055",
   "method": "** ^The sqlite3_finalize(S) routine can be called at any point during",
   "column": 9,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (4316:9)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4323,
   "class": "sqlite3.h (4323:14)",
   "vul_id": "f3423b084380d2baeaf36923dfa7beab",
   "method": "** ^Invoking sqlite3_finalize() on a NULL pointer is a harmless no-op.",
   "column": 14,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (4323:14)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4331,
   "class": "sqlite3.h (4331:16)",
   "vul_id": "2c7b7097234cb01560f5c38ae9451cb4",
   "method": "SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt);",
   "column": 16,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (4331:16)"
  },
  {
   "cvss": 5.5,
   "cwe": "CWE-922",
   "line": 4728,
   "class": "sqlite3.h (4728:38)",
   "vul_id": "3cd29f2c8f769a5ffb3451f19547e26f",
   "method": "** \u003cli\u003e ^(when [sqlite3_reset()] or [sqlite3_finalize()] is called for the",
   "column": 38,
   "description": "The application is using SQLite. Confidential information must be encrypted",
   "classMessage": "iGoat/iGoat/sqlcipher/tsrc/sqlite3.h (4728:38)"
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 1,
   "class": "hostileSSLServer.crt (1:-27)",
   "vul_id": "5e824314e6c2d88466d4f2764ef62757",
   "column": -27,
   "description": "File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "iGoat/server/hostileSSLServer.crt (1:-27)",
   "recomendation": "Credentials must not be stored in the git code or repository, an attacker could decompile the application and obtain the credential. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 7389,
   "class": "Realm (7389:12768)",
   "vul_id": "b40e975a7a29b556d2dc8782f4699ee1",
   "method": "\u0000RLMSyncPermissionOffer\u0000\u0018\u0000RLMSyncPermissionOfferResponse\u0000\u0007\u0000RLMProgressNotificationToken\u0000RLMSyncSession\u0000RLMSyncSessionRefreshHandle\u0000T\u0000A\u0000RLMSyncUser\u00002\u0000RealmSync\u0000RLMThreadSafeReference\u0000RLMTokenDataModel\u0000RLMTokenModel\u0000__ARCLite__\u0000__ARCLiteIndexedSubscripting__\u0000__ARCLiteKeyedSubscripting__\u0000@?8@0:4\u0000@8@0:4\u0000v8@0:4\u0000{unique_ptr\u003cid [], std::__1::default_delete\u003cid []\u003e \u003e=\"__ptr_\"{__compressed_pair\u003c__strong id *, std::__1::default_delete\u003cid []\u003e \u003e=\"__first_\"^@}}\u0000@20@0:4{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e={__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=^{ThreadSafeReferenceBase}}}8@12@16\u0000{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e={__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=^{ThreadSafeReferenceBase}}}8@0:4\u0000@20@0:4{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e={__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=^{ThreadSafeReferenceBase}}}8@12@\"RLMRealm\"16\u0000c12@0:4@8\u0000#8@0:4\u0000@12@0:4:8\u0000@16@0:4:8@12\u0000@20@0:4:8@12@16\u0000c8@0:4\u0000c12@0:4#8\u0000c12@0:4@\"Protocol\"8\u0000c12@0:4:8\u0000Vv8@0:4\u0000I8@0:4\u0000^{_NSZone=}8@0:4\u0000@\"NSString\"8@0:4\u0000@12@0:4I8\u0000I12@0:4@8\u0000I12@0:4@\"RLMObject\"8\u0000I12@0:4@\"NSString\"8\u0000I16@0:4@8*12\u0000I16@0:4@\"NSString\"8*12\u0000I12@0:4@\"NSPredicate\"8\u0000@12@0:4@8\u0000@\"RLMResults\"12@0:4@\"NSString\"8\u0000@16@0:4@8*12\u0000@\"RLMResults\"16@0:4@\"NSString\"8*12\u0000@\"RLMResults\"12@0:4@\"NSPredicate\"8\u0000@16@0:4@8c12\u0000@\"RLMResults\"16@0:4@\"NSString\"8c12\u0000@\"RLMResults\"12@0:4@\"NSArray\"8\u0000@12@0:4@\"NSString\"8\u0000v16@0:4@8@12\u0000v16@0:4@8@\"NSString\"12\u0000@12@0:4@?8\u0000@\"RLMNotificationToken\"12@0:4@?\u003cv@?@\"\u003cRLMCollection\u003e\"@\"RLMCollectionChange\"@\"NSError\"\u003e8\u0000@\"NSNumber\"12@0:4@\"NSString\"8\u0000@\"RLMRealm\"8@0:4\u0000I20@0:4^{?=L^@^L[5L]}8^@12I16\u0000v12@0:4@8\u0000v16@0:4@8I12\u0000v12@0:4I8\u0000v16@0:4I8@12\u0000v16@0:4I8I12\u0000v20@0:4@8:12B16\u0000v24@0:4@8@12I16^v20\u0000@\"NSString\"\u0000@\"RLMObjectBase\"\u0000@\"NSMutableArray\"\u0000c\u0000I12@0:4I8\u0000{TableView=^^?{Column\u003clong long\u003e=^^?I{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e={__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=^{StringIndex}}}{BpTree\u003clong long\u003e={unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e={__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=^{Array}}}}}Q{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{BacklinkColumn}{BasicRow\u003cconst realm::Table\u003e={BasicTableRef\u003crealm::Table\u003e=^{Table}}I^{RowBase}^{RowBase}}{shared_ptr\u003cconst realm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}I{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^LI{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=L}}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^LI{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=L}}}{Query={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}^{QueryGroup}{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}}}{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=^L^L{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=^L}}{shared_ptr\u003cconst realm::Descriptor\u003e=^{Descriptor}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{RowIndexes}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}^{TableViewBase}{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e={__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=^{TableViewBase}}}}III{Optional\u003cunsigned long long\u003e=(?=Qc)B}I}8@0:4\u0000^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}8@0:4\u0000@48@0:4{List={shared_ptr\u003crealm::Realm\u003e=^{Realm}^{__shared_weak_count}}^{ObjectSchema}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}{Handle\u003crealm::_impl::ListNotifier\u003e=^{ListNotifier}^{__shared_weak_count}}}8@36^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}40@44\u0000@16@0:4@8@12\u0000@24@0:4@812@20\u0000{List=\"m_realm\"{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\"m_object_schema\"^{ObjectSchema}\"m_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_notifier\"{Handle\u003crealm::_impl::ListNotifier\u003e=\"__ptr_\"^{ListNotifier}\"__cntrl_\"^{__shared_weak_count}}}\u0000@\"RLMRealm\"\u0000^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}\u0000{unique_ptr\u003cRLMObservationInfo, std::__1::default_delete\u003cRLMObservationInfo\u003e \u003e=\"__ptr_\"{__compressed_pair\u003cRLMObservationInfo *, std::__1::default_delete\u003cRLMObservationInfo\u003e \u003e=\"__first_\"^{RLMObservationInfo}}}\u0000@20@0:4@8c12c16\u0000@\"RLMTokenModel\"\u0000@16@0:4@8^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}12\u0000I16@0:4^{?=L^@^L[5L]}8I12\u0000[16@]\u0000@\"\u003cRLMFastEnumerable\u003e\"\u0000{TableView=\"_vptr$RowIndexes\"^^?\"m_row_indexes\"{Column\u003clong long\u003e=\"_vptr$ColumnBase\"^^?\"m_column_ndx\"I\"m_search_index\"{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__first_\"^{StringIndex}}}\"m_tree\"{BpTree\u003clong long\u003e=\"m_root\"{unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__first_\"^{Array}}}}}\"m_debug_cookie\"Q\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_linked_column\"^{BacklinkColumn}\"m_linked_row\"{BasicRow\u003cconst realm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"I\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\"m_linkview_source\"{shared_ptr\u003cconst realm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_distinct_column_source\"I\"m_distinct_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^L\"__size_\"I\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"L}}}\"m_sorting_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^L\"__size_\"I\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"L}}}\"m_query\"{Query=\"error_code\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}\"m_groups\"{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__begin_\"^{QueryGroup}\"__end_\"^{QueryGroup}\"__end_cap_\"{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__first_\"^{QueryGroup}}}\"m_subtable_path\"{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__begin_\"^L\"__end_\"^L\"__end_cap_\"{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"^L}}\"m_current_descriptor\"{shared_ptr\u003cconst realm::Descriptor\u003e=\"__ptr_\"^{Descriptor}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_view\"^{RowIndexes}\"m_source_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_source_table_view\"^{TableViewBase}\"m_owned_source_table_view\"{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__first_\"^{TableViewBase}}}}\"m_start\"I\"m_end\"I\"m_limit\"I\"m_last_seen_version\"{Optional\u003cunsigned long long\u003e=\"\"(?=\"m_value\"Q\"m_null_state\"c)\"m_engaged\"B}\"m_num_detached_refs\"I}\u0000@24@0:4{NotificationToken={AtomicSharedPtr\u003crealm::_impl::CollectionNotifier, true\u003e={shared_ptr\u003crealm::_impl::CollectionNotifier\u003e=^{CollectionNotifier}^{__shared_weak_count}}}I}8@20\u0000{NotificationToken=\"m_notifier\"{AtomicSharedPtr\u003crealm::_impl::CollectionNotifier, true\u003e=\"m_ptr\"{shared_ptr\u003crealm::_impl::CollectionNotifier\u003e=\"__ptr_\"^{CollectionNotifier}\"__cntrl_\"^{__shared_weak_count}}}\"m_token\"I}\u0000@80@0:4{CollectionChangeSet={IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{vector\u003crealm::CollectionChangeSet::Move, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=^{Move}^{Move}{__compressed_pair\u003crealm::CollectionChangeSet::Move *, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=^{Move}}}{vector\u003crealm::IndexSet, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=^{IndexSet}^{IndexSet}{__compressed_pair\u003crealm::IndexSet *, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=^{IndexSet}}}}8\u0000{CollectionChangeSet=\"deletions\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"insertions\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"modifications\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"modifications_new\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"moves\"{vector\u003crealm::CollectionChangeSet::Move, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=\"__begin_\"^{Move}\"__end_\"^{Move}\"__end_cap_\"{__compressed_pair\u003crealm::CollectionChangeSet::Move *, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=\"__first_\"^{Move}}}\"columns\"{vector\u003crealm::IndexSet, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=\"__begin_\"^{IndexSet}\"__end_\"^{IndexSet}\"__end_cap_\"{__compressed_pair\u003crealm::IndexSet *, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=\"__first_\"^{IndexSet}}}}\u0000@\"RLMArray\"\u0000@20@0:4@8@12^{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}16\u0000v16@0:4@8@?12\u0000v12@0:4@?8\u0000v20@0:4@8@12@16\u0000^{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}\u0000@\"NSMutableDictionary\"\u0000@16@0:4@8I12\u0000v24@0:4I8@12@16@?20\u0000v32@0:4I8@12@16d20@?28\u0000v36@0:4I8@12@16@20d24@?32\u0000c20@0:4@8@12^@16\u0000@20@0:4@8@12*16\u0000@12@0:4^{_NSZone=}8\u0000{BasicRow\u003crealm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"I\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\u0000#\u0000{Object=\"m_realm\"{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\"m_object_schema\"^{ObjectSchema}\"m_row\"{BasicRow\u003crealm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"I\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\"m_notifier\"{Handle\u003crealm::_impl::ObjectNotifier\u003e=\"__ptr_\"^{ObjectNotifier}\"__cntrl_\"^{__shared_weak_count}}}\u0000@\u0000#12@0:4c8\u0000^{RLMObservationInfo=^{RLMObservationInfo}^{RLMObservationInfo}{BasicRow\u003crealm::Table\u003e={BasicTableRef\u003crealm::Table\u003e=^{Table}}I^{RowBase}^{RowBase}}^{RLMClassInfo}@BI@@@}\u0000@\"RLMObjectSchema\"\u0000@12@0:4#8\u0000@16@0:4#8B12\u0000@12@0:4r^{ObjectSchema={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}8\u0000@20@0:4@8#12@16\u0000{ObjectSchema={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}8@0:4\u0000B8@0:4\u0000v12@0:4B8\u0000v12@0:4#8\u0000B\u0000@\"NSArray\"\u0000@\"RLMProperty\"\u0000@\"NSDictionary\"\u0000i8@0:4\u0000@12@0:4i8\u0000@12@0:4{unique_ptr\u003crealm::PermissionResults, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e={__compressed_pair\u003crealm::PermissionResults *, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e=^{PermissionResults}}}8\u0000i12@0:4@8\u0000@16@0:4I8c12\u0000{unique_ptr\u003crealm::PermissionResults, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::PermissionResults *, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e=\"__first_\"^{PermissionResults}}}\u0000v12@0:4:8\u0000@12@0:4r^{Property={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}C{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBBI}8\u0000@32@0:4@8i12@16@20c24c28\u0000v20@0:4^{objc_property=}8^B12^@16\u0000@28@0:4@8c12@16^{objc_property=}20@24\u0000@24@0:4@8c12@16^{objc_property=}20\u0000@20@0:4@8^{objc_ivar=}12@16\u0000@24@0:4@8c12^{objc_ivar=}16i20\u0000@24@0:4@8^{objc_ivar=}12@16@20\u0000{Property={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}C{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBBI}8@0:4\u0000v12@0:4i8\u0000v12@0:4c8\u0000^{objc_ivar=}8@0:4\u0000v12@0:4^{objc_ivar=}8\u0000:8@0:4\u0000i\u0000^{objc_ivar=}\u0000I\u0000:\u0000@16@0:4#8@12\u0000@?\u0000v20@0:4@8@12@?16\u0000@20@0:4{shared_ptr\u003crealm::Realm\u003e=^{Realm}^{__shared_weak_count}}8@16\u0000@16@0:4@8^@12\u0000Q20@0:4@8@12^@16\u0000c16@0:4@8^@12\u0000^{Group=^^?{SlabAlloc=^^?I^{Replication}iI{atomic\u003cunsigned long long\u003e=AQ}{shared_ptr\u003crealm::SlabAlloc::MappedFile\u003e=^{MappedFile}^{__shared_weak_count}}{unique_ptr\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e [], std::__1::default_delete\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e []\u003e \u003e={__compressed_pair\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e *, std::__1::default_delete\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e []\u003e \u003e=^{shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e}}}I*IIi{unique_ptr\u003cunsigned long [], std::__1::default_delete\u003cunsigned long []\u003e \u003e={__compressed_pair\u003cunsigned long *, std::__1::default_delete\u003cunsigned long []\u003e \u003e=^L}}IiBi{vector\u003crealm::SlabAlloc::Slab, std::__1::allocator\u003crealm::SlabAlloc::Slab\u003e \u003e=^{Slab}^{Slab}{__compressed_pair\u003crealm::SlabAlloc::Slab *, std::__1::allocator\u003crealm::SlabAlloc::Slab\u003e \u003e=^{Slab}}}{vector\u003crealm::SlabAlloc::Chunk, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::SlabAlloc::Chunk *, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}}}{vector\u003crealm::SlabAlloc::Chunk, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::SlabAlloc::Chunk *, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}}}B[256{hash_entry=I*I}]I}{Array=^^?^{VTable}*qqII^{Allocator}I^{ArrayParent}ICBBB}{ArrayInteger=^^?^{VTable}*qqII^{Allocator}I^{ArrayParent}ICBBB}{ArrayString=^^?^{VTable}*qqII^{Allocator}I^{ArrayParent}ICBBBB}{vector\u003crealm::Table *, std::__1::allocator\u003crealm::Table *\u003e \u003e=^^{Table}^^{Table}{__compressed_pair\u003crealm::Table **, std::__1::allocator\u003crealm::Table *\u003e \u003e=^^{Table}}}BB{function\u003cvoid (const realm::Group::CascadeNotification \u0026)\u003e={type=[12C]}^{__base\u003cvoid (const realm::Group::CascadeNotification \u0026)\u003e}}{function\u003cvoid ()\u003e={type=[12C]}^{__base\u003cvoid ()\u003e}}}8@0:4\u0000c12@0:4^@8\u0000c16@0:4@?8^@12\u0000{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\u0000{RLMSchemaInfo=\"m_objects\"{unordered_map\u003cNSString *, RLMClassInfo, std::__1::hash\u003cNSString *\u003e, std::__1::equal_to\u003cNSString *\u003e, std::__1::allocator\u003cstd::__1::pair\u003cNSString *const, RLMClassInfo\u003e \u003e \u003e=\"__table_\"{__hash_table\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::__unordered_map_hasher\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::hash\u003cNSString *\u003e, true\u003e, std::__1::__unordered_map_equal\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::equal_to\u003cNSString *\u003e, true\u003e, std::__1::allocator\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e \u003e \u003e=\"__bucket_list_\"{unique_ptr\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *[], std::__1::__bucket_list_deallocator\u003cstd::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e \u003e=\"__ptr_\"{__compressed_pair\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e **, std::__1::__bucket_list_deallocator\u003cstd::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e \u003e=\"__first_\"^^{__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e}\"__second_\"{__bucket_list_deallocator\u003cstd::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e=\"__data_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e=\"__first_\"L}}}}\"__p1_\"{__compressed_pair\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e, std::__1::allocator\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e \u003e \u003e=\"__first_\"{__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e=\"__next_\"^{__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e}}}\"__p2_\"{__compressed_pair\u003cunsigned long, std::__1::__unordered_map_hasher\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::hash\u003cNSString *\u003e, true\u003e \u003e=\"__first_\"L}\"__p3_\"{__compressed_pair\u003cfloat, std::__1::__unordered_map_equal\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::equal_to\u003cNSString *\u003e, true\u003e \u003e=\"__first_\"f}}}}\u0000@\"NSHashTable\"\u0000@\"RLMSchema\"\u0000^{Config={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{BinaryData=*I}{vector\u003cchar, std::__1::allocator\u003cchar\u003e \u003e=**{__compressed_pair\u003cchar *, std::__1::allocator\u003cchar\u003e \u003e=*}}BC{Optional\u003crealm::Schema\u003e=(?={Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}c)B}Q{function\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e={type=[12C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e}}{function\u003cbool (unsigned long long, unsigned long long)\u003e={type=[12C]}^{__base\u003cbool (unsigned long long, unsigned long long)\u003e}}BBB{Optional\u003cunsigned long\u003e=(?=Lc)B}{shared_ptr\u003crealm::SyncConfig\u003e=^{SyncConfig}^{__shared_weak_count}}B}8@0:4\u0000Q8@0:4\u0000v16@0:4Q8\u0000C8@0:4\u0000v12@0:4C8\u0000{Config=\"path\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}\"realm_data\"{BinaryData=\"m_data\"*\"m_size\"I}\"encryption_key\"{vector\u003cchar, std::__1::allocator\u003cchar\u003e \u003e=\"__begin_\"*\"__end_\"*\"__end_cap_\"{__compressed_pair\u003cchar *, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"*}}\"in_memory\"B\"schema_mode\"C\"schema\"{Optional\u003crealm::Schema\u003e=\"\"(?=\"m_value\"{Schema=\"__begin_\"^{ObjectSchema}\"__end_\"^{ObjectSchema}\"__end_cap_\"{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=\"__first_\"^{ObjectSchema}}}\"m_null_state\"c)\"m_engaged\"B}\"schema_version\"Q\"migration_function\"{function\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e=\"__buf_\"{type=\"__lx\"[12C]}\"__f_\"^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e}}\"should_compact_on_launch_function\"{function\u003cbool (unsigned long long, unsigned long long)\u003e=\"__buf_\"{type=\"__lx\"[12C]}\"__f_\"^{__base\u003cbool (unsigned long long, unsigned long long)\u003e}}\"cache\"B\"disable_format_upgrade\"B\"automatic_change_notifications\"B\"execution_context\"{Optional\u003cunsigned long\u003e=\"\"(?=\"m_value\"L\"m_null_state\"c)\"m_engaged\"B}\"sync_config\"{shared_ptr\u003crealm::SyncConfig\u003e=\"__ptr_\"^{SyncConfig}\"__cntrl_\"^{__shared_weak_count}}\"force_sync_history\"B}\u0000@380@0:4^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}8{Results={shared_ptr\u003crealm::Realm\u003e=^{Realm}^{__shared_weak_count}}^{ObjectSchema}{Query={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}^{QueryGroup}{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}}}{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=^L^L{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=^L}}{shared_ptr\u003cconst realm::Descriptor\u003e=^{Descriptor}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{RowIndexes}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}^{TableViewBase}{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e={__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=^{TableViewBase}}}}{TableView=^^?{Column\u003clong long\u003e=^^?I{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e={__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=^{StringIndex}}}{BpTree\u003clong long\u003e={unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e={__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=^{Array}}}}}Q{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{BacklinkColumn}{BasicRow\u003cconst realm::Table\u003e={BasicTableRef\u003crealm::Table\u003e=^{Table}}I^{RowBase}^{RowBase}}{shared_ptr\u003cconst realm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}I{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^LI{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=L}}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^LI{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=L}}}{Query={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}^{QueryGroup}{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}}}{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=^L^L{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=^L}}{shared_ptr\u003cconst realm::Descriptor\u003e=^{Descriptor}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{RowIndexes}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}^{TableViewBase}{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e={__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=^{TableViewBase}}}}III{Optional\u003cunsigned long long\u003e=(?=Qc)B}I}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^LI{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=L}}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^LI{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=L}}}{Handle\u003crealm::_impl::ResultsNotifier\u003e=^{ResultsNotifier}^{__shared_weak_count}}iiBB}12\u0000@28@0:4@812@20c24\u0000{Results=\"m_realm\"{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\"m_object_schema\"^{ObjectSchema}\"m_query\"{Query=\"error_code\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}\"m_groups\"{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__begin_\"^{QueryGroup}\"__end_\"^{QueryGroup}\"__end_cap_\"{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__first_\"^{QueryGroup}}}\"m_subtable_path\"{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__begin_\"^L\"__end_\"^L\"__end_cap_\"{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"^L}}\"m_current_descriptor\"{shared_ptr\u003cconst realm::Descriptor\u003e=\"__ptr_\"^{Descriptor}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_view\"^{RowIndexes}\"m_source_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_source_table_view\"^{TableViewBase}\"m_owned_source_table_view\"{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__first_\"^{TableViewBase}}}}\"m_table_view\"{TableView=\"_vptr$RowIndexes\"^^?\"m_row_indexes\"{Column\u003clong long\u003e=\"_vptr$ColumnBase\"^^?\"m_column_ndx\"I\"m_search_index\"{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__first_\"^{StringIndex}}}\"m_tree\"{BpTree\u003clong long\u003e=\"m_root\"{unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__first_\"^{Array}}}}}\"m_debug_cookie\"Q\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_linked_column\"^{BacklinkColumn}\"m_linked_row\"{BasicRow\u003cconst realm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"I\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\"m_linkview_source\"{shared_ptr\u003cconst realm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_distinct_column_source\"I\"m_distinct_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^L\"__size_\"I\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"L}}}\"m_sorting_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^L\"__size_\"I\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"L}}}\"m_query\"{Query=\"error_code\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}\"m_groups\"{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__begin_\"^{QueryGroup}\"__end_\"^{QueryGroup}\"__end_cap_\"{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__first_\"^{QueryGroup}}}\"m_subtable_path\"{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__begin_\"^L\"__end_\"^L\"__end_cap_\"{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"^L}}\"m_current_descriptor\"{shared_ptr\u003cconst realm::Descriptor\u003e=\"__ptr_\"^{Descriptor}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_view\"^{RowIndexes}\"m_source_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_source_table_view\"^{TableViewBase}\"m_owned_source_table_view\"{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__first_\"^{TableViewBase}}}}\"m_start\"I\"m_end\"I\"m_limit\"I\"m_last_seen_version\"{Optional\u003cunsigned long long\u003e=\"\"(?=\"m_value\"Q\"m_null_state\"c)\"m_engaged\"B}\"m_num_detached_refs\"I}\"m_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_sort\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^L\"__size_\"I\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"L}}}\"m_distinct\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^L\"__size_\"I\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"L}}}\"m_notifier\"{Handle\u003crealm::_impl::ResultsNotifier\u003e=\"__ptr_\"^{ResultsNotifier}\"__cntrl_\"^{__shared_weak_count}}\"m_mode\"i\"m_update_policy\"i\"m_has_used_table_view\"B\"m_wants_background_updates\"B}\u0000@12@0:4r^{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}8\u0000#12@0:4@8\u0000{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}8@0:4\u0000{Schema=\"__begin_\"^{ObjectSchema}\"__end_\"^{ObjectSchema}\"__end_cap_\"{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=\"__first_\"^{ObjectSchema}}}\u0000@176@0:4{SyncConfig={shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i{function\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e={type=[12C]}^{__base\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e}}{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[12C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}{shared_ptr\u003crealm::sync::ClientHistory::ChangesetCooker\u003e=^{ChangesetCooker}^{__shared_weak_count}}{Optional\u003cstd::__1::array\u003cchar, 64\u003e \u003e=(?={array\u003cchar, 64\u003e=[64c]}c)B}B{Optional\u003cstd::__1::basic_string\u003cchar\u003e \u003e=(?={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}c)B}}8\u0000{SyncConfig={shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i{function\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e={type=[12C]}^{__base\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e}}{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[12C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}{shared_ptr\u003crealm::sync::ClientHistory::ChangesetCooker\u003e=^{ChangesetCooker}^{__shared_weak_count}}{Optional\u003cstd::__1::array\u003cchar, 64\u003e \u003e=(?={array\u003cchar, 64\u003e=[64c]}c)B}B{Optional\u003cstd::__1::basic_string\u003cchar\u003e \u003e=(?={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}c)B}}8@0:4\u0000@48@0:4@8@12@16I20{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[12C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}24\u0000{unique_ptr\u003crealm::SyncConfig, std::__1::default_delete\u003crealm::SyncConfig\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::SyncConfig *, std::__1::default_delete\u003crealm::SyncConfig\u003e \u003e=\"__first_\"^{SyncConfig}}}\u0000@\"NSURL\"\u0000@20@0:4@8@12I16\u0000@80@0:4{Permission={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i{Condition=i{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{pair\u003cstd::__1::basic_string\u003cchar\u003e, std::__1::basic_string\u003cchar\u003e \u003e={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}{Timestamp=qiB}}8\u0000{Permission={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i{Condition=i{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{pair\u003cstd::__1::basic_string\u003cchar\u003e, std::__1::basic_string\u003cchar\u003e \u003e={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}{Timestamp=qiB}}8@0:4\u0000{Optional\u003crealm::Permission\u003e=\"\"(?=\"m_value\"{Permission=\"path\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}\"access\"i\"condition\"{Condition=\"type\"i\"user_id\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}\"key_value\"{pair\u003cstd::__1::basic_string\u003cchar\u003e, std::__1::basic_string\u003cchar\u003e \u003e=\"first\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}\"second\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}}}\"updated_at\"{Timestamp=\"m_seconds\"q\"m_nanoseconds\"i\"m_is_null\"B}}\"m_null_state\"c)\"m_engaged\"B}\u0000@\"NSDate\"\u0000@20@0:4@8@12c16\u0000@20@0:4@8@12@16\u0000v32@0:4i8@12c16@20@24I28\u0000@\"NSNumber\"\u0000@28@0:4@8@12@16@20@24\u0000@\"NSNumber\u003cRLMInt\u003e\"\u0000@\"NSNumber\u003cRLMBool\u003e\"\u0000@28@0:4@8@12c16c20c24\u0000@24@0:4Q8{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}16\u0000Q\u0000{weak_ptr\u003crealm::SyncSession\u003e=\"__ptr_\"^{SyncSession}\"__cntrl_\"^{__shared_weak_count}}\u0000@16@0:4{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}8\u0000c16@0:4@8@?12\u0000@20@0:4I8I12@?16\u0000@28@0:4@8@12{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}16@?24\u0000c16@0:4@8@12\u0000{shared_ptr\u003crealm::SyncSession\u003e=\"__ptr_\"^{SyncSession}\"__cntrl_\"^{__shared_weak_count}}\u0000@\"RLMSyncUser\"\u0000@\"NSTimer\"\u0000v28@0:4@8@12d16@?24\u0000v32@0:4@8@12@16d20@?28\u0000@16@0:4{shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}8\u0000@12@0:4^@8\u0000v24@0:4r^{SyncConfig={shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i{function\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e={type=[12C]}^{__base\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e}}{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[12C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}{shared_ptr\u003crealm::sync::ClientHistory::ChangesetCooker\u003e=^{ChangesetCooker}^{__shared_weak_count}}{Optional\u003cstd::__1::array\u003cchar, 64\u003e \u003e=(?={array\u003cchar, 64\u003e=[64c]}c)B}B{Optional\u003cstd::__1::basic_string\u003cchar\u003e \u003e=(?={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}c)B}}8{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}12@?20\u0000{shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}8@0:4\u0000{shared_ptr\u003crealm::SyncUser\u003e=\"__ptr_\"^{SyncUser}\"__cntrl_\"^{__shared_weak_count}}\u0000{unique_ptr\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e, std::__1::default_delete\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e \u003e \u003e=\"__ptr_\"{__compressed_pair\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e *, std::__1::default_delete\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e \u003e \u003e=\"__first_\"^{function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e}}}\u0000{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=\"__first_\"^{ThreadSafeReferenceBase}}}\u0000d8@0:4\u0000v16@0:4d8\u0000d\u0000@\"RLMTokenDataModel\"\u0000v@:\u0000\u003c\u0000%\u0000@\u0000 \u0000\u0014  \u0000%\u0000l\u0000u\u0000 \u0000t\u0000o\u0000t\u0000a\u0000l\u0000 \u0000b\u0000y\u0000t\u0000e\u0000s\u0000\u003e\u0000\u0000\u0000S\u0000U\u0000B\u0000Q\u0000U\u0000E\u0000R\u0000Y\u0000(\u0000\u0026 )\u0000.\u0000@\u0000c\u0000o\u0000u\u0000n\u0000t\u0000 \u0000i\u0000s\u0000 \u0000o\u0000n\u0000l\u0000y\u0000 \u0000s\u0000u\u0000p\u0000p\u0000o\u0000r\u0000t\u0000e\u0000d\u0000 \u0000w\u0000h\u0000e\u0000n\u0000 \u0000c\u0000o\u0000m\u0000p\u0000a\u0000r\u0000e\u0000d\u0000 \u0000w\u0000i\u0000t\u0000h\u0000 \u0000a\u0000 \u0000c\u0000o\u0000n\u0000s\u0000t\u0000a\u0000n\u0000t\u0000 \u0000n\u0000u\u0000m\u0000b\u0000e\u0000r\u0000.\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001c\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0002\u0000\u0000\u0000X\u0000\u0000\u0000",
   "column": 12768,
   "description": "File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/Realm/Realm.framework/Realm (7389:12768)",
   "recomendation": "Credentials must not be stored in the Git code or repository. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 16616,
   "class": "Realm (16616:12892)",
   "vul_id": "14ee42d9dfbe1683e5c315e9a75e559a",
   "method": "\u0000RLMSyncPermissionOffer\u0000\u0018\u0000RLMSyncPermissionOfferResponse\u0000\u0007\u0000RLMProgressNotificationToken\u0000RLMSyncSession\u0000RLMSyncSessionRefreshHandle\u0000T\u0000A\u0000RLMSyncUser\u00002\u0000RealmSync\u0000RLMThreadSafeReference\u0000RLMTokenDataModel\u0000RLMTokenModel\u0000__ARCLite__\u0000__ARCLiteKeyedSubscripting__\u0000@?16@0:8\u0000@16@0:8\u0000v16@0:8\u0000{unique_ptr\u003cid [], std::__1::default_delete\u003cid []\u003e \u003e=\"__ptr_\"{__compressed_pair\u003c__strong id *, std::__1::default_delete\u003cid []\u003e \u003e=\"__first_\"^@}}\u0000@40@0:8{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e={__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=^{ThreadSafeReferenceBase}}}16@24@32\u0000{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e={__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=^{ThreadSafeReferenceBase}}}16@0:8\u0000@40@0:8{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e={__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=^{ThreadSafeReferenceBase}}}16@24@\"RLMRealm\"32\u0000B24@0:8@16\u0000#16@0:8\u0000@24@0:8:16\u0000@32@0:8:16@24\u0000@40@0:8:16@24@32\u0000B16@0:8\u0000B24@0:8#16\u0000B24@0:8@\"Protocol\"16\u0000B24@0:8:16\u0000Vv16@0:8\u0000Q16@0:8\u0000^{_NSZone=}16@0:8\u0000@\"NSString\"16@0:8\u0000@24@0:8Q16\u0000Q24@0:8@16\u0000Q24@0:8@\"RLMObject\"16\u0000Q24@0:8@\"NSString\"16\u0000Q32@0:8@16[1{__va_list_tag=II^v^v}]24\u0000Q32@0:8@\"NSString\"16[1{__va_list_tag=II^v^v}]24\u0000Q24@0:8@\"NSPredicate\"16\u0000@24@0:8@16\u0000@\"RLMResults\"24@0:8@\"NSString\"16\u0000@32@0:8@16[1{__va_list_tag=II^v^v}]24\u0000@\"RLMResults\"32@0:8@\"NSString\"16[1{__va_list_tag=II^v^v}]24\u0000@\"RLMResults\"24@0:8@\"NSPredicate\"16\u0000@28@0:8@16B24\u0000@\"RLMResults\"28@0:8@\"NSString\"16B24\u0000@\"RLMResults\"24@0:8@\"NSArray\"16\u0000@24@0:8@\"NSString\"16\u0000v32@0:8@16@24\u0000v32@0:8@16@\"NSString\"24\u0000@24@0:8@?16\u0000@\"RLMNotificationToken\"24@0:8@?\u003cv@?@\"\u003cRLMCollection\u003e\"@\"RLMCollectionChange\"@\"NSError\"\u003e16\u0000@\"NSNumber\"24@0:8@\"NSString\"16\u0000@\"RLMRealm\"16@0:8\u0000Q40@0:8^{?=Q^@^Q[5Q]}16^@24Q32\u0000v24@0:8@16\u0000v32@0:8@16Q24\u0000v24@0:8Q16\u0000v32@0:8Q16@24\u0000v32@0:8Q16Q24\u0000v36@0:8@16:24B32\u0000v48@0:8@16@24Q32^v40\u0000@\"NSString\"\u0000@\"RLMObjectBase\"\u0000@\"NSMutableArray\"\u0000B\u0000Q24@0:8Q16\u0000{TableView=^^?{Column\u003clong long\u003e=^^?Q{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e={__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=^{StringIndex}}}{BpTree\u003clong long\u003e={unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e={__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=^{Array}}}}}Q{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{BacklinkColumn}{BasicRow\u003cconst realm::Table\u003e={BasicTableRef\u003crealm::Table\u003e=^{Table}}Q^{RowBase}^{RowBase}}{shared_ptr\u003cconst realm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}Q{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^QQ{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=Q}}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^QQ{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=Q}}}{Query={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}^{QueryGroup}{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}}}{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=^Q^Q{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=^Q}}{shared_ptr\u003cconst realm::Descriptor\u003e=^{Descriptor}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{RowIndexes}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}^{TableViewBase}{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e={__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=^{TableViewBase}}}}QQQ{Optional\u003cunsigned long long\u003e=(?=Qc)B}Q}16@0:8\u0000^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}16@0:8\u0000@96@0:8{List={shared_ptr\u003crealm::Realm\u003e=^{Realm}^{__shared_weak_count}}^{ObjectSchema}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}{Handle\u003crealm::_impl::ListNotifier\u003e=^{ListNotifier}^{__shared_weak_count}}}16@72^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}80@88\u0000@32@0:8@16@24\u0000@48@0:8@1624@40\u0000{List=\"m_realm\"{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\"m_object_schema\"^{ObjectSchema}\"m_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_notifier\"{Handle\u003crealm::_impl::ListNotifier\u003e=\"__ptr_\"^{ListNotifier}\"__cntrl_\"^{__shared_weak_count}}}\u0000@\"RLMRealm\"\u0000^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}\u0000{unique_ptr\u003cRLMObservationInfo, std::__1::default_delete\u003cRLMObservationInfo\u003e \u003e=\"__ptr_\"{__compressed_pair\u003cRLMObservationInfo *, std::__1::default_delete\u003cRLMObservationInfo\u003e \u003e=\"__first_\"^{RLMObservationInfo}}}\u0000@32@0:8@16B24B28\u0000@\"RLMTokenModel\"\u0000@32@0:8@16^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}24\u0000Q32@0:8^{?=Q^@^Q[5Q]}16Q24\u0000[16@]\u0000@\"\u003cRLMFastEnumerable\u003e\"\u0000{TableView=\"_vptr$RowIndexes\"^^?\"m_row_indexes\"{Column\u003clong long\u003e=\"_vptr$ColumnBase\"^^?\"m_column_ndx\"Q\"m_search_index\"{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__first_\"^{StringIndex}}}\"m_tree\"{BpTree\u003clong long\u003e=\"m_root\"{unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__first_\"^{Array}}}}}\"m_debug_cookie\"Q\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_linked_column\"^{BacklinkColumn}\"m_linked_row\"{BasicRow\u003cconst realm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"Q\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\"m_linkview_source\"{shared_ptr\u003cconst realm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_distinct_column_source\"Q\"m_distinct_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^Q\"__size_\"Q\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"Q}}}\"m_sorting_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^Q\"__size_\"Q\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"Q}}}\"m_query\"{Query=\"error_code\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"Q\"__size_\"Q\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[23c]}\"__r\"{__raw=\"__words\"[3Q]})}}}\"m_groups\"{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__begin_\"^{QueryGroup}\"__end_\"^{QueryGroup}\"__end_cap_\"{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__first_\"^{QueryGroup}}}\"m_subtable_path\"{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__begin_\"^Q\"__end_\"^Q\"__end_cap_\"{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"^Q}}\"m_current_descriptor\"{shared_ptr\u003cconst realm::Descriptor\u003e=\"__ptr_\"^{Descriptor}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_view\"^{RowIndexes}\"m_source_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_source_table_view\"^{TableViewBase}\"m_owned_source_table_view\"{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__first_\"^{TableViewBase}}}}\"m_start\"Q\"m_end\"Q\"m_limit\"Q\"m_last_seen_version\"{Optional\u003cunsigned long long\u003e=\"\"(?=\"m_value\"Q\"m_null_state\"c)\"m_engaged\"B}\"m_num_detached_refs\"Q}\u0000@48@0:8{NotificationToken={AtomicSharedPtr\u003crealm::_impl::CollectionNotifier, true\u003e={shared_ptr\u003crealm::_impl::CollectionNotifier\u003e=^{CollectionNotifier}^{__shared_weak_count}}}Q}16@40\u0000{NotificationToken=\"m_notifier\"{AtomicSharedPtr\u003crealm::_impl::CollectionNotifier, true\u003e=\"m_ptr\"{shared_ptr\u003crealm::_impl::CollectionNotifier\u003e=\"__ptr_\"^{CollectionNotifier}\"__cntrl_\"^{__shared_weak_count}}}\"m_token\"Q}\u0000@160@0:8{CollectionChangeSet={IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{vector\u003crealm::CollectionChangeSet::Move, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=^{Move}^{Move}{__compressed_pair\u003crealm::CollectionChangeSet::Move *, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=^{Move}}}{vector\u003crealm::IndexSet, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=^{IndexSet}^{IndexSet}{__compressed_pair\u003crealm::IndexSet *, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=^{IndexSet}}}}16\u0000{CollectionChangeSet=\"deletions\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"insertions\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"modifications\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"modifications_new\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"moves\"{vector\u003crealm::CollectionChangeSet::Move, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=\"__begin_\"^{Move}\"__end_\"^{Move}\"__end_cap_\"{__compressed_pair\u003crealm::CollectionChangeSet::Move *, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=\"__first_\"^{Move}}}\"columns\"{vector\u003crealm::IndexSet, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=\"__begin_\"^{IndexSet}\"__end_\"^{IndexSet}\"__end_cap_\"{__compressed_pair\u003crealm::IndexSet *, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=\"__first_\"^{IndexSet}}}}\u0000@\"RLMArray\"\u0000@40@0:8@16@24^{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}32\u0000v32@0:8@16@?24\u0000v24@0:8@?16\u0000v40@0:8@16@24@32\u0000^{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}\u0000@\"NSMutableDictionary\"\u0000@32@0:8@16Q24\u0000v48@0:8Q16@24@32@?40\u0000v56@0:8Q16@24@32d40@?48\u0000v64@0:8Q16@24@32@40d48@?56\u0000B40@0:8@16@24^@32\u0000@40@0:8@16@24[1{__va_list_tag=II^v^v}]32\u0000@24@0:8^{_NSZone=}16\u0000{BasicRow\u003crealm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"Q\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\u0000#\u0000{Object=\"m_realm\"{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\"m_object_schema\"^{ObjectSchema}\"m_row\"{BasicRow\u003crealm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"Q\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\"m_notifier\"{Handle\u003crealm::_impl::ObjectNotifier\u003e=\"__ptr_\"^{ObjectNotifier}\"__cntrl_\"^{__shared_weak_count}}}\u0000@\u0000#20@0:8B16\u0000^{RLMObservationInfo=^{RLMObservationInfo}^{RLMObservationInfo}{BasicRow\u003crealm::Table\u003e={BasicTableRef\u003crealm::Table\u003e=^{Table}}Q^{RowBase}^{RowBase}}^{RLMClassInfo}@BQ@@@}\u0000@\"RLMObjectSchema\"\u0000@24@0:8#16\u0000@28@0:8#16B24\u0000@24@0:8r^{ObjectSchema={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}16\u0000@40@0:8@16#24@32\u0000{ObjectSchema={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}16@0:8\u0000v20@0:8B16\u0000v24@0:8#16\u0000@\"NSArray\"\u0000@\"RLMProperty\"\u0000@\"NSDictionary\"\u0000q16@0:8\u0000@24@0:8q16\u0000@24@0:8{unique_ptr\u003crealm::PermissionResults, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e={__compressed_pair\u003crealm::PermissionResults *, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e=^{PermissionResults}}}16\u0000q24@0:8@16\u0000@28@0:8Q16B24\u0000{unique_ptr\u003crealm::PermissionResults, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::PermissionResults *, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e=\"__first_\"^{PermissionResults}}}\u0000v24@0:8:16\u0000@24@0:8r^{Property={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}C{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBBQ}16\u0000@52@0:8@16i24@28@36B44B48\u0000v40@0:8^{objc_property=}16^B24^@32\u0000@52@0:8@16B24@28^{objc_property=}36@44\u0000@44@0:8@16B24@28^{objc_property=}36\u0000@40@0:8@16^{objc_ivar=}24@32\u0000@40@0:8@16B24^{objc_ivar=}28i36\u0000@48@0:8@16^{objc_ivar=}24@32@40\u0000{Property={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}C{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBBQ}16@0:8\u0000i16@0:8\u0000v20@0:8i16\u0000^{objc_ivar=}16@0:8\u0000v24@0:8^{objc_ivar=}16\u0000:16@0:8\u0000i\u0000^{objc_ivar=}\u0000Q\u0000:\u0000@32@0:8#16@24\u0000@?\u0000v40@0:8@16@24@?32\u0000@40@0:8{shared_ptr\u003crealm::Realm\u003e=^{Realm}^{__shared_weak_count}}16@32\u0000@32@0:8@16^@24\u0000Q40@0:8@16@24^@32\u0000B32@0:8@16^@24\u0000^{Group=^^?{SlabAlloc=^^?Q^{Replication}iQ{atomic\u003cunsigned long long\u003e=AQ}{shared_ptr\u003crealm::SlabAlloc::MappedFile\u003e=^{MappedFile}^{__shared_weak_count}}{unique_ptr\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e [], std::__1::default_delete\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e []\u003e \u003e={__compressed_pair\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e *, std::__1::default_delete\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e []\u003e \u003e=^{shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e}}}Q*QQi{unique_ptr\u003cunsigned long [], std::__1::default_delete\u003cunsigned long []\u003e \u003e={__compressed_pair\u003cunsigned long *, std::__1::default_delete\u003cunsigned long []\u003e \u003e=^Q}}QiBi{vector\u003crealm::SlabAlloc::Slab, std::__1::allocator\u003crealm::SlabAlloc::Slab\u003e \u003e=^{Slab}^{Slab}{__compressed_pair\u003crealm::SlabAlloc::Slab *, std::__1::allocator\u003crealm::SlabAlloc::Slab\u003e \u003e=^{Slab}}}{vector\u003crealm::SlabAlloc::Chunk, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::SlabAlloc::Chunk *, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}}}{vector\u003crealm::SlabAlloc::Chunk, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::SlabAlloc::Chunk *, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}}}B[256{hash_entry=Q*Q}]Q}{Array=^^?^{VTable}*qqQQ^{Allocator}Q^{ArrayParent}QCBBB}{ArrayInteger=^^?^{VTable}*qqQQ^{Allocator}Q^{ArrayParent}QCBBB}{ArrayString=^^?^{VTable}*qqQQ^{Allocator}Q^{ArrayParent}QCBBBB}{vector\u003crealm::Table *, std::__1::allocator\u003crealm::Table *\u003e \u003e=^^{Table}^^{Table}{__compressed_pair\u003crealm::Table **, std::__1::allocator\u003crealm::Table *\u003e \u003e=^^{Table}}}BB{function\u003cvoid (const realm::Group::CascadeNotification \u0026)\u003e={type=[24C]}^{__base\u003cvoid (const realm::Group::CascadeNotification \u0026)\u003e}}{function\u003cvoid ()\u003e={type=[24C]}^{__base\u003cvoid ()\u003e}}}16@0:8\u0000B24@0:8^@16\u0000B32@0:8@?16^@24\u0000{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\u0000{RLMSchemaInfo=\"m_objects\"{unordered_map\u003cNSString *, RLMClassInfo, std::__1::hash\u003cNSString *\u003e, std::__1::equal_to\u003cNSString *\u003e, std::__1::allocator\u003cstd::__1::pair\u003cNSString *const, RLMClassInfo\u003e \u003e \u003e=\"__table_\"{__hash_table\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::__unordered_map_hasher\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::hash\u003cNSString *\u003e, true\u003e, std::__1::__unordered_map_equal\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::equal_to\u003cNSString *\u003e, true\u003e, std::__1::allocator\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e \u003e \u003e=\"__bucket_list_\"{unique_ptr\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *[], std::__1::__bucket_list_deallocator\u003cstd::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e \u003e=\"__ptr_\"{__compressed_pair\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e **, std::__1::__bucket_list_deallocator\u003cstd::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e \u003e=\"__first_\"^^{__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e}\"__second_\"{__bucket_list_deallocator\u003cstd::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e=\"__data_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e=\"__first_\"Q}}}}\"__p1_\"{__compressed_pair\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e, std::__1::allocator\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e \u003e \u003e=\"__first_\"{__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e=\"__next_\"^{__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e}}}\"__p2_\"{__compressed_pair\u003cunsigned long, std::__1::__unordered_map_hasher\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::hash\u003cNSString *\u003e, true\u003e \u003e=\"__first_\"Q}\"__p3_\"{__compressed_pair\u003cfloat, std::__1::__unordered_map_equal\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::equal_to\u003cNSString *\u003e, true\u003e \u003e=\"__first_\"f}}}}\u0000@\"NSHashTable\"\u0000@\"RLMSchema\"\u0000^{Config={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{BinaryData=*Q}{vector\u003cchar, std::__1::allocator\u003cchar\u003e \u003e=**{__compressed_pair\u003cchar *, std::__1::allocator\u003cchar\u003e \u003e=*}}BC{Optional\u003crealm::Schema\u003e=(?={Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}c)B}Q{function\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e={type=[24C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e}}{function\u003cbool (unsigned long long, unsigned long long)\u003e={type=[24C]}^{__base\u003cbool (unsigned long long, unsigned long long)\u003e}}BBB{Optional\u003cunsigned long\u003e=(?=Qc)B}{shared_ptr\u003crealm::SyncConfig\u003e=^{SyncConfig}^{__shared_weak_count}}B}16@0:8\u0000C16@0:8\u0000v20@0:8C16\u0000{Config=\"path\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"Q\"__size_\"Q\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[23c]}\"__r\"{__raw=\"__words\"[3Q]})}}}\"realm_data\"{BinaryData=\"m_data\"*\"m_size\"Q}\"encryption_key\"{vector\u003cchar, std::__1::allocator\u003cchar\u003e \u003e=\"__begin_\"*\"__end_\"*\"__end_cap_\"{__compressed_pair\u003cchar *, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"*}}\"in_memory\"B\"schema_mode\"C\"schema\"{Optional\u003crealm::Schema\u003e=\"\"(?=\"m_value\"{Schema=\"__begin_\"^{ObjectSchema}\"__end_\"^{ObjectSchema}\"__end_cap_\"{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=\"__first_\"^{ObjectSchema}}}\"m_null_state\"c)\"m_engaged\"B}\"schema_version\"Q\"migration_function\"{function\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e=\"__buf_\"{type=\"__lx\"[24C]}\"__f_\"^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e}}\"should_compact_on_launch_function\"{function\u003cbool (unsigned long long, unsigned long long)\u003e=\"__buf_\"{type=\"__lx\"[24C]}\"__f_\"^{__base\u003cbool (unsigned long long, unsigned long long)\u003e}}\"cache\"B\"disable_format_upgrade\"B\"automatic_change_notifications\"B\"execution_context\"{Optional\u003cunsigned long\u003e=\"\"(?=\"m_value\"Q\"m_null_state\"c)\"m_engaged\"B}\"sync_config\"{shared_ptr\u003crealm::SyncConfig\u003e=\"__ptr_\"^{SyncConfig}\"__cntrl_\"^{__shared_weak_count}}\"force_sync_history\"B}\u0000@736@0:8^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}16{Results={shared_ptr\u003crealm::Realm\u003e=^{Realm}^{__shared_weak_count}}^{ObjectSchema}{Query={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}^{QueryGroup}{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}}}{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=^Q^Q{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=^Q}}{shared_ptr\u003cconst realm::Descriptor\u003e=^{Descriptor}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{RowIndexes}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}^{TableViewBase}{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e={__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=^{TableViewBase}}}}{TableView=^^?{Column\u003clong long\u003e=^^?Q{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e={__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=^{StringIndex}}}{BpTree\u003clong long\u003e={unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e={__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=^{Array}}}}}Q{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{BacklinkColumn}{BasicRow\u003cconst realm::Table\u003e={BasicTableRef\u003crealm::Table\u003e=^{Table}}Q^{RowBase}^{RowBase}}{shared_ptr\u003cconst realm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}Q{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^QQ{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=Q}}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^QQ{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=Q}}}{Query={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}^{QueryGroup}{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}}}{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=^Q^Q{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=^Q}}{shared_ptr\u003cconst realm::Descriptor\u003e=^{Descriptor}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{RowIndexes}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}^{TableViewBase}{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e={__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=^{TableViewBase}}}}QQQ{Optional\u003cunsigned long long\u003e=(?=Qc)B}Q}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^QQ{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=Q}}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^QQ{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=Q}}}{Handle\u003crealm::_impl::ResultsNotifier\u003e=^{ResultsNotifier}^{__shared_weak_count}}iiBB}24\u0000@52@0:8@1624@40B48\u0000{Results=\"m_realm\"{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\"m_object_schema\"^{ObjectSchema}\"m_query\"{Query=\"error_code\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"Q\"__size_\"Q\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[23c]}\"__r\"{__raw=\"__words\"[3Q]})}}}\"m_groups\"{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__begin_\"^{QueryGroup}\"__end_\"^{QueryGroup}\"__end_cap_\"{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__first_\"^{QueryGroup}}}\"m_subtable_path\"{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__begin_\"^Q\"__end_\"^Q\"__end_cap_\"{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"^Q}}\"m_current_descriptor\"{shared_ptr\u003cconst realm::Descriptor\u003e=\"__ptr_\"^{Descriptor}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_view\"^{RowIndexes}\"m_source_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_source_table_view\"^{TableViewBase}\"m_owned_source_table_view\"{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__first_\"^{TableViewBase}}}}\"m_table_view\"{TableView=\"_vptr$RowIndexes\"^^?\"m_row_indexes\"{Column\u003clong long\u003e=\"_vptr$ColumnBase\"^^?\"m_column_ndx\"Q\"m_search_index\"{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__first_\"^{StringIndex}}}\"m_tree\"{BpTree\u003clong long\u003e=\"m_root\"{unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__first_\"^{Array}}}}}\"m_debug_cookie\"Q\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_linked_column\"^{BacklinkColumn}\"m_linked_row\"{BasicRow\u003cconst realm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"Q\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\"m_linkview_source\"{shared_ptr\u003cconst realm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_distinct_column_source\"Q\"m_distinct_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^Q\"__size_\"Q\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"Q}}}\"m_sorting_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^Q\"__size_\"Q\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"Q}}}\"m_query\"{Query=\"error_code\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"Q\"__size_\"Q\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[23c]}\"__r\"{__raw=\"__words\"[3Q]})}}}\"m_groups\"{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__begin_\"^{QueryGroup}\"__end_\"^{QueryGroup}\"__end_cap_\"{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__first_\"^{QueryGroup}}}\"m_subtable_path\"{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__begin_\"^Q\"__end_\"^Q\"__end_cap_\"{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"^Q}}\"m_current_descriptor\"{shared_ptr\u003cconst realm::Descriptor\u003e=\"__ptr_\"^{Descriptor}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_view\"^{RowIndexes}\"m_source_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_source_table_view\"^{TableViewBase}\"m_owned_source_table_view\"{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__first_\"^{TableViewBase}}}}\"m_start\"Q\"m_end\"Q\"m_limit\"Q\"m_last_seen_version\"{Optional\u003cunsigned long long\u003e=\"\"(?=\"m_value\"Q\"m_null_state\"c)\"m_engaged\"B}\"m_num_detached_refs\"Q}\"m_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_sort\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^Q\"__size_\"Q\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"Q}}}\"m_distinct\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^Q\"__size_\"Q\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"Q}}}\"m_notifier\"{Handle\u003crealm::_impl::ResultsNotifier\u003e=\"__ptr_\"^{ResultsNotifier}\"__cntrl_\"^{__shared_weak_count}}\"m_mode\"i\"m_update_policy\"i\"m_has_used_table_view\"B\"m_wants_background_updates\"B}\u0000@24@0:8r^{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}16\u0000#24@0:8@16\u0000{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}16@0:8\u0000{Schema=\"__begin_\"^{ObjectSchema}\"__end_\"^{ObjectSchema}\"__end_cap_\"{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=\"__first_\"^{ObjectSchema}}}\u0000@288@0:8{SyncConfig={shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i{function\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e={type=[24C]}^{__base\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e}}{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[24C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}{shared_ptr\u003crealm::sync::ClientHistory::ChangesetCooker\u003e=^{ChangesetCooker}^{__shared_weak_count}}{Optional\u003cstd::__1::array\u003cchar, 64\u003e \u003e=(?={array\u003cchar, 64\u003e=[64c]}c)B}B{Optional\u003cstd::__1::basic_string\u003cchar\u003e \u003e=(?={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}c)B}}16\u0000{SyncConfig={shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i{function\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e={type=[24C]}^{__base\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e}}{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[24C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}{shared_ptr\u003crealm::sync::ClientHistory::ChangesetCooker\u003e=^{ChangesetCooker}^{__shared_weak_count}}{Optional\u003cstd::__1::array\u003cchar, 64\u003e \u003e=(?={array\u003cchar, 64\u003e=[64c]}c)B}B{Optional\u003cstd::__1::basic_string\u003cchar\u003e \u003e=(?={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}c)B}}16@0:8\u0000@96@0:8@16@24@32Q40{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[24C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}48\u0000{unique_ptr\u003crealm::SyncConfig, std::__1::default_delete\u003crealm::SyncConfig\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::SyncConfig *, std::__1::default_delete\u003crealm::SyncConfig\u003e \u003e=\"__first_\"^{SyncConfig}}}\u0000@\"NSURL\"\u0000@40@0:8@16@24Q32\u0000@144@0:8{Permission={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i{Condition=i{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{pair\u003cstd::__1::basic_string\u003cchar\u003e, std::__1::basic_string\u003cchar\u003e \u003e={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}}{Timestamp=qiB}}16\u0000{Permission={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i{Condition=i{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{pair\u003cstd::__1::basic_string\u003cchar\u003e, std::__1::basic_string\u003cchar\u003e \u003e={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}}{Timestamp=qiB}}16@0:8\u0000{Optional\u003crealm::Permission\u003e=\"\"(?=\"m_value\"{Permission=\"path\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"Q\"__size_\"Q\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[23c]}\"__r\"{__raw=\"__words\"[3Q]})}}}\"access\"i\"condition\"{Condition=\"type\"i\"user_id\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"Q\"__size_\"Q\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[23c]}\"__r\"{__raw=\"__words\"[3Q]})}}}\"key_value\"{pair\u003cstd::__1::basic_string\u003cchar\u003e, std::__1::basic_string\u003cchar\u003e \u003e=\"first\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"Q\"__size_\"Q\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[23c]}\"__r\"{__raw=\"__words\"[3Q]})}}}\"second\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"Q\"__size_\"Q\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[23c]}\"__r\"{__raw=\"__words\"[3Q]})}}}}}\"updated_at\"{Timestamp=\"m_seconds\"q\"m_nanoseconds\"i\"m_is_null\"B}}\"m_null_state\"c)\"m_engaged\"B}\u0000@\"NSDate\"\u0000@36@0:8@16@24B32\u0000@40@0:8@16@24@32\u0000v24@0:8q16\u0000q\u0000v56@0:8i16@20B28@32@40Q48\u0000@\"NSNumber\"\u0000@56@0:8@16@24@32@40@48\u0000@\"NSNumber\u003cRLMInt\u003e\"\u0000@\"NSNumber\u003cRLMBool\u003e\"\u0000@44@0:8@16@24B32B36B40\u0000@40@0:8Q16{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}24\u0000{weak_ptr\u003crealm::SyncSession\u003e=\"__ptr_\"^{SyncSession}\"__cntrl_\"^{__shared_weak_count}}\u0000@32@0:8{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}16\u0000B32@0:8@16@?24\u0000@40@0:8Q16Q24@?32\u0000@56@0:8@16@24{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}32@?48\u0000B32@0:8@16@24\u0000{shared_ptr\u003crealm::SyncSession\u003e=\"__ptr_\"^{SyncSession}\"__cntrl_\"^{__shared_weak_count}}\u0000@\"RLMSyncUser\"\u0000@\"NSTimer\"\u0000v48@0:8@16@24d32@?40\u0000v56@0:8@16@24@32d40@?48\u0000@32@0:8{shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}16\u0000@24@0:8^@16\u0000v48@0:8r^{SyncConfig={shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i{function\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e={type=[24C]}^{__base\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e}}{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[24C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}{shared_ptr\u003crealm::sync::ClientHistory::ChangesetCooker\u003e=^{ChangesetCooker}^{__shared_weak_count}}{Optional\u003cstd::__1::array\u003cchar, 64\u003e \u003e=(?={array\u003cchar, 64\u003e=[64c]}c)B}B{Optional\u003cstd::__1::basic_string\u003cchar\u003e \u003e=(?={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}c)B}}16{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}24@?40\u0000{shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}16@0:8\u0000{shared_ptr\u003crealm::SyncUser\u003e=\"__ptr_\"^{SyncUser}\"__cntrl_\"^{__shared_weak_count}}\u0000{unique_ptr\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e, std::__1::default_delete\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e \u003e \u003e=\"__ptr_\"{__compressed_pair\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e *, std::__1::default_delete\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e \u003e \u003e=\"__first_\"^{function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e}}}\u0000{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=\"__first_\"^{ThreadSafeReferenceBase}}}\u0000d16@0:8\u0000v24@0:8d16\u0000d\u0000@\"RLMTokenDataModel\"\u0000v@:\u0000\u0000\u003c\u0000%\u0000@\u0000 \u0000\u0014  \u0000%\u0000l\u0000u\u0000 \u0000t\u0000o\u0000t\u0000a\u0000l\u0000 \u0000b\u0000y\u0000t\u0000e\u0000s\u0000\u003e\u0000\u0000\u0000S\u0000U\u0000B\u0000Q\u0000U\u0000E\u0000R\u0000Y\u0000(\u0000\u0026 )\u0000.\u0000@\u0000c\u0000o\u0000u\u0000n\u0000t\u0000 \u0000i\u0000s\u0000 \u0000o\u0000n\u0000l\u0000y\u0000 \u0000s\u0000u\u0000p\u0000p\u0000o\u0000r\u0000t\u0000e\u0000d\u0000 \u0000w\u0000h\u0000e\u0000n\u0000 \u0000c\u0000o\u0000m\u0000p\u0000a\u0000r\u0000e\u0000d\u0000 \u0000w\u0000i\u0000t\u0000h\u0000 \u0000a\u0000 \u0000c\u0000o\u0000n\u0000s\u0000t\u0000a\u0000n\u0000t\u0000 \u0000n\u0000u\u0000m\u0000b\u0000e\u0000r\u0000.\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001c\u0000\u0000\u0000\u000f\u0000\u0000\u0000X\u0000\u0000\u0000\u0002\u0000\u0000\u0000`\u0000\u0000\u0000\t\u0000\u0000\u0000\ufffdX\u0005Q\u0000\u0000\u0000\u0001\u0001\u0000\u0001\u0001\ufffdX\u0005\u0001!\u0000\u0002\u0001\u0011\u000b\u0004Qa\u0001\u0003Q!\u0000\u0002Qa\u0001\u0003\u0001\u0011\u000b\u0004\u0001\u0001\u0000\u0001Q\u0000\u0000\u0000Q\ufffdX\u0005a\u0011\u000b\u0004a!\u0000\u0002aX\ufffd?\u0000`\ufffd?\u0000@\u000f\u0000\u0000\ufffdm\u0000\u0000\ufffd\u0000\u0000\u0000\u0018G\u0002\u0000Tu\u0000\u0000\ufffd\u0006\u0000\u0000\ufffd\ufffd\u0007\u0000T\ufffd\u0000\u0000\ufffd\u0016\u0000\u0000\ufffd\ufffd\u000b\u0000T\ufffd\u0000\u0000d\u0026\u0000\u0000\u003cr\u0010\u0000T\ufffd\u0000\u0000\\4\u0000\u00000\ufffd\u001b\u0000T\ufffd\u0000\u0000\ufffdC\u0000\u0000\ufffdf\u0026\u0000T\ufffd\u0000\u0000DT\u0000\u0000PY0\u0000\ufffd\ufffd\u0000\u0000\ufffd`\u0000\u0000kE6\u0000\u0000\u0000\u0000\u0000\ufffdm\u0000\u0000@\u000f\u0000\u0000\ufffd\\6\u0000Z\u0011\u0000\u0000\u0014]6\u0000\ufffd\u001f\u0000\u0000@]6\u0000\ufffd*\u0000\u0000\ufffd]6\u0000z1\u0000\u0000\ufffd]6\u0000\ufffd1\u0000\u0000\ufffd]6\u0000T4\u0000\u0000\u000c^6\u0000\u0000G\u0000\u0000\ufffd_6\u00008H\u0000\u0000\ufffd_6\u0000\ufffd_\u0000\u0000\ufffd_6\u0000\ufffd\ufffd\u0000\u0000\ufffd_6\u0000(\ufffd\u0000\u0000 `6\u0000\ufffd\ufffd\u0000\u0000@`6\u0000\ufffd\ufffd\u0000\u0000l`6\u0000\u0010\ufffd\u0000\u0000\ufffd`6\u0000j\ufffd\u0000\u0000\ufffd`6\u0000\ufffd\ufffd\u0000\u0000\ufffd`6\u0000ޫ\u0000\u0000\ufffd`6\u0000\ufffd\ufffd\u0000\u0000\u0010a6\u0000",
   "column": 12892,
   "description": "File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/Realm/Realm.framework/Realm (16616:12892)",
   "recomendation": "Credentials must not be stored in the Git code or repository. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 43330,
   "class": "Realm (43330:12772)",
   "vul_id": "6fa1e4fe4fc1e74db2e55c402f84c4f8",
   "method": "\u0000RLMSyncPermissionOffer\u0000\u0018\u0000RLMSyncPermissionOfferResponse\u0000\u0007\u0000RLMProgressNotificationToken\u0000RLMSyncSession\u0000RLMSyncSessionRefreshHandle\u0000T\u0000A\u0000RLMSyncUser\u00002\u0000RealmSync\u0000RLMThreadSafeReference\u0000RLMTokenDataModel\u0000RLMTokenModel\u0000__ARCLite__\u0000__ARCLiteIndexedSubscripting__\u0000__ARCLiteKeyedSubscripting__\u0000@?8@0:4\u0000@8@0:4\u0000v8@0:4\u0000{unique_ptr\u003cid [], std::__1::default_delete\u003cid []\u003e \u003e=\"__ptr_\"{__compressed_pair\u003c__strong id *, std::__1::default_delete\u003cid []\u003e \u003e=\"__first_\"^@}}\u0000@20@0:4{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e={__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=^{ThreadSafeReferenceBase}}}8@12@16\u0000{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e={__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=^{ThreadSafeReferenceBase}}}8@0:4\u0000@20@0:4{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e={__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=^{ThreadSafeReferenceBase}}}8@12@\"RLMRealm\"16\u0000c12@0:4@8\u0000#8@0:4\u0000@12@0:4:8\u0000@16@0:4:8@12\u0000@20@0:4:8@12@16\u0000c8@0:4\u0000c12@0:4#8\u0000c12@0:4@\"Protocol\"8\u0000c12@0:4:8\u0000Vv8@0:4\u0000I8@0:4\u0000^{_NSZone=}8@0:4\u0000@\"NSString\"8@0:4\u0000@12@0:4I8\u0000I12@0:4@8\u0000I12@0:4@\"RLMObject\"8\u0000I12@0:4@\"NSString\"8\u0000I16@0:4@8^v12\u0000I16@0:4@\"NSString\"8^v12\u0000I12@0:4@\"NSPredicate\"8\u0000@12@0:4@8\u0000@\"RLMResults\"12@0:4@\"NSString\"8\u0000@16@0:4@8^v12\u0000@\"RLMResults\"16@0:4@\"NSString\"8^v12\u0000@\"RLMResults\"12@0:4@\"NSPredicate\"8\u0000@16@0:4@8c12\u0000@\"RLMResults\"16@0:4@\"NSString\"8c12\u0000@\"RLMResults\"12@0:4@\"NSArray\"8\u0000@12@0:4@\"NSString\"8\u0000v16@0:4@8@12\u0000v16@0:4@8@\"NSString\"12\u0000@12@0:4@?8\u0000@\"RLMNotificationToken\"12@0:4@?\u003cv@?@\"\u003cRLMCollection\u003e\"@\"RLMCollectionChange\"@\"NSError\"\u003e8\u0000@\"NSNumber\"12@0:4@\"NSString\"8\u0000@\"RLMRealm\"8@0:4\u0000I20@0:4^{?=L^@^L[5L]}8^@12I16\u0000v12@0:4@8\u0000v16@0:4@8I12\u0000v12@0:4I8\u0000v16@0:4I8@12\u0000v16@0:4I8I12\u0000v20@0:4@8:12B16\u0000v24@0:4@8@12I16^v20\u0000@\"NSString\"\u0000@\"RLMObjectBase\"\u0000@\"NSMutableArray\"\u0000c\u0000I12@0:4I8\u0000{TableView=^^?{Column\u003clong long\u003e=^^?I{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e={__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=^{StringIndex}}}{BpTree\u003clong long\u003e={unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e={__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=^{Array}}}}}Q{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{BacklinkColumn}{BasicRow\u003cconst realm::Table\u003e={BasicTableRef\u003crealm::Table\u003e=^{Table}}I^{RowBase}^{RowBase}}{shared_ptr\u003cconst realm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}I{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^LI{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=L}}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^LI{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=L}}}{Query={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}^{QueryGroup}{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}}}{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=^L^L{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=^L}}{shared_ptr\u003cconst realm::Descriptor\u003e=^{Descriptor}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{RowIndexes}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}^{TableViewBase}{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e={__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=^{TableViewBase}}}}III{Optional\u003cunsigned long long\u003e=(?=Qc)B}I}8@0:4\u0000^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}8@0:4\u0000@48@0:4{List={shared_ptr\u003crealm::Realm\u003e=^{Realm}^{__shared_weak_count}}^{ObjectSchema}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}{Handle\u003crealm::_impl::ListNotifier\u003e=^{ListNotifier}^{__shared_weak_count}}}8@36^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}40@44\u0000@16@0:4@8@12\u0000@24@0:4@812@20\u0000{List=\"m_realm\"{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\"m_object_schema\"^{ObjectSchema}\"m_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_notifier\"{Handle\u003crealm::_impl::ListNotifier\u003e=\"__ptr_\"^{ListNotifier}\"__cntrl_\"^{__shared_weak_count}}}\u0000@\"RLMRealm\"\u0000^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}\u0000{unique_ptr\u003cRLMObservationInfo, std::__1::default_delete\u003cRLMObservationInfo\u003e \u003e=\"__ptr_\"{__compressed_pair\u003cRLMObservationInfo *, std::__1::default_delete\u003cRLMObservationInfo\u003e \u003e=\"__first_\"^{RLMObservationInfo}}}\u0000@20@0:4@8c12c16\u0000@\"RLMTokenModel\"\u0000@16@0:4@8^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}12\u0000I16@0:4^{?=L^@^L[5L]}8I12\u0000[16@]\u0000@\"\u003cRLMFastEnumerable\u003e\"\u0000{TableView=\"_vptr$RowIndexes\"^^?\"m_row_indexes\"{Column\u003clong long\u003e=\"_vptr$ColumnBase\"^^?\"m_column_ndx\"I\"m_search_index\"{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__first_\"^{StringIndex}}}\"m_tree\"{BpTree\u003clong long\u003e=\"m_root\"{unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__first_\"^{Array}}}}}\"m_debug_cookie\"Q\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_linked_column\"^{BacklinkColumn}\"m_linked_row\"{BasicRow\u003cconst realm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"I\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\"m_linkview_source\"{shared_ptr\u003cconst realm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_distinct_column_source\"I\"m_distinct_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^L\"__size_\"I\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"L}}}\"m_sorting_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^L\"__size_\"I\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"L}}}\"m_query\"{Query=\"error_code\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}\"m_groups\"{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__begin_\"^{QueryGroup}\"__end_\"^{QueryGroup}\"__end_cap_\"{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__first_\"^{QueryGroup}}}\"m_subtable_path\"{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__begin_\"^L\"__end_\"^L\"__end_cap_\"{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"^L}}\"m_current_descriptor\"{shared_ptr\u003cconst realm::Descriptor\u003e=\"__ptr_\"^{Descriptor}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_view\"^{RowIndexes}\"m_source_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_source_table_view\"^{TableViewBase}\"m_owned_source_table_view\"{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__first_\"^{TableViewBase}}}}\"m_start\"I\"m_end\"I\"m_limit\"I\"m_last_seen_version\"{Optional\u003cunsigned long long\u003e=\"\"(?=\"m_value\"Q\"m_null_state\"c)\"m_engaged\"B}\"m_num_detached_refs\"I}\u0000@24@0:4{NotificationToken={AtomicSharedPtr\u003crealm::_impl::CollectionNotifier, true\u003e={shared_ptr\u003crealm::_impl::CollectionNotifier\u003e=^{CollectionNotifier}^{__shared_weak_count}}}I}8@20\u0000{NotificationToken=\"m_notifier\"{AtomicSharedPtr\u003crealm::_impl::CollectionNotifier, true\u003e=\"m_ptr\"{shared_ptr\u003crealm::_impl::CollectionNotifier\u003e=\"__ptr_\"^{CollectionNotifier}\"__cntrl_\"^{__shared_weak_count}}}\"m_token\"I}\u0000@80@0:4{CollectionChangeSet={IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{vector\u003crealm::CollectionChangeSet::Move, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=^{Move}^{Move}{__compressed_pair\u003crealm::CollectionChangeSet::Move *, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=^{Move}}}{vector\u003crealm::IndexSet, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=^{IndexSet}^{IndexSet}{__compressed_pair\u003crealm::IndexSet *, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=^{IndexSet}}}}8\u0000{CollectionChangeSet=\"deletions\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"insertions\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"modifications\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"modifications_new\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"moves\"{vector\u003crealm::CollectionChangeSet::Move, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=\"__begin_\"^{Move}\"__end_\"^{Move}\"__end_cap_\"{__compressed_pair\u003crealm::CollectionChangeSet::Move *, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=\"__first_\"^{Move}}}\"columns\"{vector\u003crealm::IndexSet, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=\"__begin_\"^{IndexSet}\"__end_\"^{IndexSet}\"__end_cap_\"{__compressed_pair\u003crealm::IndexSet *, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=\"__first_\"^{IndexSet}}}}\u0000@\"RLMArray\"\u0000@20@0:4@8@12^{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}16\u0000v16@0:4@8@?12\u0000v12@0:4@?8\u0000v20@0:4@8@12@16\u0000^{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}\u0000@\"NSMutableDictionary\"\u0000@16@0:4@8I12\u0000v24@0:4I8@12@16@?20\u0000v32@0:4I8@12@16d20@?28\u0000v36@0:4I8@12@16@20d24@?32\u0000c20@0:4@8@12^@16\u0000@20@0:4@8@12^v16\u0000@12@0:4^{_NSZone=}8\u0000{BasicRow\u003crealm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"I\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\u0000#\u0000{Object=\"m_realm\"{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\"m_object_schema\"^{ObjectSchema}\"m_row\"{BasicRow\u003crealm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"I\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\"m_notifier\"{Handle\u003crealm::_impl::ObjectNotifier\u003e=\"__ptr_\"^{ObjectNotifier}\"__cntrl_\"^{__shared_weak_count}}}\u0000@\u0000#12@0:4c8\u0000^{RLMObservationInfo=^{RLMObservationInfo}^{RLMObservationInfo}{BasicRow\u003crealm::Table\u003e={BasicTableRef\u003crealm::Table\u003e=^{Table}}I^{RowBase}^{RowBase}}^{RLMClassInfo}@BI@@@}\u0000@\"RLMObjectSchema\"\u0000@12@0:4#8\u0000@16@0:4#8B12\u0000@12@0:4r^{ObjectSchema={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}8\u0000@20@0:4@8#12@16\u0000{ObjectSchema={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}8@0:4\u0000B8@0:4\u0000v12@0:4B8\u0000v12@0:4#8\u0000B\u0000@\"NSArray\"\u0000@\"RLMProperty\"\u0000@\"NSDictionary\"\u0000i8@0:4\u0000@12@0:4i8\u0000@12@0:4{unique_ptr\u003crealm::PermissionResults, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e={__compressed_pair\u003crealm::PermissionResults *, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e=^{PermissionResults}}}8\u0000i12@0:4@8\u0000@16@0:4I8c12\u0000{unique_ptr\u003crealm::PermissionResults, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::PermissionResults *, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e=\"__first_\"^{PermissionResults}}}\u0000v12@0:4:8\u0000@12@0:4r^{Property={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}C{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBBI}8\u0000@32@0:4@8i12@16@20c24c28\u0000v20@0:4^{objc_property=}8^B12^@16\u0000@28@0:4@8c12@16^{objc_property=}20@24\u0000@24@0:4@8c12@16^{objc_property=}20\u0000@20@0:4@8^{objc_ivar=}12@16\u0000@24@0:4@8c12^{objc_ivar=}16i20\u0000@24@0:4@8^{objc_ivar=}12@16@20\u0000{Property={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}C{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBBI}8@0:4\u0000v12@0:4i8\u0000v12@0:4c8\u0000^{objc_ivar=}8@0:4\u0000v12@0:4^{objc_ivar=}8\u0000:8@0:4\u0000i\u0000^{objc_ivar=}\u0000I\u0000:\u0000@16@0:4#8@12\u0000@?\u0000v20@0:4@8@12@?16\u0000@20@0:4{shared_ptr\u003crealm::Realm\u003e=^{Realm}^{__shared_weak_count}}8@16\u0000@16@0:4@8^@12\u0000Q20@0:4@8@12^@16\u0000c16@0:4@8^@12\u0000^{Group=^^?{SlabAlloc=^^?I^{Replication}iI{atomic\u003cunsigned long long\u003e=AQ}{shared_ptr\u003crealm::SlabAlloc::MappedFile\u003e=^{MappedFile}^{__shared_weak_count}}{unique_ptr\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e [], std::__1::default_delete\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e []\u003e \u003e={__compressed_pair\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e *, std::__1::default_delete\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e []\u003e \u003e=^{shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e}}}I*IIi{unique_ptr\u003cunsigned long [], std::__1::default_delete\u003cunsigned long []\u003e \u003e={__compressed_pair\u003cunsigned long *, std::__1::default_delete\u003cunsigned long []\u003e \u003e=^L}}IiBi{vector\u003crealm::SlabAlloc::Slab, std::__1::allocator\u003crealm::SlabAlloc::Slab\u003e \u003e=^{Slab}^{Slab}{__compressed_pair\u003crealm::SlabAlloc::Slab *, std::__1::allocator\u003crealm::SlabAlloc::Slab\u003e \u003e=^{Slab}}}{vector\u003crealm::SlabAlloc::Chunk, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::SlabAlloc::Chunk *, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}}}{vector\u003crealm::SlabAlloc::Chunk, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::SlabAlloc::Chunk *, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}}}B[256{hash_entry=I*I}]I}{Array=^^?^{VTable}*qqII^{Allocator}I^{ArrayParent}ICBBB}{ArrayInteger=^^?^{VTable}*qqII^{Allocator}I^{ArrayParent}ICBBB}{ArrayString=^^?^{VTable}*qqII^{Allocator}I^{ArrayParent}ICBBBB}{vector\u003crealm::Table *, std::__1::allocator\u003crealm::Table *\u003e \u003e=^^{Table}^^{Table}{__compressed_pair\u003crealm::Table **, std::__1::allocator\u003crealm::Table *\u003e \u003e=^^{Table}}}BB{function\u003cvoid (const realm::Group::CascadeNotification \u0026)\u003e={type=[12C]}^{__base\u003cvoid (const realm::Group::CascadeNotification \u0026)\u003e}}{function\u003cvoid ()\u003e={type=[12C]}^{__base\u003cvoid ()\u003e}}}8@0:4\u0000c12@0:4^@8\u0000c16@0:4@?8^@12\u0000{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\u0000{RLMSchemaInfo=\"m_objects\"{unordered_map\u003cNSString *, RLMClassInfo, std::__1::hash\u003cNSString *\u003e, std::__1::equal_to\u003cNSString *\u003e, std::__1::allocator\u003cstd::__1::pair\u003cNSString *const, RLMClassInfo\u003e \u003e \u003e=\"__table_\"{__hash_table\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::__unordered_map_hasher\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::hash\u003cNSString *\u003e, true\u003e, std::__1::__unordered_map_equal\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::equal_to\u003cNSString *\u003e, true\u003e, std::__1::allocator\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e \u003e \u003e=\"__bucket_list_\"{unique_ptr\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *[], std::__1::__bucket_list_deallocator\u003cstd::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e \u003e=\"__ptr_\"{__compressed_pair\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e **, std::__1::__bucket_list_deallocator\u003cstd::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e \u003e=\"__first_\"^^{__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e}\"__second_\"{__bucket_list_deallocator\u003cstd::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e=\"__data_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e=\"__first_\"L}}}}\"__p1_\"{__compressed_pair\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e, std::__1::allocator\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e \u003e \u003e=\"__first_\"{__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e=\"__next_\"^{__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e}}}\"__p2_\"{__compressed_pair\u003cunsigned long, std::__1::__unordered_map_hasher\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::hash\u003cNSString *\u003e, true\u003e \u003e=\"__first_\"L}\"__p3_\"{__compressed_pair\u003cfloat, std::__1::__unordered_map_equal\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::equal_to\u003cNSString *\u003e, true\u003e \u003e=\"__first_\"f}}}}\u0000@\"NSHashTable\"\u0000@\"RLMSchema\"\u0000^{Config={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{BinaryData=*I}{vector\u003cchar, std::__1::allocator\u003cchar\u003e \u003e=**{__compressed_pair\u003cchar *, std::__1::allocator\u003cchar\u003e \u003e=*}}BC{Optional\u003crealm::Schema\u003e=(?={Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}c)B}Q{function\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e={type=[12C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e}}{function\u003cbool (unsigned long long, unsigned long long)\u003e={type=[12C]}^{__base\u003cbool (unsigned long long, unsigned long long)\u003e}}BBB{Optional\u003cunsigned long\u003e=(?=Lc)B}{shared_ptr\u003crealm::SyncConfig\u003e=^{SyncConfig}^{__shared_weak_count}}B}8@0:4\u0000Q8@0:4\u0000v16@0:4Q8\u0000C8@0:4\u0000v12@0:4C8\u0000{Config=\"path\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}\"realm_data\"{BinaryData=\"m_data\"*\"m_size\"I}\"encryption_key\"{vector\u003cchar, std::__1::allocator\u003cchar\u003e \u003e=\"__begin_\"*\"__end_\"*\"__end_cap_\"{__compressed_pair\u003cchar *, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"*}}\"in_memory\"B\"schema_mode\"C\"schema\"{Optional\u003crealm::Schema\u003e=\"\"(?=\"m_value\"{Schema=\"__begin_\"^{ObjectSchema}\"__end_\"^{ObjectSchema}\"__end_cap_\"{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=\"__first_\"^{ObjectSchema}}}\"m_null_state\"c)\"m_engaged\"B}\"schema_version\"Q\"migration_function\"{function\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e=\"__buf_\"{type=\"__lx\"[12C]}\"__f_\"^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e}}\"should_compact_on_launch_function\"{function\u003cbool (unsigned long long, unsigned long long)\u003e=\"__buf_\"{type=\"__lx\"[12C]}\"__f_\"^{__base\u003cbool (unsigned long long, unsigned long long)\u003e}}\"cache\"B\"disable_format_upgrade\"B\"automatic_change_notifications\"B\"execution_context\"{Optional\u003cunsigned long\u003e=\"\"(?=\"m_value\"L\"m_null_state\"c)\"m_engaged\"B}\"sync_config\"{shared_ptr\u003crealm::SyncConfig\u003e=\"__ptr_\"^{SyncConfig}\"__cntrl_\"^{__shared_weak_count}}\"force_sync_history\"B}\u0000@380@0:4^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}8{Results={shared_ptr\u003crealm::Realm\u003e=^{Realm}^{__shared_weak_count}}^{ObjectSchema}{Query={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}^{QueryGroup}{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}}}{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=^L^L{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=^L}}{shared_ptr\u003cconst realm::Descriptor\u003e=^{Descriptor}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{RowIndexes}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}^{TableViewBase}{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e={__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=^{TableViewBase}}}}{TableView=^^?{Column\u003clong long\u003e=^^?I{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e={__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=^{StringIndex}}}{BpTree\u003clong long\u003e={unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e={__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=^{Array}}}}}Q{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{BacklinkColumn}{BasicRow\u003cconst realm::Table\u003e={BasicTableRef\u003crealm::Table\u003e=^{Table}}I^{RowBase}^{RowBase}}{shared_ptr\u003cconst realm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}I{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^LI{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=L}}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^LI{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=L}}}{Query={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}^{QueryGroup}{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}}}{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=^L^L{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=^L}}{shared_ptr\u003cconst realm::Descriptor\u003e=^{Descriptor}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{RowIndexes}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}^{TableViewBase}{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e={__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=^{TableViewBase}}}}III{Optional\u003cunsigned long long\u003e=(?=Qc)B}I}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^LI{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=L}}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^LI{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=L}}}{Handle\u003crealm::_impl::ResultsNotifier\u003e=^{ResultsNotifier}^{__shared_weak_count}}iiBB}12\u0000@28@0:4@812@20c24\u0000{Results=\"m_realm\"{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\"m_object_schema\"^{ObjectSchema}\"m_query\"{Query=\"error_code\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}\"m_groups\"{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__begin_\"^{QueryGroup}\"__end_\"^{QueryGroup}\"__end_cap_\"{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__first_\"^{QueryGroup}}}\"m_subtable_path\"{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__begin_\"^L\"__end_\"^L\"__end_cap_\"{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"^L}}\"m_current_descriptor\"{shared_ptr\u003cconst realm::Descriptor\u003e=\"__ptr_\"^{Descriptor}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_view\"^{RowIndexes}\"m_source_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_source_table_view\"^{TableViewBase}\"m_owned_source_table_view\"{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__first_\"^{TableViewBase}}}}\"m_table_view\"{TableView=\"_vptr$RowIndexes\"^^?\"m_row_indexes\"{Column\u003clong long\u003e=\"_vptr$ColumnBase\"^^?\"m_column_ndx\"I\"m_search_index\"{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__first_\"^{StringIndex}}}\"m_tree\"{BpTree\u003clong long\u003e=\"m_root\"{unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__first_\"^{Array}}}}}\"m_debug_cookie\"Q\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_linked_column\"^{BacklinkColumn}\"m_linked_row\"{BasicRow\u003cconst realm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"I\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\"m_linkview_source\"{shared_ptr\u003cconst realm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_distinct_column_source\"I\"m_distinct_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^L\"__size_\"I\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"L}}}\"m_sorting_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^L\"__size_\"I\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"L}}}\"m_query\"{Query=\"error_code\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}\"m_groups\"{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__begin_\"^{QueryGroup}\"__end_\"^{QueryGroup}\"__end_cap_\"{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__first_\"^{QueryGroup}}}\"m_subtable_path\"{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__begin_\"^L\"__end_\"^L\"__end_cap_\"{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"^L}}\"m_current_descriptor\"{shared_ptr\u003cconst realm::Descriptor\u003e=\"__ptr_\"^{Descriptor}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_view\"^{RowIndexes}\"m_source_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_source_table_view\"^{TableViewBase}\"m_owned_source_table_view\"{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__first_\"^{TableViewBase}}}}\"m_start\"I\"m_end\"I\"m_limit\"I\"m_last_seen_version\"{Optional\u003cunsigned long long\u003e=\"\"(?=\"m_value\"Q\"m_null_state\"c)\"m_engaged\"B}\"m_num_detached_refs\"I}\"m_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_sort\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^L\"__size_\"I\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"L}}}\"m_distinct\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^L\"__size_\"I\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"L}}}\"m_notifier\"{Handle\u003crealm::_impl::ResultsNotifier\u003e=\"__ptr_\"^{ResultsNotifier}\"__cntrl_\"^{__shared_weak_count}}\"m_mode\"i\"m_update_policy\"i\"m_has_used_table_view\"B\"m_wants_background_updates\"B}\u0000@12@0:4r^{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}8\u0000#12@0:4@8\u0000{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}8@0:4\u0000{Schema=\"__begin_\"^{ObjectSchema}\"__end_\"^{ObjectSchema}\"__end_cap_\"{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=\"__first_\"^{ObjectSchema}}}\u0000@176@0:4{SyncConfig={shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i{function\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e={type=[12C]}^{__base\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e}}{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[12C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}{shared_ptr\u003crealm::sync::ClientHistory::ChangesetCooker\u003e=^{ChangesetCooker}^{__shared_weak_count}}{Optional\u003cstd::__1::array\u003cchar, 64\u003e \u003e=(?={array\u003cchar, 64\u003e=[64c]}c)B}B{Optional\u003cstd::__1::basic_string\u003cchar\u003e \u003e=(?={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}c)B}}8\u0000{SyncConfig={shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i{function\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e={type=[12C]}^{__base\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e}}{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[12C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}{shared_ptr\u003crealm::sync::ClientHistory::ChangesetCooker\u003e=^{ChangesetCooker}^{__shared_weak_count}}{Optional\u003cstd::__1::array\u003cchar, 64\u003e \u003e=(?={array\u003cchar, 64\u003e=[64c]}c)B}B{Optional\u003cstd::__1::basic_string\u003cchar\u003e \u003e=(?={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}c)B}}8@0:4\u0000@48@0:4@8@12@16I20{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[12C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}24\u0000{unique_ptr\u003crealm::SyncConfig, std::__1::default_delete\u003crealm::SyncConfig\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::SyncConfig *, std::__1::default_delete\u003crealm::SyncConfig\u003e \u003e=\"__first_\"^{SyncConfig}}}\u0000@\"NSURL\"\u0000@20@0:4@8@12I16\u0000@80@0:4{Permission={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i{Condition=i{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{pair\u003cstd::__1::basic_string\u003cchar\u003e, std::__1::basic_string\u003cchar\u003e \u003e={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}{Timestamp=qiB}}8\u0000{Permission={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i{Condition=i{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{pair\u003cstd::__1::basic_string\u003cchar\u003e, std::__1::basic_string\u003cchar\u003e \u003e={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}{Timestamp=qiB}}8@0:4\u0000{Optional\u003crealm::Permission\u003e=\"\"(?=\"m_value\"{Permission=\"path\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}\"access\"i\"condition\"{Condition=\"type\"i\"user_id\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}\"key_value\"{pair\u003cstd::__1::basic_string\u003cchar\u003e, std::__1::basic_string\u003cchar\u003e \u003e=\"first\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}\"second\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__cap_\"I\"__size_\"I\"__data_\"*}\"__s\"{__short=\"\"(?=\"__size_\"C\"__lx\"c)\"__data_\"[11c]}\"__r\"{__raw=\"__words\"[3L]})}}}}}\"updated_at\"{Timestamp=\"m_seconds\"q\"m_nanoseconds\"i\"m_is_null\"B}}\"m_null_state\"c)\"m_engaged\"B}\u0000@\"NSDate\"\u0000@20@0:4@8@12c16\u0000@20@0:4@8@12@16\u0000v32@0:4i8@12c16@20@24I28\u0000@\"NSNumber\"\u0000@28@0:4@8@12@16@20@24\u0000@\"NSNumber\u003cRLMInt\u003e\"\u0000@\"NSNumber\u003cRLMBool\u003e\"\u0000@28@0:4@8@12c16c20c24\u0000@24@0:4Q8{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}16\u0000Q\u0000{weak_ptr\u003crealm::SyncSession\u003e=\"__ptr_\"^{SyncSession}\"__cntrl_\"^{__shared_weak_count}}\u0000@16@0:4{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}8\u0000c16@0:4@8@?12\u0000@20@0:4I8I12@?16\u0000@28@0:4@8@12{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}16@?24\u0000c16@0:4@8@12\u0000{shared_ptr\u003crealm::SyncSession\u003e=\"__ptr_\"^{SyncSession}\"__cntrl_\"^{__shared_weak_count}}\u0000@\"RLMSyncUser\"\u0000@\"NSTimer\"\u0000v28@0:4@8@12d16@?24\u0000v32@0:4@8@12@16d20@?28\u0000@16@0:4{shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}8\u0000@12@0:4^@8\u0000v24@0:4r^{SyncConfig={shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i{function\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e={type=[12C]}^{__base\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e}}{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[12C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}{shared_ptr\u003crealm::sync::ClientHistory::ChangesetCooker\u003e=^{ChangesetCooker}^{__shared_weak_count}}{Optional\u003cstd::__1::array\u003cchar, 64\u003e \u003e=(?={array\u003cchar, 64\u003e=[64c]}c)B}B{Optional\u003cstd::__1::basic_string\u003cchar\u003e \u003e=(?={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}c)B}}8{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}12@?20\u0000{shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}8@0:4\u0000{shared_ptr\u003crealm::SyncUser\u003e=\"__ptr_\"^{SyncUser}\"__cntrl_\"^{__shared_weak_count}}\u0000{unique_ptr\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e, std::__1::default_delete\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e \u003e \u003e=\"__ptr_\"{__compressed_pair\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e *, std::__1::default_delete\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e \u003e \u003e=\"__first_\"^{function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e}}}\u0000{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=\"__first_\"^{ThreadSafeReferenceBase}}}\u0000d8@0:4\u0000v16@0:4d8\u0000d\u0000@\"RLMTokenDataModel\"\u0000v@:\u0000\u003c\u0000%\u0000@\u0000 \u0000\u0014  \u0000%\u0000l\u0000u\u0000 \u0000t\u0000o\u0000t\u0000a\u0000l\u0000 \u0000b\u0000y\u0000t\u0000e\u0000s\u0000\u003e\u0000\u0000\u0000S\u0000U\u0000B\u0000Q\u0000U\u0000E\u0000R\u0000Y\u0000(\u0000\u0026 )\u0000.\u0000@\u0000c\u0000o\u0000u\u0000n\u0000t\u0000 \u0000i\u0000s\u0000 \u0000o\u0000n\u0000l\u0000y\u0000 \u0000s\u0000u\u0000p\u0000p\u0000o\u0000r\u0000t\u0000e\u0000d\u0000 \u0000w\u0000h\u0000e\u0000n\u0000 \u0000c\u0000o\u0000m\u0000p\u0000a\u0000r\u0000e\u0000d\u0000 \u0000w\u0000i\u0000t\u0000h\u0000 \u0000a\u0000 \u0000c\u0000o\u0000n\u0000s\u0000t\u0000a\u0000n\u0000t\u0000 \u0000n\u0000u\u0000m\u0000b\u0000e\u0000r\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\ufffd\u003e6\u0000@\u000c6\u0000\u0000\u0000\u0000\u0000\ufffd\u000c6\u0000\ufffdM3\u0000\\\u000c6\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\ufffd\u000c6\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\ufffd\u000c6\u0000\u00146\u0000\u0000\u0000\u0000\u0000\ufffd\u000c6\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000e6\u0000\ufffd6\u0000`6\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\ufffd\u000e6\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u000e6\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00000I6\u0000\ufffd\u000e6\u0000\ufffd\u000e6\u0000\ufffd\u000e6\u0000\ufffd\ufffd5\u0000P26\u0000\ufffd\u000e6\u0000\ufffd\u000e6\u0000\ufffd\u000e6\u0000\ufffdR5\u0000\ufffd\u000e6\u0000\u0000\u0000\u0000\u0000\ufffdh5\u0000\u000ci5\u0000\u0008i5\u0000x\u000f6\u0000l\u000f6\u00000\u000f6\u0000X\u000f6\u0000\u001c\u000f6\u0000D\u000f6\u0000\ufffd36\u00008S5\u0000\ufffd\u000f6\u0000D\ufffd5\u0000\ufffd\u000f6\u00000\ufffd5\u0000\u0010M6\u0000\ufffd\u000f6\u0000\u0000\u0000\u0000\u0000x\u00106\u0000\ufffd\u00106\u0000`\u00106\u0000\u0000\u0000\u0000\u0000\ufffd26\u0000\ufffdi6\u0000\u0000p6\u0000\ufffdy5\u0000,\u00106\u0000\u0018\u00106\u0000@\u00106\u0000\ufffd\u000f6\u0000\u0004\u00106\u0000xw5\u0000@q6\u0000\ufffdo6\u0000826\u0000`p6\u0000\ufffd26\u0000\ufffdR3\u0000\u0000\u0000\u0000\u0000\ufffd06\u0000\ufffd\u00106\u0000\ufffd\u00106\u0000\u0000\u0000\u0000\u0000\ufffd\u00106\u0000\ufffd\u00106\u0000\u0000\u0000\u0000\u0000\ufffd\u00106\u0000(\u00116\u0000L\u00116\u00004\u00116\u0000@\u00116\u0000\ufffd\u00116\u0000\ufffdT5\u0000\ufffdH6\u0000\ufffd\u00116\u0000\ufffd\u00116\u0000X\u00116\u0000\ufffd\u00116\u0000l\u00116\u0000`M6\u0000\ufffd\u00116\u0000\ufffd16\u0000\ufffdj6\u0000X\u00026\u0000T\u00026\u0000P\u00026\u0000\\\u00026\u0000`\u00026\u0000\ufffd\u00026\u0000\ufffd\u00026\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000a3\u00008^5\u0000\ufffd\u00016\u0000\ufffd\u00016\u0000\ufffdh\u0001\u0000\ufffdi\u0001\u0000Ik\u0001\u0000\ufffdl\u0001\u0000\ufffd\u00126\u0000\u0000\u00136\u0000l\u00136\u0000\ufffd\u00136\u0000D\u00136\u0000\ufffd\u00136\u0000\u001c\u00136\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0008\u00146\u0000\u0000\u0000\u0000\u0000\ufffd\u00026\u0000\ufffd\u00026\u0000\ufffd\u00026\u0000\ufffd\u00016\u0000Hh6\u0000\ufffd+6\u0000\u0000,6\u0000\ufffd-6\u0000d'6\u0000\ufffd\ufffd5\u0000\ufffd$6\u0000\ufffd\"6\u0000\ufffd\u001d6\u0000x\u001a6\u0000h\u00156\u0000\ufffd\u00266\u0000\ufffdd6\u0000@$6\u0000P\"6\u0000@\u001d6\u0000\u0010\u001a6\u0000\u0000\u00156\u0000`.6\u0000\ufffd\ufffd3\u0000\ufffdp6\u00000m6\u0000\ufffd\u00176\u0000\ufffd\u001f6\u0000\ufffd\u001c6\u0000\ufffd\u00176\u00000\u00146\u0000\ufffd+6\u0000x56\u0000`-6\u0000\ufffdp6\u0000\ufffdo6\u0000\ufffdp6\u0000\ufffd\u00176\u0000\ufffd*6\u0000\ufffd\u00266\u0000$!6\u0000\ufffd!6\u0000\ufffd 6\u0000\ufffd\u001f6\u0000\ufffd 6\u0000\ufffd!6\u0000T 6\u0000\ufffd\u001c6\u0000\ufffd 6\u0000X!6\u0000  6\u00000\u00186\u0000\ufffd'6\u0000\ufffd+6\u0000\ufffd-6\u0000\ufffd56\u0000d\u00186\u0000\ufffde6\u0000\ufffd$6\u0000\ufffd\"6\u0000\ufffd\u001d6\u0000\ufffd\u001a6\u0000\u000c,6\u0000\ufffd\u00156\u0000\ufffd46\u0000\\\ufffd5\u0000\ufffd\u00266\u0000\ufffd#6\u0000\ufffd\u001f6\u0000T\u001c6\u0000\ufffd\u00176\u0000p'6\u0000\u001c)6\u0000\ufffd(6\u0000\ufffd)6\u0000\ufffd%6\u0000\ufffd\u001e6\u0000\ufffd\u001b6\u0000\ufffd\u00166\u0000L(6\u0000\ufffd%6\u0000\ufffd\u001d6\u0000\ufffd\u001a6\u0000t\u00156\u0000 *6\u0000P)6\u0000\ufffd*6\u0000,\u00266\u0000\ufffd\"6\u0000\u001c\u001f6\u0000\ufffd\u001b6\u0000\ufffd-6\u0000\ufffd\u00166\u0000\ufffd$6\u0000\ufffd\u001e6\u0000\ufffd\u001b6\u0000t\u00166\u0000T*6\u0000\ufffd(6\u0000\ufffd(6\u0000\ufffd)6\u0000\ufffd)6\u0000\ufffd+6\u0000`\u00266\u0000\ufffd#6\u0000P\u001f6\u0000 \u001c6\u0000\ufffd-6\u0000\u0010\u00176\u0000\ufffd%6\u0000\ufffd\u001e6\u0000P\u001b6\u0000@\u00166\u0000P\u00176\u0000\u0018.6\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$^5\u0000\ufffd\ufffd6\u0000p.6\u0000\ufffd.6\u0000|.6\u0000\u0000\u0000\u0000\u0000\ufffd.6\u0000 ^5\u0000\u001c^5\u0000\ufffd.6\u0000\ufffd\ufffd\u0002\u0000\ufffd\ufffd\u0002\u0000\ufffd\ufffd\u0002\u0000=\ufffd\u0002\u0000\u0018/6\u0000\ufffdh5\u0000 i5\u0000$i5\u00000i5\u0000@\ufffd3\u0000S\ufffd3\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000i5\u0000\u0010i5\u0000\u0014i5\u0000(i5\u0000,i5\u0000\ufffd/6\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000,^5\u00004^5\u00000^5\u0000(^5\u0000l\u00106\u0000\ufffd\ufffd6\u0000\ufffd\ufffd6\u0000\ufffd\ufffd6\u0000\ufffd\ufffd6\u0000\ufffde\u0012\u0000\ufffd/6\u0000\ufffdK6\u0000\ufffd/6\u0000\ufffdK6\u0000T\u00106\u0000p06\u0000\ufffd.6\u0000\ufffd/6\u0000\u000406\u0000\ufffd\ufffd3\u0000\ufffdw5\u0000$06\u0000\u001006\u0000\ufffd/6\u0000\ufffd/6\u0000Ђ5\u0000H06\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000C\ufffd3\u0000\ufffd\ufffd6\u0000\u0000\u0000\u0000\u0000\ufffd\ufffd3\u0000\ufffd06\u0000\ufffd06\u0000\u001016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\ufffd36\u0000\ufffd\u000f6\u0000\ufffd46\u0000\ufffd36\u0000\ufffd46\u0000\u000c26\u0000\ufffd16\u0000\ufffd36\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\ufffd\ufffd3\u0000\ufffd\ufffd3\u0000\u0010\ufffd3\u0000\ufffd\ufffd3\u0000\ufffd\ufffd3\u0000p66\u0000`46\u0000\u003c46\u0000\ufffd46\u0000\ufffd16\u0000\ufffd16\u0000\u001866\u0000\u001426\u0000\u001846\u0000\ufffd36\u0000\ufffd36\u0000\u003c66\u0000\ufffd46\u0000\ufffd86\u0000\u0010\u003c6\u0000\ufffdj6\u0000`96\u0000\ufffd86\u0000\ufffd86\u0000\ufffd86\u0000\ufffd86\u0000 96\u0000@96\u0000t96\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\ufffdD6\u0000\ufffdD6\u0000\ufffdk6\u0000\u003cE6\u0000(E6\u0000\ufffdk6\u0000\ufffdj6\u0000\ufffdx5\u00008i6\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\ufffdK6\u0000\ufffdK6\u0000\ufffdK6\u0000,L6\u0000@L6\u0000\ufffdL6\u0000\u0018L6\u0000`\u003e6\u0000\ufffdL6\u0000\u0000\u0000\u0000\u0000 q6\u0000xp6\u0000AJ/\u0000\ufffd\ufffd/\u0000a]/\u0000)u/\u0000\ufffdV/\u0000\ufffd\ufffd/\u0000\ufffd7\u0026\u0000)\ufffd/\u0000\ufffdR/\u0000I\ufffd/\u0000Mg/\u0000\u0011/\u0000\ufffdN/\u0000\ufffd\ufffd/\u0000)b/\u0000\ufffd@\u0026\u0000pi6\u0000@p6\u0000\ufffd\ufffd6\u0000Ȁ6\u0000Lr6\u0000\u0000\ufffd5\u0000\ufffdq6\u0000\ufffd\u003c6\u0000x\u003c6\u0000\u0004=6\u0000\ufffd\u003c6\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u003c6\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\ufffd=6\u0000\ufffdA6\u0000\ufffd=6\u0000\ufffd?6\u0000\ufffd\u003e6\u0000\ufffd\u003e6\u0000LA6\u0000\u0018A6\u00008\u003e6\u0000\ufffd\u003e6\u0000`=6\u0000\u003cA6\u0000\ufffd=6\u0000\ufffd?6\u0000P?6\u0000\ufffd\u003e6\u0000\u0004@6\u0000\ufffd@6\u0000\ufffd?6\u0000p@6\u0000\ufffd@6\u0000(@6\u0000\u001c?6\u0000`A6\u0000\ufffd\ufffd6\u0000\ufffdA6\u0000\ufffdA6\u0000tC6\u0000\ufffdB6\u0000\ufffdC6\u0000\ufffdC6\u00008C6\u0000(D6\u0000\ufffdD6\u0000dD6\u0000\u003cC6\u0000\ufffdB6\u0000xC6\u0000\ufffdC6\u0000\u0000C6\u0000\ufffdC6\u0000hD6\u0000,D6\u0000\u000b\ufffd\u0018\u0000\ufffd\ufffd\u0018\u0000!\ufffd\u0018\u0000]\ufffd\u0018\u0000\ufffd\ufffd\u0018\u0000\ufffd\ufffd\u0018\u0000\ufffd\ufffd\u0018\u0000\ufffd\ufffd\u0018\u0000\u0005\ufffd\u0018\u0000\ufffd\ufffd\u0018\u0000\ufffd\u0018\u0000G\ufffd\u0018\u0000\ufffd\ufffd\u0018\u0000\ufffd\ufffd\u0018\u0000\ufffd\ufffd\u0018\u0000\ufffd\ufffd\u0018\u0000g\u0010\u0019\u00007\ufffd\u0018\u0000\ufffd\u0014\u0019\u0000\ufffd \u0019\u0000\ufffd\t\u0019\u0000\u0013\u003e\u0019\u0000oi\u0019\u0000\ufffdX\u0019\u0000\ufffd\u000f\u0019\u0000\ufffd\ufffd\u0018\u0000{\u0014\u0019\u0000M \u0019\u0000[\t\u0019\u0000\ufffd=\u0019\u0000\ufffdh\u0019\u0000\ufffdX\u0019\u0000A\u0010\u0019\u0000\u0011\ufffd\u0018\u0000\ufffd\u0014\u0019\u0000\ufffd \u0019\u0000\ufffd\t\u0019\u0000\ufffd=\u0019\u0000Ii\u0019\u0000\ufffdX\u0019\u0000\u001b\u0010\u0019\u0000\ufffd\ufffd\u0018\u0000\ufffd\u0014\u0019\u0000s \u0019\u0000\ufffd\t\u0019\u0000\ufffd=\u0019\u0000#i\u0019\u0000\ufffdX\u0019\u0000{\u000f\u0019\u0000K\ufffd\u0018\u0000\ufffd\u0013\u0019\u0000\ufffd\u001f\u0019\u0000\ufffd\u0008\u0019\u0000\u0013=\u0019\u0000\ufffdh\u0019\u0000\u000bX\u0019\u0000\ufffdJ6\u0000\u0000J6\u0000\ufffdI6\u0000\ufffdI6\u0000\u000cJ6\u0000\ufffdJ6\u0000\ufffdJ6\u0000\u0000K6\u0000\ufffdJ6\u0000\ufffdI6\u0000,J6\u0000\ufffdI6\u0000LK6\u0000\u0014K6\u0000xK6\u00000\ufffd5\u0000(N6\u0000\ufffdM6\u0000P\ufffd3\u0000\u0010\u00064\u0000\ufffd\u00054\u0000\ufffdR3\u0000TO6\u0000\ufffdN6\u0000\ufffdO6\u0000\ufffdO6\u0000\u0014O6\u0000\ufffd\ufffd5\u0000|d6\u0000\ufffdd6\u0000\u003cb6\u0000|c6\u0000\ufffdb6\u0000\ufffdc6\u0000|b6\u0000\ufffdc6\u0000\ufffd\ufffd5\u0000\u003cd6\u0000\u003cc6\u0000\ufffdb6\u0000Ȅ5\u0000\ufffdV6\u0000\ufffdX6\u0000\ufffdT6\u0000\u003cX6\u0000\u003cV6\u0000\ufffdX6\u0000|W6\u0000|X6\u0000\ufffdW6\u0000\ufffdM6\u0000\ufffdN6\u0000|[6\u0000\ufffd[6\u0000\ufffdU6\u0000\u003c[6\u0000\u003cW6\u0000\ufffd[6\u00004N6\u0000\ufffdU6\u0000\ufffdS6\u0000\u0014T6\u0000\u0014S6\u0000\ufffdS6\u0000TT6\u0000TS6\u0000TR6\u0000\ufffdQ6\u0000\ufffdR6\u0000\u0014R6\u0000\ufffdQ6\u0000\ufffdR6\u0000\ufffdP6\u0000\ufffdP6\u0000\u0014P6\u0000TQ6\u0000TP6\u0000\u0014Q6\u0000|Z6\u0000\ufffdZ6\u0000`U6\u0000\u003cZ6\u0000\ufffdV6\u0000\ufffdZ6\u0000|Y6\u0000\ufffdY6\u0000 U6\u0000\u003cY6\u0000|V6\u0000\ufffdY6\u0000\ufffdT6\u0000\ufffdW6\u0000\ufffdU6\u00008\ufffd5\u0000\u0018N6\u0000`N6\u0000\u0010\ufffd5\u0000|_6\u0000|a6\u0000|\\6\u0000|^6\u0000|]6\u0000|`6\u0000\u003c_6\u0000\u003ca6\u0000\u003c\\6\u0000\u003c^6\u0000\u003c]6\u0000\u003c`6\u0000\ufffd_6\u0000\ufffda6\u0000\ufffd\\6\u0000\ufffd^6\u0000\ufffd]6\u0000\ufffd`6\u0000\ufffd_6\u0000\ufffda6\u0000\ufffd\\6\u0000\ufffd^6\u0000\ufffd]6\u0000\ufffd`6\u0000\u0010~5\u0000\u00045\u0000\ufffd{5\u0000lq6\u0000\u003c\ufffd5\u0000$\ufffd5\u0000\u000c\ufffd5\u0000`\"4\u0000\ufffd\t4\u0000\ufffd\t4\u0000Ph6\u00004}5\u0000\ufffdz5\u0000Pf6\u00008g6\u0000\u0018\ufffd5\u0000\ufffdx5\u0000\ufffdj6\u0000\u0018j6\u0000\ufffdi6\u0000\ufffdi6\u0000\u003cj6\u0000\ufffdn6\u0000Ho6\u0000(o6\u0000\ufffdn6\u0000\ufffdm6\u0000\ufffdm6\u0000\ufffdm6\u0000`m6\u0000`o6\u0000\ufffdo6\u0000\ufffdm6\u0000xo6\u0000Hl6\u0000\ufffdi6\u00000M6\u0000 G6\u0000\u0008B6\u00004B6\u0000@B6\u0000LB6\u0000`B6\u0000\ufffdB6\u0000tB6\u0000\ufffdF6\u0000\ufffdF6\u0000\ufffdw5\u0000`F6\u0000\u0004G6\u0000\ufffdF6\u0000\ufffdF6\u0000HE6\u0000\ufffdF6\u0000$F6\u0000\ufffd\u00020\u0000@G6\u0000\u0010I6\u0000\ufffdH6\u0000\ufffdH6\u0000\ufffdH6\u0000LI6\u0000dI6\u0000\ufffd;6\u0000\ufffdA6\u0000\u0000\u0000\u0000\u0000\ufffd96\u0000X;6\u0000(:6\u0000\u000016\u0000\ufffd?6\u0000L\ufffd0\u0000X\ufffd0\u0000d\ufffd0\u0000p\ufffd0\u0000|\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000,\ufffd0\u00008\ufffd0\u0000D\ufffd0\u0000P\ufffd0\u0000\\\ufffd0\u0000h\ufffd0\u0000t\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0004\ufffd0\u0000\u0010\ufffd0\u0000\u001c\ufffd0\u0000\ufffd\ufffd0\u0000\u0004\ufffd0\u0000\u0010\ufffd0\u0000\u001c\ufffd0\u0000(\ufffd0\u00004\ufffd0\u0000@\ufffd0\u0000x\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0008\ufffd0\u0000\u0014\ufffd0\u0000 \ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000Y\ufffd\u0004\u0000\ufffd\ufffd\u0004\u0000}~\u000e\u0000A}\u000e\u0000\ufffd\u000e\u0000q\ufffd\u000e\u0000\ufffd\ufffd\u000e\u0000a\ufffd\u000e\u0000X\ufffd0\u0000d\ufffd0\u0000p\ufffd0\u0000|\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0000\ufffd0\u0000\u000c\ufffd0\u0000\u0018\ufffd0\u0000$\ufffd0\u00000\ufffd0\u0000\u003c\ufffd0\u0000H\ufffd0\u0000T\ufffd0\u0000`\ufffd0\u0000l\ufffd0\u0000x\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0008\ufffd0\u0000\u0014\ufffd0\u0000 \ufffd0\u0000,\ufffd0\u00008\ufffd0\u0000D\ufffd0\u0000P\ufffd0\u0000\\\ufffd0\u0000h\ufffd0\u0000t\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0004\ufffd0\u0000\u0010\ufffd0\u0000\u001c\ufffd0\u0000(\ufffd0\u00004\ufffd0\u0000@\ufffd0\u0000L\ufffd0\u0000X\ufffd0\u0000d\ufffd0\u0000p\ufffd0\u0000|\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0000\ufffd0\u0000\u000c\ufffd0\u0000\u0018\ufffd0\u0000$\ufffd0\u00000\ufffd0\u0000\u003c\ufffd0\u0000H\ufffd0\u0000T\ufffd0\u0000`\ufffd0\u0000l\ufffd0\u0000x\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0008\ufffd0\u0000\u0014\ufffd0\u0000 \ufffd0\u0000,\ufffd0\u00008\ufffd0\u0000D\ufffd0\u0000P\ufffd0\u0000\\\ufffd0\u0000h\ufffd0\u0000t\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0004\ufffd0\u0000\u0010\ufffd0\u0000\u001c\ufffd0\u0000(\ufffd0\u00004\ufffd0\u0000\u0000\ufffd0\u0000\u000c\ufffd0\u0000@\ufffd0\u0000\u0018\ufffd0\u0000$\ufffd0\u00000\ufffd0\u0000\u003c\ufffd0\u0000H\ufffd0\u0000T\ufffd0\u0000`\ufffd0\u0000l\ufffd0\u0000x\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0008\ufffd0\u0000\u0014\ufffd0\u0000 \ufffd0\u0000,\ufffd0\u00008\ufffd0\u0000D\ufffd0\u0000L\ufffd0\u0000X\ufffd0\u0000d\ufffd0\u0000p\ufffd0\u0000|\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000P\ufffd0\u0000\\\ufffd0\u0000h\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000t\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0004\ufffd0\u0000\u0010\ufffd0\u0000\u001c\ufffd0\u0000(\ufffd0\u00004\ufffd0\u0000@\ufffd0\u0000L\ufffd0\u0000X\ufffd0\u0000d\ufffd0\u0000p\ufffd0\u0000|\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0000\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0000\ufffd0\u0000\u000c\ufffd0\u0000\u0018\ufffd0\u0000$\ufffd0\u00000\ufffd0\u0000\u003c\ufffd0\u0000H\ufffd0\u0000T\ufffd0\u0000`\ufffd0\u0000\u000c\ufffd0\u0000\u0018\ufffd0\u0000l\ufffd0\u0000x\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000$\ufffd0\u00000\ufffd0\u0000\u003c\ufffd0\u0000H\ufffd0\u0000T\ufffd0\u0000`\ufffd0\u0000l\ufffd0\u0000x\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0008\ufffd0\u0000\u0014\ufffd0\u0000 \ufffd0\u0000,\ufffd0\u00008\ufffd0\u0000D\ufffd0\u0000P\ufffd0\u0000\\\ufffd0\u0000h\ufffd0\u0000t\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0004\ufffd0\u0000\u0010\ufffd0\u0000\u001c\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0008\ufffd0\u0000(\ufffd0\u00004\ufffd0\u0000@\ufffd0\u0000\u0014\ufffd0\u0000 \ufffd0\u0000,\ufffd0\u00008\ufffd0\u0000D\ufffd0\u0000P\ufffd0\u0000\\\ufffd0\u0000h\ufffd0\u0000t\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0004\ufffd0\u0000\u0010\ufffd0\u0000\u001c\ufffd0\u0000(\ufffd0\u00004\ufffd0\u0000@\ufffd0\u0000L\ufffd0\u0000X\ufffd0\u0000d\ufffd0\u0000p\ufffd0\u0000|\ufffd0\u0000L\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\ufffd\ufffd0\u0000\u0000\ufffd0\u0000\u000c\ufffd0\u0000\u0018\ufffd0\u0000$\ufffd0\u00000\ufffd0\u0000\u003c\ufffd0\u0000H\ufffd0\u0000T\ufffd0\u0000`\ufffd0\u0000l\ufffd0\u0000%\ufffd\u0002\u0000o\ufffd\u000c\u0000\ufffd\ufffd\u000c\u0000\ufffd)\u0011\u0000\ufffdu\u0011\u0000\ufffd\ufffd\u0011\u0000_\ufffd\u0011\u0000\"\u0012\u0000ad\u0015\u0000\ufffd-\u0017\u0000\ufffdG\u0017\u0000\ufffdH\u0017\u0000\ufffd\ufffd\u0017\u0000\t\ufffd\u0017\u00009\ufffd\u0017\u0000\u0011\ufffd\u0017\u0000-(\u0018\u0000\ufffd\ufffd \u0000c\ufffd \u0000-\ufffd \u0000\ufffd\ufffd \u0000\ufffd\ufffd \u0000\ufffd\ufffd \u0000U\ufffd \u0000\u001f\ufffd \u0000\ufffd\ufffd#\u0000e]$\u0000\ufffd\u00060\u0000\u0000\u0000\u0000\u0000\ufffdR5\u0000\ufffd\ufffd\u0000\u0000\ufffd\ufffd\u0000\u0000\u0000\u0000\u0000\u0000\ufffd\ufffd\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\ufffd\ufffd\u0000\u0000\u0008\u0000\u0000\u0000\ufffdK3\u0000\u0000\u0000\u0000\u0000\ufffdR5\u0000\ufffd\ufffd\u0000\u0000\ufffd\ufffd\u0000\u0000\ufffd\ufffd\u0000\u0000\u0011\ufffd\u0000\u0000!\ufffd\u0000\u0000#\ufffd\u0000\u0000'\ufffd\u0000\u0000+\ufffd\u0000\u0000C\ufffd\u0000\u0000\u0008\u0000\u0000\u0000\u0000L3\u0000T\u000c6\u0000\u0008\u0000\u0000\u0000\ufffdL3\u0000\u0000\u0000\u0000\u0000\ufffdR5\u0000\u000b\u0017\u0001\u0000E\u0017\u0001\u0000\ufffd\u0017\u0001\u0000\u0019\u0018\u0001\u0000\u0008\u0000\u0000\u0000\ufffdN3\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000,S5\u0000\u000f\ufffd\u0001\u0000\u0013\ufffd\u0001\u0000\ufffd~\u0001\u0000\ufffd\ufffd\u0001\u0000\ufffd\ufffd\u0001\u0000\ufffd~\u0001\u00001\ufffd\u0001\u0000Q\ufffd\u0001\u0000\u0013\ufffd\u0001\u0000\ufffd\ufffd\u0000\u0000\u0008\u0000\u0000\u0000\ufffdP3\u0000\ufffdR5\u0000\u0000\u0000\u0000\u0000hS5\u0000\ufffd\ufffd\u0001\u0000\ufffd\ufffd\u0001\u0000\u001d\ufffd\u0001\u0000\ufffd\ufffd\u0001\u0000y\ufffd\u0001\u0000E\ufffd\u0001\u0000\ufffd\ufffd\u0001\u0000٦\u0001\u0000\ufffd\ufffd\u0001\u0000\ufffd\ufffd\u0000\u0000\u0008\u0000\u0000\u0000 R3\u0000\ufffdR5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\ufffd1\u0000\u0016\ufffd1\u0000\u000b\ufffd1\u0000\u000b\ufffd1\u0000 \ufffd1\u0000\u000b\ufffd1\u00002\ufffd1\u0000\u000b\ufffd1\u0000\u001b\ufffd1\u0000,\ufffd1\u0000%\ufffd1\u0000\u000b\ufffd1\u00006\ufffd1\u0000=\ufffd1\u0000C\ufffd1\u0000\u0000\u0000\u0000\u0000\u0012\ufffd1\u0000\u0016\ufffd1\u0000\u000b\ufffd1\u0000\u000b\ufffd1\u0000 \ufffd1\u0000\u000b\ufffd1\u00002\ufffd1\u0000\u000b\ufffd1\u0000\u001b\ufffd1\u0000,\ufffd1\u0000%\ufffd1\u0000\u000b\ufffd1\u00006\ufffd1\u0000=\ufffd1\u0000C\ufffd1\u0000\u0000\u0000\u0000\u0000(T5\u0000\ufffd\u0002\u0000\ufffd\ufffd\u0002\u0000\ufffd\ufffd\u0002\u0000\ufffd\ufffd\u0002\u0000\u0013\ufffd\u0002\u0000\u001f\ufffd\u0002\u00009\ufffd\u0002\u0000)\ufffd\u0002\u0000A\ufffd\u0002\u0000\u0008\u0000\u0000\u0000\u0000W3\u0000 \u00116\u0000\u0008\u0000\u0000\u0000\ufffdW3\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\\T5\u0000\ufffd \u0003\u0000!!\u0003\u0000k!\u0003\u0000\u0000\u0000\u0000\u0000\ufffd!\u0003\u0000\u0008\u0000\u0000\u0000\ufffdY3\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|T5\u0000\ufffd!\u0003\u0000\ufffd!\u0003\u0000\ufffd\"\u0003\u0000\u0008\u0000\u0000\u0000\ufffdZ3\u0000\ufffd46\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\ufffd1\u0000\u0016\ufffd1\u0000\u000b\ufffd1\u0000\u000b\ufffd1\u0000 \ufffd1\u0000\u000b\ufffd1\u00002\ufffd1\u0000\u000b\ufffd1\u0000\u001b\ufffd1\u0000,\ufffd1\u0000%\ufffd1\u0000\u000b\ufffd1\u00006\ufffd1\u0000=\ufffd1\u0000C\ufffd1\u0000\u0000\u0000\u0000\u0000\ufffdT5\u0000\ufffdC\u0003\u0000\ufffdC\u0003\u0000U+\u0003\u0000\ufffd;\u0003\u0000\ufffd3\u0003\u0000\ufffd\u003e\u0003\u0000\ufffdA\u0003\u0000M5\u0003\u0000u+\u0003\u0000e\u003e\u0003\u0000\u0008\u0000\u0000\u00000[3\u0000\ufffdR5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000Wg\u0003\u0000]g\u0003\u0000\ufffd\ufffd1\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\u0013i\u0003\u0000\u0019i\u0003\u0000\ufffd\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000j\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffd\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffd\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffd\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffd\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffd\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000j\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u00001\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000j\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000H\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000j\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000_\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000v\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffd\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffd\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffd\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffd\ufffd1\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000ɡ\u0003\u0000ϡ\u0003\u0000K\u00002\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\ufffd\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000ա\u0003\u0000xV5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\ufffd\ufffd\u0003\u0000\ufffd\u00002\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000z\u00012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\ufffd\u0003\u0000\ufffdV5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\ufffd\ufffd\u0003\u0000z\u00012\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\ufffd\u00012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\ufffdV5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000A\ufffd\u0003\u0000G\ufffd\u0003\u0000\ufffd\u00012\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\ufffd\u00012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000M\ufffd\u0003\u00008W5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\ufffd\ufffd\u0003\u0000\ufffd\u00012\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\ufffd\u00012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000xW5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\ufffd\ufffd\u0003\u0000\ufffd\u00012\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\ufffd\u00012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\ufffdW5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000#\ufffd\u0003\u0000)\ufffd\u0003\u0000\ufffd\u00012\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\ufffd\u00012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u00001\ufffd\u0003\u0000\ufffdW5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\ufffd\ufffd\u0003\u0000\ufffd\u00012\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000*\u00022\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\ufffd\ufffd\u0003\u00008X5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\ufffd\ufffd\u0003\u0000*\u00022\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000D\u00022\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000xX5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000Y\ufffd\u0003\u0000_\ufffd\u0003\u0000D\u00022\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000s\u00022\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000e\ufffd\u0003\u0000\ufffdX5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\u0001\ufffd\u0003\u0000s\u00022\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\ufffd\u00022\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\t\ufffd\u0003\u0000\ufffdX5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000չ\u0003\u0000۹\u0003\u0000\ufffd\u00022\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000z\u00012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\ufffd\ufffd\u0003\u00008Y5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\ufffd\ufffd\u0003\u0000z\u00012\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\ufffd\u00022\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000xY5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\ufffd\ufffd\u0003\u0000\ufffd\u00022\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\ufffd\u00022\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\u0001\ufffd\u0003\u0000\ufffdY5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\u001d\ufffd\u0003\u0000#\ufffd\u0003\u0000\ufffd\u00022\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\ufffd\u00032\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\u0005\ufffd\u0003\u0000\ufffdY5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000!\ufffd\u0003\u0000'\ufffd\u0003\u0000\ufffd\u00032\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0011\u00042\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000y\ufffd\u0003\u00008Z5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\ufffd\ufffd\u0003\u0000\u0011\u00042\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\ufffd\u00042\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000)\ufffd\u0003\u0000xZ5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000A\ufffd\u0003\u0000G\ufffd\u0003\u0000\ufffd\u00042\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0003\u00052\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\ufffdZ5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\ufffd\ufffd\u0003\u0000\u0003\u00052\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000=\ufffd\u0003\u0000S\ufffd\u0003\u0000\ufffd\ufffd1\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000I\u00052\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000i\ufffd\u0003\u0000\u0018[5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\ufffd\u0003\u0000\ufffd\ufffd\u0003\u0000l\u00052\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\u0007\u0004\u0000\ufffd\u0007\u0004\u0000o\u00072\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000Y\u000b\u0004\u0000o\u000b\u0004\u0000o\u00072\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\ufffd\u0010\u0004\u0000\ufffd\u0010\u0004\u0000o\u00072\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\u0011\u0004\u0000\ufffd\u0011\u0004\u0000o\u00072\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffd\u0012\u0004\u0000\u0015\u0013\u0004\u0000o\u00072\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\ufffd\u0014\u0004\u0000\ufffd\u0014\u0004\u0000o\u00072\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000U\u0016\u0004\u0000k\u0016\u0004\u0000o\u00072\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0019\u0004\u0000\u0007\u0019\u0004\u0000o\u00072\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffd\u001b\u0004\u0000\ufffd\u001b\u0004\u0000o\u00072\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffd+\u0004\u0000\ufffd+\u0004\u0000\u0000\u00082\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000YJ\u0004\u0000uJ\u0004\u0000o\u00072\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\ufffdM\u0004\u0000\ufffdM\u0004\u0000o\u00072\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffdO\u0004\u0000\ufffdO\u0004\u0000\ufffd\u000c2\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\u0001P\u0004\u0000\u0017P\u0004\u0000o\u00072\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000mU\u0004\u0000\ufffdU\u0004\u0000o\u00072\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffdV\u0004\u0000\ufffdV\u0004\u0000o\u00072\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0001X\u0004\u0000\u0017X\u0004\u0000o\u00072\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000CY\u0004\u0000IY\u0004\u0000o\u00072\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000'\\\u0004\u0000-\\\u0004\u0000o\u00072\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000yh\u0004\u0000h\u0004\u0000o\u00072\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000Q|\u0004\u0000g|\u0004\u0000o\u00072\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000o\u00072\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\ufffd\ufffd\u0004\u0000\ufffd]5\u0000Ȏ5\u0000؎5\u0000\ufffd\ufffd5\u0000\ufffd\ufffd5\u0000\u0008\ufffd5\u0000\u0018\ufffd5\u0000(\ufffd5\u00008\ufffd5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000]\ufffd\u0004\u0000g\ufffd\u0004\u0000\u0012\u00152\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffd\u000b\u0005\u0000\ufffd\u000b\u0005\u0000\ufffd\u00152\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\ufffd^5\u0000\ufffd\u0010\u0005\u0000\ufffd\u0010\u0005\u0000\u001d\u0011\u0005\u0000\u0000\u0000\u0000\u0000?\u0011\u0005\u0000\u0008\u0000\u0000\u0000 `3\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\ufffd^5\u0000C\u0011\u0005\u0000u\u0011\u0005\u0000}\u0012\u0005\u0000\u0008\u0000\u0000\u0000\ufffd`3\u0000\ufffd46\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\ufffd\u00172\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\t`\u0005\u0000\ufffd^5\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\ufffd\u00172\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\ufffd`\u0005\u0000\ufffd^5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000Yb\u0005\u0000_b\u0005\u0000\ufffd\u00172\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffds\u0005\u0000\ufffds\u0005\u0000\ufffd\u00192\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffdt\u0005\u0000\ufffdt\u0005\u0000\ufffd\u00192\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\ufffdy\u0005\u0000\ufffdy\u0005\u0000\ufffd\u00192\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0005z\u0005\u0000!z\u0005\u0000i\u001a2\u0000\ufffdd4\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u00009\ufffd\u0005\u0000o\ufffd\u0005\u0000\ufffd\u001e2\u00000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000o\u00072\u0000\ufffdd4\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000o\u00072\u0000\ufffdb4\u0000\u0000\u0000\u0000\u0000\u0014`5\u00009\ufffd\u0005\u0000;\ufffd\u0005\u0000?\ufffd\u0005\u0000g\ufffd\u0005\u0000\ufffd\ufffd\u0005\u0000\ufffd\ufffd\u0005\u0000\ufffd\ufffd\u0005\u0000\ufffd\ufffd\u0005\u0000\ufffd\ufffd\u0005\u0000\u0008\u0000\u0000\u0000\ufffda3\u0000$\u00146\u0000\u0008\u0000\u0000\u0000\ufffdb3\u00001\"2\u00007\"2\u0000;\"2\u0000@\"2\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0003*2\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000\u0000mD\u0006\u00008`5\u0000\ufffd\ufffd5\u0000Ȕ5\u0000\u0000\u0000\u0000\u0000\ufffd`5\u00009\ufffd\u0006\u0000;\ufffd\u0006\u0000?\ufffd\u0006\u0000K\ufffd\u0006\u0000M\ufffd\u0006\u0000O\ufffd\u0006\u0000S\ufffd\u0006\u0000q\ufffd\u0006\u0000\u0008\u0000\u0000\u0000 c3\u0000`\u00146\u0000\u0000\u0000\u0000\u0000\ufffd`5\u0000mL",
   "column": 12772,
   "description": "File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/Realm/Realm.framework/Realm (43330:12772)",
   "recomendation": "Credentials must not be stored in the Git code or repository. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 185737,
   "class": "Realm (185737:12788)",
   "vul_id": "24328aa0d32686756723c4d22ea1e628",
   "method": "\u0000RLMSyncPermissionOffer\u0000\u0018\u0000RLMSyncPermissionOfferResponse\u0000\u0007\u0000RLMProgressNotificationToken\u0000RLMSyncSession\u0000RLMSyncSessionRefreshHandle\u0000T\u0000A\u0000RLMSyncUser\u00002\u0000RealmSync\u0000RLMThreadSafeReference\u0000RLMTokenDataModel\u0000RLMTokenModel\u0000__ARCLite__\u0000__ARCLiteKeyedSubscripting__\u0000@?16@0:8\u0000@16@0:8\u0000v16@0:8\u0000{unique_ptr\u003cid [], std::__1::default_delete\u003cid []\u003e \u003e=\"__ptr_\"{__compressed_pair\u003c__strong id *, std::__1::default_delete\u003cid []\u003e \u003e=\"__first_\"^@}}\u0000@40@0:8{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e={__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=^{ThreadSafeReferenceBase}}}16@24@32\u0000{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e={__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=^{ThreadSafeReferenceBase}}}16@0:8\u0000@40@0:8{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e={__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=^{ThreadSafeReferenceBase}}}16@24@\"RLMRealm\"32\u0000B24@0:8@16\u0000#16@0:8\u0000@24@0:8:16\u0000@32@0:8:16@24\u0000@40@0:8:16@24@32\u0000B16@0:8\u0000B24@0:8#16\u0000B24@0:8@\"Protocol\"16\u0000B24@0:8:16\u0000Vv16@0:8\u0000Q16@0:8\u0000^{_NSZone=}16@0:8\u0000@\"NSString\"16@0:8\u0000@24@0:8Q16\u0000Q24@0:8@16\u0000Q24@0:8@\"RLMObject\"16\u0000Q24@0:8@\"NSString\"16\u0000Q32@0:8@16*24\u0000Q32@0:8@\"NSString\"16*24\u0000Q24@0:8@\"NSPredicate\"16\u0000@24@0:8@16\u0000@\"RLMResults\"24@0:8@\"NSString\"16\u0000@32@0:8@16*24\u0000@\"RLMResults\"32@0:8@\"NSString\"16*24\u0000@\"RLMResults\"24@0:8@\"NSPredicate\"16\u0000@28@0:8@16B24\u0000@\"RLMResults\"28@0:8@\"NSString\"16B24\u0000@\"RLMResults\"24@0:8@\"NSArray\"16\u0000@24@0:8@\"NSString\"16\u0000v32@0:8@16@24\u0000v32@0:8@16@\"NSString\"24\u0000@24@0:8@?16\u0000@\"RLMNotificationToken\"24@0:8@?\u003cv@?@\"\u003cRLMCollection\u003e\"@\"RLMCollectionChange\"@\"NSError\"\u003e16\u0000@\"NSNumber\"24@0:8@\"NSString\"16\u0000@\"RLMRealm\"16@0:8\u0000Q40@0:8^{?=Q^@^Q[5Q]}16^@24Q32\u0000v24@0:8@16\u0000v32@0:8@16Q24\u0000v24@0:8Q16\u0000v32@0:8Q16@24\u0000v32@0:8Q16Q24\u0000v36@0:8@16:24B32\u0000v48@0:8@16@24Q32^v40\u0000@\"NSString\"\u0000@\"RLMObjectBase\"\u0000@\"NSMutableArray\"\u0000B\u0000Q24@0:8Q16\u0000{TableView=^^?{Column\u003clong long\u003e=^^?Q{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e={__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=^{StringIndex}}}{BpTree\u003clong long\u003e={unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e={__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=^{Array}}}}}Q{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{BacklinkColumn}{BasicRow\u003cconst realm::Table\u003e={BasicTableRef\u003crealm::Table\u003e=^{Table}}Q^{RowBase}^{RowBase}}{shared_ptr\u003cconst realm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}Q{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^QQ{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=Q}}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^QQ{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=Q}}}{Query={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}^{QueryGroup}{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}}}{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=^Q^Q{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=^Q}}{shared_ptr\u003cconst realm::Descriptor\u003e=^{Descriptor}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{RowIndexes}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}^{TableViewBase}{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e={__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=^{TableViewBase}}}}QQQ{Optional\u003cunsigned long long\u003e=(?=Qc)B}Q}16@0:8\u0000^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}16@0:8\u0000@96@0:8{List={shared_ptr\u003crealm::Realm\u003e=^{Realm}^{__shared_weak_count}}^{ObjectSchema}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}{Handle\u003crealm::_impl::ListNotifier\u003e=^{ListNotifier}^{__shared_weak_count}}}16@72^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}80@88\u0000@32@0:8@16@24\u0000@48@0:8@1624@40\u0000{List=\"m_realm\"{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\"m_object_schema\"^{ObjectSchema}\"m_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_notifier\"{Handle\u003crealm::_impl::ListNotifier\u003e=\"__ptr_\"^{ListNotifier}\"__cntrl_\"^{__shared_weak_count}}}\u0000@\"RLMRealm\"\u0000^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}\u0000{unique_ptr\u003cRLMObservationInfo, std::__1::default_delete\u003cRLMObservationInfo\u003e \u003e=\"__ptr_\"{__compressed_pair\u003cRLMObservationInfo *, std::__1::default_delete\u003cRLMObservationInfo\u003e \u003e=\"__first_\"^{RLMObservationInfo}}}\u0000@32@0:8@16B24B28\u0000@\"RLMTokenModel\"\u0000@32@0:8@16^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}24\u0000Q32@0:8^{?=Q^@^Q[5Q]}16Q24\u0000[16@]\u0000@\"\u003cRLMFastEnumerable\u003e\"\u0000{TableView=\"_vptr$RowIndexes\"^^?\"m_row_indexes\"{Column\u003clong long\u003e=\"_vptr$ColumnBase\"^^?\"m_column_ndx\"Q\"m_search_index\"{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__first_\"^{StringIndex}}}\"m_tree\"{BpTree\u003clong long\u003e=\"m_root\"{unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__first_\"^{Array}}}}}\"m_debug_cookie\"Q\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_linked_column\"^{BacklinkColumn}\"m_linked_row\"{BasicRow\u003cconst realm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"Q\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\"m_linkview_source\"{shared_ptr\u003cconst realm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_distinct_column_source\"Q\"m_distinct_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^Q\"__size_\"Q\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"Q}}}\"m_sorting_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^Q\"__size_\"Q\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"Q}}}\"m_query\"{Query=\"error_code\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__data_\"*\"__size_\"Q\"__cap_\"Q}\"__s\"{__short=\"__data_\"[23c]\"\"{?=\"__size_\"C}}\"__r\"{__raw=\"__words\"[3Q]})}}}\"m_groups\"{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__begin_\"^{QueryGroup}\"__end_\"^{QueryGroup}\"__end_cap_\"{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__first_\"^{QueryGroup}}}\"m_subtable_path\"{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__begin_\"^Q\"__end_\"^Q\"__end_cap_\"{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"^Q}}\"m_current_descriptor\"{shared_ptr\u003cconst realm::Descriptor\u003e=\"__ptr_\"^{Descriptor}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_view\"^{RowIndexes}\"m_source_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_source_table_view\"^{TableViewBase}\"m_owned_source_table_view\"{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__first_\"^{TableViewBase}}}}\"m_start\"Q\"m_end\"Q\"m_limit\"Q\"m_last_seen_version\"{Optional\u003cunsigned long long\u003e=\"\"(?=\"m_value\"Q\"m_null_state\"c)\"m_engaged\"B}\"m_num_detached_refs\"Q}\u0000@48@0:8{NotificationToken={AtomicSharedPtr\u003crealm::_impl::CollectionNotifier, true\u003e={shared_ptr\u003crealm::_impl::CollectionNotifier\u003e=^{CollectionNotifier}^{__shared_weak_count}}}Q}16@40\u0000{NotificationToken=\"m_notifier\"{AtomicSharedPtr\u003crealm::_impl::CollectionNotifier, true\u003e=\"m_ptr\"{shared_ptr\u003crealm::_impl::CollectionNotifier\u003e=\"__ptr_\"^{CollectionNotifier}\"__cntrl_\"^{__shared_weak_count}}}\"m_token\"Q}\u0000@160@0:8{CollectionChangeSet={IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{IndexSet={vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=^{Chunk}}}}{vector\u003crealm::CollectionChangeSet::Move, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=^{Move}^{Move}{__compressed_pair\u003crealm::CollectionChangeSet::Move *, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=^{Move}}}{vector\u003crealm::IndexSet, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=^{IndexSet}^{IndexSet}{__compressed_pair\u003crealm::IndexSet *, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=^{IndexSet}}}}16\u0000{CollectionChangeSet=\"deletions\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"insertions\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"modifications\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"modifications_new\"{IndexSet=\"m_data\"{vector\u003crealm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__begin_\"^{Chunk}\"__end_\"^{Chunk}\"__end_cap_\"{__compressed_pair\u003crealm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator\u003crealm::_impl::ChunkedRangeVector::Chunk\u003e \u003e=\"__first_\"^{Chunk}}}}\"moves\"{vector\u003crealm::CollectionChangeSet::Move, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=\"__begin_\"^{Move}\"__end_\"^{Move}\"__end_cap_\"{__compressed_pair\u003crealm::CollectionChangeSet::Move *, std::__1::allocator\u003crealm::CollectionChangeSet::Move\u003e \u003e=\"__first_\"^{Move}}}\"columns\"{vector\u003crealm::IndexSet, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=\"__begin_\"^{IndexSet}\"__end_\"^{IndexSet}\"__end_cap_\"{__compressed_pair\u003crealm::IndexSet *, std::__1::allocator\u003crealm::IndexSet\u003e \u003e=\"__first_\"^{IndexSet}}}}\u0000@\"RLMArray\"\u0000@40@0:8@16@24^{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}32\u0000v32@0:8@16@?24\u0000v24@0:8@?16\u0000v40@0:8@16@24@32\u0000^{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}\u0000@\"NSMutableDictionary\"\u0000@32@0:8@16Q24\u0000v48@0:8Q16@24@32@?40\u0000v56@0:8Q16@24@32d40@?48\u0000v64@0:8Q16@24@32@40d48@?56\u0000B40@0:8@16@24^@32\u0000@40@0:8@16@24*32\u0000@24@0:8^{_NSZone=}16\u0000{BasicRow\u003crealm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"Q\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\u0000#\u0000{Object=\"m_realm\"{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\"m_object_schema\"^{ObjectSchema}\"m_row\"{BasicRow\u003crealm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"Q\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\"m_notifier\"{Handle\u003crealm::_impl::ObjectNotifier\u003e=\"__ptr_\"^{ObjectNotifier}\"__cntrl_\"^{__shared_weak_count}}}\u0000@\u0000#20@0:8B16\u0000^{RLMObservationInfo=^{RLMObservationInfo}^{RLMObservationInfo}{BasicRow\u003crealm::Table\u003e={BasicTableRef\u003crealm::Table\u003e=^{Table}}Q^{RowBase}^{RowBase}}^{RLMClassInfo}@BQ@@@}\u0000@\"RLMObjectSchema\"\u0000@24@0:8#16\u0000@28@0:8#16B24\u0000@24@0:8r^{ObjectSchema={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}}16\u0000@40@0:8@16#24@32\u0000{ObjectSchema={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{vector\u003crealm::Property, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}^{Property}{__compressed_pair\u003crealm::Property *, std::__1::allocator\u003crealm::Property\u003e \u003e=^{Property}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}}16@0:8\u0000v20@0:8B16\u0000v24@0:8#16\u0000@\"NSArray\"\u0000@\"RLMProperty\"\u0000@\"NSDictionary\"\u0000q16@0:8\u0000@24@0:8q16\u0000@24@0:8{unique_ptr\u003crealm::PermissionResults, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e={__compressed_pair\u003crealm::PermissionResults *, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e=^{PermissionResults}}}16\u0000q24@0:8@16\u0000@28@0:8Q16B24\u0000{unique_ptr\u003crealm::PermissionResults, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::PermissionResults *, std::__1::default_delete\u003crealm::PermissionResults\u003e \u003e=\"__first_\"^{PermissionResults}}}\u0000v24@0:8:16\u0000@24@0:8r^{Property={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}C{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}BBBQ}16\u0000@52@0:8@16i24@28@36B44B48\u0000v40@0:8^{objc_property=}16^B24^@32\u0000@52@0:8@16B24@28^{objc_property=}36@44\u0000@44@0:8@16B24@28^{objc_property=}36\u0000@40@0:8@16^{objc_ivar=}24@32\u0000@40@0:8@16B24^{objc_ivar=}28i36\u0000@48@0:8@16^{objc_ivar=}24@32@40\u0000{Property={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}C{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}BBBQ}16@0:8\u0000i16@0:8\u0000v20@0:8i16\u0000^{objc_ivar=}16@0:8\u0000v24@0:8^{objc_ivar=}16\u0000:16@0:8\u0000i\u0000^{objc_ivar=}\u0000Q\u0000:\u0000@32@0:8#16@24\u0000@?\u0000v40@0:8@16@24@?32\u0000@40@0:8{shared_ptr\u003crealm::Realm\u003e=^{Realm}^{__shared_weak_count}}16@32\u0000@32@0:8@16^@24\u0000Q40@0:8@16@24^@32\u0000B32@0:8@16^@24\u0000^{Group=^^?{SlabAlloc=^^?Q^{Replication}iQ{atomic\u003cunsigned long long\u003e=AQ}{shared_ptr\u003crealm::SlabAlloc::MappedFile\u003e=^{MappedFile}^{__shared_weak_count}}{unique_ptr\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e [], std::__1::default_delete\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e []\u003e \u003e={__compressed_pair\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e *, std::__1::default_delete\u003cstd::__1::shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e []\u003e \u003e=^{shared_ptr\u003cconst realm::util::File::Map\u003cchar\u003e \u003e}}}Q*QQi{unique_ptr\u003cunsigned long [], std::__1::default_delete\u003cunsigned long []\u003e \u003e={__compressed_pair\u003cunsigned long *, std::__1::default_delete\u003cunsigned long []\u003e \u003e=^Q}}QiBi{vector\u003crealm::SlabAlloc::Slab, std::__1::allocator\u003crealm::SlabAlloc::Slab\u003e \u003e=^{Slab}^{Slab}{__compressed_pair\u003crealm::SlabAlloc::Slab *, std::__1::allocator\u003crealm::SlabAlloc::Slab\u003e \u003e=^{Slab}}}{vector\u003crealm::SlabAlloc::Chunk, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::SlabAlloc::Chunk *, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}}}{vector\u003crealm::SlabAlloc::Chunk, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}^{Chunk}{__compressed_pair\u003crealm::SlabAlloc::Chunk *, std::__1::allocator\u003crealm::SlabAlloc::Chunk\u003e \u003e=^{Chunk}}}B[256{hash_entry=Q*Q}]Q}{Array=^^?^{VTable}*qqQQ^{Allocator}Q^{ArrayParent}QCBBB}{ArrayInteger=^^?^{VTable}*qqQQ^{Allocator}Q^{ArrayParent}QCBBB}{ArrayString=^^?^{VTable}*qqQQ^{Allocator}Q^{ArrayParent}QCBBBB}{vector\u003crealm::Table *, std::__1::allocator\u003crealm::Table *\u003e \u003e=^^{Table}^^{Table}{__compressed_pair\u003crealm::Table **, std::__1::allocator\u003crealm::Table *\u003e \u003e=^^{Table}}}BB{function\u003cvoid (const realm::Group::CascadeNotification \u0026)\u003e={type=[24C]}^{__base\u003cvoid (const realm::Group::CascadeNotification \u0026)\u003e}}{function\u003cvoid ()\u003e={type=[24C]}^{__base\u003cvoid ()\u003e}}}16@0:8\u0000B24@0:8^@16\u0000B32@0:8@?16^@24\u0000{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\u0000{RLMSchemaInfo=\"m_objects\"{unordered_map\u003cNSString *, RLMClassInfo, std::__1::hash\u003cNSString *\u003e, std::__1::equal_to\u003cNSString *\u003e, std::__1::allocator\u003cstd::__1::pair\u003cNSString *const, RLMClassInfo\u003e \u003e \u003e=\"__table_\"{__hash_table\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::__unordered_map_hasher\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::hash\u003cNSString *\u003e, true\u003e, std::__1::__unordered_map_equal\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::equal_to\u003cNSString *\u003e, true\u003e, std::__1::allocator\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e \u003e \u003e=\"__bucket_list_\"{unique_ptr\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *[], std::__1::__bucket_list_deallocator\u003cstd::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e \u003e=\"__ptr_\"{__compressed_pair\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e **, std::__1::__bucket_list_deallocator\u003cstd::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e \u003e=\"__first_\"^^{__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e}\"__second_\"{__bucket_list_deallocator\u003cstd::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e=\"__data_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e *\u003e \u003e=\"__first_\"Q}}}}\"__p1_\"{__compressed_pair\u003cstd::__1::__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e, std::__1::allocator\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e \u003e \u003e=\"__first_\"{__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e=\"__next_\"^{__hash_node_base\u003cstd::__1::__hash_node\u003cstd::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, void *\u003e *\u003e}}}\"__p2_\"{__compressed_pair\u003cunsigned long, std::__1::__unordered_map_hasher\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::hash\u003cNSString *\u003e, true\u003e \u003e=\"__first_\"Q}\"__p3_\"{__compressed_pair\u003cfloat, std::__1::__unordered_map_equal\u003cNSString *, std::__1::__hash_value_type\u003cNSString *, RLMClassInfo\u003e, std::__1::equal_to\u003cNSString *\u003e, true\u003e \u003e=\"__first_\"f}}}}\u0000@\"NSHashTable\"\u0000@\"RLMSchema\"\u0000^{Config={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{BinaryData=*Q}{vector\u003cchar, std::__1::allocator\u003cchar\u003e \u003e=**{__compressed_pair\u003cchar *, std::__1::allocator\u003cchar\u003e \u003e=*}}BC{Optional\u003crealm::Schema\u003e=(?={Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}c)B}Q{function\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e={type=[24C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e}}{function\u003cbool (unsigned long long, unsigned long long)\u003e={type=[24C]}^{__base\u003cbool (unsigned long long, unsigned long long)\u003e}}BBB{Optional\u003cunsigned long\u003e=(?=Qc)B}{shared_ptr\u003crealm::SyncConfig\u003e=^{SyncConfig}^{__shared_weak_count}}B}16@0:8\u0000C16@0:8\u0000v20@0:8C16\u0000{Config=\"path\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__data_\"*\"__size_\"Q\"__cap_\"Q}\"__s\"{__short=\"__data_\"[23c]\"\"{?=\"__size_\"C}}\"__r\"{__raw=\"__words\"[3Q]})}}}\"realm_data\"{BinaryData=\"m_data\"*\"m_size\"Q}\"encryption_key\"{vector\u003cchar, std::__1::allocator\u003cchar\u003e \u003e=\"__begin_\"*\"__end_\"*\"__end_cap_\"{__compressed_pair\u003cchar *, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"*}}\"in_memory\"B\"schema_mode\"C\"schema\"{Optional\u003crealm::Schema\u003e=\"\"(?=\"m_value\"{Schema=\"__begin_\"^{ObjectSchema}\"__end_\"^{ObjectSchema}\"__end_cap_\"{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=\"__first_\"^{ObjectSchema}}}\"m_null_state\"c)\"m_engaged\"B}\"schema_version\"Q\"migration_function\"{function\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e=\"__buf_\"{type=\"__lx\"[24C]}\"__f_\"^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::Realm\u003e, std::__1::shared_ptr\u003crealm::Realm\u003e, realm::Schema \u0026)\u003e}}\"should_compact_on_launch_function\"{function\u003cbool (unsigned long long, unsigned long long)\u003e=\"__buf_\"{type=\"__lx\"[24C]}\"__f_\"^{__base\u003cbool (unsigned long long, unsigned long long)\u003e}}\"cache\"B\"disable_format_upgrade\"B\"automatic_change_notifications\"B\"execution_context\"{Optional\u003cunsigned long\u003e=\"\"(?=\"m_value\"Q\"m_null_state\"c)\"m_engaged\"B}\"sync_config\"{shared_ptr\u003crealm::SyncConfig\u003e=\"__ptr_\"^{SyncConfig}\"__cntrl_\"^{__shared_weak_count}}\"force_sync_history\"B}\u0000@736@0:8^{RLMClassInfo=@@^{ObjectSchema}{vector\u003cRLMObservationInfo *, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}^^{RLMObservationInfo}{__compressed_pair\u003cRLMObservationInfo **, std::__1::allocator\u003cRLMObservationInfo *\u003e \u003e=^^{RLMObservationInfo}}}^{Table}{vector\u003cRLMClassInfo *, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}^^{RLMClassInfo}{__compressed_pair\u003cRLMClassInfo **, std::__1::allocator\u003cRLMClassInfo *\u003e \u003e=^^{RLMClassInfo}}}}16{Results={shared_ptr\u003crealm::Realm\u003e=^{Realm}^{__shared_weak_count}}^{ObjectSchema}{Query={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}^{QueryGroup}{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}}}{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=^Q^Q{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=^Q}}{shared_ptr\u003cconst realm::Descriptor\u003e=^{Descriptor}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{RowIndexes}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}^{TableViewBase}{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e={__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=^{TableViewBase}}}}{TableView=^^?{Column\u003clong long\u003e=^^?Q{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e={__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=^{StringIndex}}}{BpTree\u003clong long\u003e={unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e={__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=^{Array}}}}}Q{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{BacklinkColumn}{BasicRow\u003cconst realm::Table\u003e={BasicTableRef\u003crealm::Table\u003e=^{Table}}Q^{RowBase}^{RowBase}}{shared_ptr\u003cconst realm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}Q{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^QQ{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=Q}}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^QQ{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=Q}}}{Query={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}^{QueryGroup}{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=^{QueryGroup}}}{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=^Q^Q{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=^Q}}{shared_ptr\u003cconst realm::Descriptor\u003e=^{Descriptor}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}^{RowIndexes}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}^{TableViewBase}{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e={__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=^{TableViewBase}}}}QQQ{Optional\u003cunsigned long long\u003e=(?=Qc)B}Q}{shared_ptr\u003crealm::LinkView\u003e=^{LinkView}^{__shared_weak_count}}{BasicTableRef\u003crealm::Table\u003e=^{Table}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^QQ{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=Q}}}{SortDescriptor={vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=^QQ{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=Q}}}{Handle\u003crealm::_impl::ResultsNotifier\u003e=^{ResultsNotifier}^{__shared_weak_count}}iiBB}24\u0000@52@0:8@1624@40B48\u0000{Results=\"m_realm\"{shared_ptr\u003crealm::Realm\u003e=\"__ptr_\"^{Realm}\"__cntrl_\"^{__shared_weak_count}}\"m_object_schema\"^{ObjectSchema}\"m_query\"{Query=\"error_code\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__data_\"*\"__size_\"Q\"__cap_\"Q}\"__s\"{__short=\"__data_\"[23c]\"\"{?=\"__size_\"C}}\"__r\"{__raw=\"__words\"[3Q]})}}}\"m_groups\"{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__begin_\"^{QueryGroup}\"__end_\"^{QueryGroup}\"__end_cap_\"{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__first_\"^{QueryGroup}}}\"m_subtable_path\"{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__begin_\"^Q\"__end_\"^Q\"__end_cap_\"{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"^Q}}\"m_current_descriptor\"{shared_ptr\u003cconst realm::Descriptor\u003e=\"__ptr_\"^{Descriptor}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_view\"^{RowIndexes}\"m_source_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_source_table_view\"^{TableViewBase}\"m_owned_source_table_view\"{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__first_\"^{TableViewBase}}}}\"m_table_view\"{TableView=\"_vptr$RowIndexes\"^^?\"m_row_indexes\"{Column\u003clong long\u003e=\"_vptr$ColumnBase\"^^?\"m_column_ndx\"Q\"m_search_index\"{unique_ptr\u003crealm::StringIndex, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::StringIndex *, std::__1::default_delete\u003crealm::StringIndex\u003e \u003e=\"__first_\"^{StringIndex}}}\"m_tree\"{BpTree\u003clong long\u003e=\"m_root\"{unique_ptr\u003crealm::Array, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::Array *, std::__1::default_delete\u003crealm::Array\u003e \u003e=\"__first_\"^{Array}}}}}\"m_debug_cookie\"Q\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_linked_column\"^{BacklinkColumn}\"m_linked_row\"{BasicRow\u003cconst realm::Table\u003e=\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_row_ndx\"Q\"m_prev\"^{RowBase}\"m_next\"^{RowBase}}\"m_linkview_source\"{shared_ptr\u003cconst realm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_distinct_column_source\"Q\"m_distinct_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^Q\"__size_\"Q\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"Q}}}\"m_sorting_predicate\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^Q\"__size_\"Q\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"Q}}}\"m_query\"{Query=\"error_code\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__data_\"*\"__size_\"Q\"__cap_\"Q}\"__s\"{__short=\"__data_\"[23c]\"\"{?=\"__size_\"C}}\"__r\"{__raw=\"__words\"[3Q]})}}}\"m_groups\"{vector\u003crealm::QueryGroup, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__begin_\"^{QueryGroup}\"__end_\"^{QueryGroup}\"__end_cap_\"{__compressed_pair\u003crealm::QueryGroup *, std::__1::allocator\u003crealm::QueryGroup\u003e \u003e=\"__first_\"^{QueryGroup}}}\"m_subtable_path\"{vector\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__begin_\"^Q\"__end_\"^Q\"__end_cap_\"{__compressed_pair\u003cunsigned long *, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"^Q}}\"m_current_descriptor\"{shared_ptr\u003cconst realm::Descriptor\u003e=\"__ptr_\"^{Descriptor}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_view\"^{RowIndexes}\"m_source_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_source_table_view\"^{TableViewBase}\"m_owned_source_table_view\"{unique_ptr\u003crealm::TableViewBase, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::TableViewBase *, std::__1::default_delete\u003crealm::TableViewBase\u003e \u003e=\"__first_\"^{TableViewBase}}}}\"m_start\"Q\"m_end\"Q\"m_limit\"Q\"m_last_seen_version\"{Optional\u003cunsigned long long\u003e=\"\"(?=\"m_value\"Q\"m_null_state\"c)\"m_engaged\"B}\"m_num_detached_refs\"Q}\"m_link_view\"{shared_ptr\u003crealm::LinkView\u003e=\"__ptr_\"^{LinkView}\"__cntrl_\"^{__shared_weak_count}}\"m_table\"{BasicTableRef\u003crealm::Table\u003e=\"m_ptr\"^{Table}}\"m_sort\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^Q\"__size_\"Q\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"Q}}}\"m_distinct\"{SortDescriptor=\"m_columns\"{vector\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__begin_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}\"__end_cap_\"{__compressed_pair\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e *, std::__1::allocator\u003cstd::__1::vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e \u003e \u003e=\"__first_\"^{vector\u003cconst realm::ColumnBase *, std::__1::allocator\u003cconst realm::ColumnBase *\u003e \u003e}}}\"m_ascending\"{vector\u003cbool, std::__1::allocator\u003cbool\u003e \u003e=\"__begin_\"^Q\"__size_\"Q\"__cap_alloc_\"{__compressed_pair\u003cunsigned long, std::__1::allocator\u003cunsigned long\u003e \u003e=\"__first_\"Q}}}\"m_notifier\"{Handle\u003crealm::_impl::ResultsNotifier\u003e=\"__ptr_\"^{ResultsNotifier}\"__cntrl_\"^{__shared_weak_count}}\"m_mode\"i\"m_update_policy\"i\"m_has_used_table_view\"B\"m_wants_background_updates\"B}\u0000@24@0:8r^{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}16\u0000#24@0:8@16\u0000{Schema=^{ObjectSchema}^{ObjectSchema}{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=^{ObjectSchema}}}16@0:8\u0000{Schema=\"__begin_\"^{ObjectSchema}\"__end_\"^{ObjectSchema}\"__end_cap_\"{__compressed_pair\u003crealm::ObjectSchema *, std::__1::allocator\u003crealm::ObjectSchema\u003e \u003e=\"__first_\"^{ObjectSchema}}}\u0000@248@0:8{SyncConfig={shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}i{function\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e={type=[24C]}^{__base\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e}}{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[24C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}{shared_ptr\u003crealm::sync::ClientHistory::ChangesetCooker\u003e=^{ChangesetCooker}^{__shared_weak_count}}{Optional\u003cstd::__1::array\u003cchar, 64\u003e \u003e=(?={array\u003cchar, 64\u003e=[64c]}c)B}B{Optional\u003cstd::__1::basic_string\u003cchar\u003e \u003e=(?={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}c)B}}16\u0000{SyncConfig={shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}i{function\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e={type=[24C]}^{__base\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e}}{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[24C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}{shared_ptr\u003crealm::sync::ClientHistory::ChangesetCooker\u003e=^{ChangesetCooker}^{__shared_weak_count}}{Optional\u003cstd::__1::array\u003cchar, 64\u003e \u003e=(?={array\u003cchar, 64\u003e=[64c]}c)B}B{Optional\u003cstd::__1::basic_string\u003cchar\u003e \u003e=(?={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}c)B}}16@0:8\u0000@80@0:8@16@24@32Q40{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[24C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}48\u0000{unique_ptr\u003crealm::SyncConfig, std::__1::default_delete\u003crealm::SyncConfig\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::SyncConfig *, std::__1::default_delete\u003crealm::SyncConfig\u003e \u003e=\"__first_\"^{SyncConfig}}}\u0000@\"NSURL\"\u0000@40@0:8@16@24Q32\u0000@144@0:8{Permission={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}i{Condition=i{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{pair\u003cstd::__1::basic_string\u003cchar\u003e, std::__1::basic_string\u003cchar\u003e \u003e={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}}}{Timestamp=qiB}}16\u0000{Permission={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}i{Condition=i{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{pair\u003cstd::__1::basic_string\u003cchar\u003e, std::__1::basic_string\u003cchar\u003e \u003e={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}}}{Timestamp=qiB}}16@0:8\u0000{Optional\u003crealm::Permission\u003e=\"\"(?=\"m_value\"{Permission=\"path\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__data_\"*\"__size_\"Q\"__cap_\"Q}\"__s\"{__short=\"__data_\"[23c]\"\"{?=\"__size_\"C}}\"__r\"{__raw=\"__words\"[3Q]})}}}\"access\"i\"condition\"{Condition=\"type\"i\"user_id\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__data_\"*\"__size_\"Q\"__cap_\"Q}\"__s\"{__short=\"__data_\"[23c]\"\"{?=\"__size_\"C}}\"__r\"{__raw=\"__words\"[3Q]})}}}\"key_value\"{pair\u003cstd::__1::basic_string\u003cchar\u003e, std::__1::basic_string\u003cchar\u003e \u003e=\"first\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__data_\"*\"__size_\"Q\"__cap_\"Q}\"__s\"{__short=\"__data_\"[23c]\"\"{?=\"__size_\"C}}\"__r\"{__raw=\"__words\"[3Q]})}}}\"second\"{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e=\"__r_\"{__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e=\"__first_\"{__rep=\"\"(?=\"__l\"{__long=\"__data_\"*\"__size_\"Q\"__cap_\"Q}\"__s\"{__short=\"__data_\"[23c]\"\"{?=\"__size_\"C}}\"__r\"{__raw=\"__words\"[3Q]})}}}}}\"updated_at\"{Timestamp=\"m_seconds\"q\"m_nanoseconds\"i\"m_is_null\"B}}\"m_null_state\"c)\"m_engaged\"B}\u0000@\"NSDate\"\u0000@36@0:8@16@24B32\u0000@40@0:8@16@24@32\u0000v24@0:8q16\u0000q\u0000v56@0:8i16@20B28@32@40Q48\u0000@\"NSNumber\"\u0000@56@0:8@16@24@32@40@48\u0000@\"NSNumber\u003cRLMInt\u003e\"\u0000@\"NSNumber\u003cRLMBool\u003e\"\u0000@44@0:8@16@24B32B36B40\u0000@40@0:8Q16{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}24\u0000{weak_ptr\u003crealm::SyncSession\u003e=\"__ptr_\"^{SyncSession}\"__cntrl_\"^{__shared_weak_count}}\u0000@32@0:8{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}16\u0000B32@0:8@16@?24\u0000@40@0:8Q16Q24@?32\u0000@56@0:8@16@24{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}32@?48\u0000B32@0:8@16@24\u0000{shared_ptr\u003crealm::SyncSession\u003e=\"__ptr_\"^{SyncSession}\"__cntrl_\"^{__shared_weak_count}}\u0000@\"RLMSyncUser\"\u0000@\"NSTimer\"\u0000v48@0:8@16@24d32@?40\u0000v56@0:8@16@24@32d40@?48\u0000@32@0:8{shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}16\u0000@24@0:8^@16\u0000v48@0:8r^{SyncConfig={shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}{basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}i{function\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e={type=[24C]}^{__base\u003cvoid (const std::__1::basic_string\u003cchar\u003e \u0026, const realm::SyncConfig \u0026, std::__1::shared_ptr\u003crealm::SyncSession\u003e)\u003e}}{function\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e={type=[24C]}^{__base\u003cvoid (std::__1::shared_ptr\u003crealm::SyncSession\u003e, realm::SyncError)\u003e}}{shared_ptr\u003crealm::sync::ClientHistory::ChangesetCooker\u003e=^{ChangesetCooker}^{__shared_weak_count}}{Optional\u003cstd::__1::array\u003cchar, 64\u003e \u003e=(?={array\u003cchar, 64\u003e=[64c]}c)B}B{Optional\u003cstd::__1::basic_string\u003cchar\u003e \u003e=(?={basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e={__compressed_pair\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e::__rep, std::__1::allocator\u003cchar\u003e \u003e={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}c)B}}16{shared_ptr\u003crealm::SyncSession\u003e=^{SyncSession}^{__shared_weak_count}}24@?40\u0000{shared_ptr\u003crealm::SyncUser\u003e=^{SyncUser}^{__shared_weak_count}}16@0:8\u0000{shared_ptr\u003crealm::SyncUser\u003e=\"__ptr_\"^{SyncUser}\"__cntrl_\"^{__shared_weak_count}}\u0000{unique_ptr\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e, std::__1::default_delete\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e \u003e \u003e=\"__ptr_\"{__compressed_pair\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e *, std::__1::default_delete\u003cstd::__1::function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e \u003e \u003e=\"__first_\"^{function\u003crealm::Realm::Config (std::__1::shared_ptr\u003crealm::SyncUser\u003e, std::__1::basic_string\u003cchar\u003e)\u003e}}}\u0000{unique_ptr\u003crealm::ThreadSafeReferenceBase, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=\"__ptr_\"{__compressed_pair\u003crealm::ThreadSafeReferenceBase *, std::__1::default_delete\u003crealm::ThreadSafeReferenceBase\u003e \u003e=\"__first_\"^{ThreadSafeReferenceBase}}}\u0000d16@0:8\u0000v24@0:8d16\u0000d\u0000@\"RLMTokenDataModel\"\u0000v@:\u0000\u003c\u0000%\u0000@\u0000 \u0000\u0014  \u0000%\u0000l\u0000u\u0000 \u0000t\u0000o\u0000t\u0000a\u0000l\u0000 \u0000b\u0000y\u0000t\u0000e\u0000s\u0000\u003e\u0000\u0000\u0000S\u0000U\u0000B\u0000Q\u0000U\u0000E\u0000R\u0000Y\u0000(\u0000\u0026 )\u0000.\u0000@\u0000c\u0000o\u0000u\u0000n\u0000t\u0000 \u0000i\u0000s\u0000 \u0000o\u0000n\u0000l\u0000y\u0000 \u0000s\u0000u\u0000p\u0000p\u0000o\u0000r\u0000t\u0000e\u0000d\u0000 \u0000w\u0000h\u0000e\u0000n\u0000 \u0000c\u0000o\u0000m\u0000p\u0000a\u0000r\u0000e\u0000d\u0000 \u0000w\u0000i\u0000t\u0000h\u0000 \u0000a\u0000 \u0000c\u0000o\u0000n\u0000s\u0000t\u0000a\u0000n\u0000t\u0000 \u0000n\u0000u\u0000m\u0000b\u0000e\u0000r\u0000.\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001c\u0000\u0000\u0000\"\u0000\u0000\u0000\ufffd\u0000\u0000\u0000\u0002\u0000\u0000\u0000\ufffd\u0000\u0000\u0000\t\u0000\u0000\u0000\u0003\u0000\u0000T\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0007\u0000\u0000T\u0001\u0000\u0000T\u001f\u0000\u0000T\u0003\u0000\u0000\u0004\u0000\u0000\u0000\u0004\u000f\u0000\u0000T\u0007\u0000\u0000\u0004\u0000\u0000\u0000R\u001f\u0000\u0000\u0004\u000f\u0000\u0000\u0004\u0017\u0000\u0000T\u0013\u0000\u0000T\u0011\u0000\u0000T\u0003\u0001\u0000T\u0000\u0000\u0000T\u0007\u0001\u0000T\u0007\u0001\u0000\u0004\u0003\u0000\u0000d\u000f\u0001\u0000T\u0003\u0001\u0000\u0004\u0001\u0001\u0000T\u0001\u0001\u0000\u0004\u0001\u0000\u0000d\u0000 \u0000\u0002\u001f\u0001\u0000T\u001f\u0000\u0000d\u0000\u0010\u0000\u0002\u000f\u0001\u0000\u0004\u0011\u0001\u0000T\u0007\u0000\u0000d\ufffd\ufffd7\u0000\ufffd\ufffd7\u0000pX\u0000\u0000\ufffdm\u0000\u0000\u0018\u0001\u0000\u0000\u0010\ufffd\u0000\u0000Xo\u0000\u0000\ufffd\u0001\u0000\u0000\u0018\ufffd\u0004\u0000X\u0000\u0000\u0010\u0010\u0000\u0000\ufffd?",
   "column": 12788,
   "description": "File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/Realm/Realm.framework/Realm (185737:12788)",
   "recomendation": "Credentials must not be stored in the Git code or repository. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 12439,
   "class": "Realm (12439:317)",
   "vul_id": "bb3e3cf179e18f7fd088f4a04ce45315",
   "method": "H9^\u0008\u000f\ufffdG\u0001\u0000\u0000H\ufffd\u0005\u0011w'\u0000H\ufffd\ufffdh\ufffd\ufffd\ufffdH\ufffdE\ufffd\u0000\u0000\u0000\u0000H\ufffdE\ufffd\u0000\u0000\u0000\u0000Hǅx\ufffd\ufffd\ufffd\u0000\u0000\u0000\u0000Hǅp\ufffd\ufffd\ufffd\u0000\u0000\u0000\u0000H\ufffdE\ufffd\u0000\u0000\u0000\u0000H\ufffdE\ufffd\u0000\u0000\u0000\u0000H\ufffdu\ufffd\ufffdE\ufffd\u0000H\ufffdE\ufffd\u0000\u0000\u0000\u0000H\ufffdE\ufffd\u0000\u0000\u0000\u0000H\ufffd\u0006H\ufffd\ufffdH\ufffd\ufffd\ufffdP0H\ufffdE\ufffdH\ufffd]\ufffdH\ufffd\ufffdh\ufffd\ufffd\ufffdH\ufffdu\ufffd\ufffd8\ufffd\ufffd\ufffd\ufffd}\ufffd\u0000t\u001bA\u000f\ufffd\ufffdH\ufffd\ufffdh\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd?\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffdE\ufffdH\ufffdM\ufffd\u000f\ufffdp\ufffd\ufffd\ufffd\u0003\ufffd\ufffd\u0003\u000f\ufffdU\ufffd1ۃ\ufffd\u0002t'\ufffd\ufffd\u0001t'\ufffd\ufffdu*H\ufffd\ufffd\u0000\u0000\u0000\u0001\u000f\ufffd\ufffd\u0000\u0000\u0000H\u000f\ufffd\ufffdH\ufffd\ufffd\u0007H\ufffd\ufffd\u0003H\ufffd\ufffd\ufffd\u000cH\ufffd\ufffd\ufffd\u0007H\u000f\ufffd\ufffdH\ufffd\ufffdH\ufffdp\ufffdH\ufffd\ufffd\u000fH\ufffd\ufffd\ufffdH\ufffdM\ufffdH\ufffdI\u0008H;M\ufffdw\u001f\u000f\ufffdH\ufffdH\ufffd\ufffd\u0010\u000f\ufffdP\ufffdH\ufffd\ufffd\u0008H\t\ufffd\u000f\ufffd@\ufffdH\t\ufffdH9\ufffdwTI\ufffd\u0006H\ufffd@\u0010\ufffdAAAAL\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffdH\ufffd\ufffd\u0007u\u0019H\ufffd\ufffdH\ufffdĈ\u0000\u0000\u0000[A^A_]\ufffdH\ufffd\ufffd\ufffdZ\ufffd\u001d\u0000H\ufffd=o\ufffd$\u0000H\ufffd5^\ufffd$\u0000\ufffd\ufffd\u0001\u0000\u0000E1\ufffdH\ufffd\ufffd\ufffd:\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\u0002\ufffd\ufffd\ufffdH\ufffd\u0004$H\ufffd=%\ufffd$\u0000H\ufffd5W\ufffd$\u0000\ufffd#\u0007\u0000\u00001\ufffdA\ufffd\u0001\u0000\u0000\u0000I\ufffd\ufffd\ufffd\ufffd\ufffd\u0000\u0000H\ufffd=i\ufffd$\u0000H\ufffd54\ufffd$\u0000\ufffd\u0007\u0007\u0000\u0000A\ufffd\u0000\u0000\u0000\u0001\ufffd\ufffd\ufffd\ufffd\ufffdffff.\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000UH\ufffd\ufffdAWAVATSH\ufffd\ufffd\u0010I\ufffd\ufffdI\ufffd\ufffdH\ufffd\ufffdI\ufffd\ufffdL\ufffd\ufffdH)\ufffd\u000f\ufffd\u0006\u0001\u0000\u0000M\ufffdD$8M9\ufffd\u000f\ufffd\u0016\u0001\u0000\u0000L\ufffd\ufffdL)\ufffd\u000f\ufffd%\u0001\u0000\u0000H9\ufffd\u000f\ufffd7\u0001\u0000\u0000I9\ufffdr\tM9\ufffd\u000f\ufffdD\u0001\u0000\u0000I\ufffdD$HH\ufffd@\u0008I;D$Pv",
   "column": 317,
   "description": "File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/Realm/Realm.framework/Realm (12439:317)",
   "recomendation": "Credentials must not be stored in the git code or repository, an attacker could decompile the application and obtain the credential. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 13423,
   "class": "Realm (13423:1595)",
   "vul_id": "67275c9baa74cac25ac457f160fef9d8",
   "method": "1\ufffdH\ufffd\ufffd\ufffdB\ufffd\ufffd\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd@\u0008I;\ufffd\ufffd\u0000\u0000\u0000v\u000e1\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0012\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0000t\"I\ufffd\ufffd@\u0001\u0000\u0000H\ufffd@\u0008I;\ufffdH\u0001\u0000\u0000v\u000eI\ufffd\ufffd\ufffd\u0000\u0000\u00001\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdI\ufffd}\u0008H\ufffd\ufffd\u0008\ufffdS\ufffd\ufffd\ufffdI\ufffd}\u0008H\ufffd\ufffd\u0008\ufffd\u0026\t\ufffd\ufffdH\ufffd\ufffdH\ufffdC\u0008H+\u0003H\ufffd\ufffd\u0004L\u0001\ufffdI\ufffd\ufffd(\u0019\u0000\u0000H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdA\u000f\ufffd\ufffdH\ufffd\ufffd\u0002H\ufffd\u0004ň\u0002\u0000\u0000H\u000f\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffdt\ufffd\tL\ufffd\ufffd\ufffd1\u000e\u0000\u0000I\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd;H\ufffdC\u0008H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdI9\ufffd\u000f\ufffd\\\u0001\u0000\u0000H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdE\ufffd\ufffd\u000f\ufffdX\u0001\u0000\u0000I\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdf\ufffdI\ufffd7H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdI\ufffdG\u0008H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdI\ufffd\ufffdM\ufffd\ufffdtnI\ufffd\\$\ufffdI\ufffdM I\ufffd}(H\u0003\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdH\ufffd\ufffd\ufffd\ufffdI\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd\ufffd\u0000\u0000\u0000H\u0003\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdH\ufffd\ufffd\ufffd\ufffdL\u0001\ufffdH;\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u000f\ufffde\u0006\u0000\u0000M;ePs\u003cI\ufffdM I\ufffd}(H\u0003\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdL\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\u000c\u0011H9\ufffd\u000f\ufffdL\u0006\u0000\u0000H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD\ufffd\ufffdI\ufffd\ufffdh\u0001\u0000\u0000H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffdD\ufffd\ufffdM9\ufffd\u000f\ufffd\ufffd\u000f\ufffd\ufffdI\u0001\ufffdI\ufffd\ufffd\u0010L;\ufffd\ufffd\ufffd\ufffd\ufffd\u000f\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdN\u0001\u0000\u0000H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdB\u0001\u0000\u0000M\ufffd\ufffd\u000f\u001fD\u0000\u0000I\ufffd7H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdI\ufffdG\u0008H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd蓙\ufffd\ufffdI\ufffd\ufffdM\ufffd\ufffd\u000f\ufffd\ufffd\u0000\u0000\u0000I\ufffdv\ufffdI\ufffdM I\ufffd}(H\u0001\ufffd\ufffd\ufffd\u0001u\u0013L\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0019f.\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000L\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\u0007H\ufffdL\u0001\ufffdI\ufffd\ufffd\ufffd\ufffdI\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd\ufffd\u0000\u0000\u0000H\u0003\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdL\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\u0001\ufffdH;\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u000f\ufffd\ufffd\u0004\u0000\u0000M;uPs8I\ufffdM I\ufffd}(H\u0001\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdL\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\u000c\u0011H9\ufffd\u000f\ufffd\ufffd\u0004\u0000\u0000H\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdMC\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd7C\ufffd\ufffdM9\ufffd\u000f\ufffd\ufffdD\u000f\ufffd\ufffdM\u0001\ufffdI\ufffd\ufffd\u0010L;\ufffd\ufffd\ufffd\ufffd\ufffdM\ufffd\ufffd\u000f\ufffd\ufffd\ufffd\ufffd\ufffdI\ufffdM I\ufffd}(H\u0001\ufffd\ufffd\ufffd\u0001I\ufffd\ufffdt\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdL\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffdI\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffdl\ufffd\u0008L9\ufffd\ufffd\ufffd\ufffd\ufffd\u000f\ufffd\ufffd\u0004\u0000\u0000M\u0001\ufffdL9k@\u0006L9kH}\u000bL\ufffd\ufffdL\ufffd\ufffd\ufffdfH\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd3\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd3\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd1\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0000t\u001dH\ufffd\ufffd\ufffd\u0000\u0000\u0000\ufffd\ufffd3\ufffd\ufffdH\ufffd\ufffd\u0018\u0001\u0000\u0000\ufffdA\ufffd\u0018\u000f\ufffdF\u0006\u0000\u0000H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd$\u0011L\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdM\ufffd\u003c\u000cJ\ufffd\u00048H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0003\u0000\u0000\u0000L\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffd\ufffd\u0004\u0000\u0000\u0000L\ufffd\ufffdL\ufffd\ufffdM\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0000t,H\ufffd\ufffdh\u0001\u0000\u0000L\ufffdl\u0000\u0001\ufffd\u0005\u0000\u0000\u0000L\ufffd\ufffdL\ufffd\ufffd\ufffdi/\ufffd\ufffd\ufffd\u0006\u0000\u0000\u0000L\ufffd\ufffdL\ufffd\ufffd\ufffdY/\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd2\ufffd\ufffdH\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\u000c\u0002L\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL9\ufffd\u000f\ufffd\ufffd\u0003\u0000\u0000H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\u0003\ufffd\ufffd\ufffd\ufffd\ufffdI)\ufffdI\ufffd\ufffd\u000f\ufffd\ufffd\u0003\u0000\u0000I\ufffd\ufffdA\u000f\ufffd\ufffd\ufffd\u0000\u0000\u0000\ufffd{\ufffd\ufffd\ufffdI9\ufffdL\ufffd\ufffd\u000f\ufffd\ufffd\u0003\u0000\u0000A\u000f\ufffd\ufffd\ufffd\u0000\u0000\u0000\ufffdb\ufffd\ufffd\ufffdI9\ufffd\u000f\ufffd\ufffd\u0003\u0000\u0000H\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL)\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd.\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd.\ufffd\ufffdL\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdI\ufffd\ufffdM\ufffd\ufffdM+f\u0018M\u0003\u0026I\ufffdN\u0010H\ufffd\ufffdt1\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffdCf\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdI\ufffdG\u0008I\ufffd_8H\ufffd\ufffd\ufffd\u0018\u0000\u0000H\ufffd\ufffd\u0000\u0019\u0000\u0000H\ufffd\ufffd\u0010\ufffd\u0018\u0000\u0000\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffd\ufffd\u0002\u0000\u0000\u0000\ufffd\ufffdH\ufffd\ufffdH\ufffd\ufffd?H\u0001\ufffdH\ufffd\ufffdH9\ufffd\ufffd\ufffd\ufffd\ufffd\u000f\ufffdw\u0003\u0000\u0000I\ufffd\u0006I\ufffdN\u0018I)\ufffdB\ufffd\u0004(AAAAJ\ufffd|(\u0004H\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffdz\ufffd\u000e\u0000I\ufffdG\u0008I\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd\ufffd\u0018\u0000\u0000H\ufffd\ufffd\u0000\u0019\u0000\u0000H\ufffd\ufffd\u0010\ufffd\u0018\u0000\u0000\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0002\u0000\u0000\u0000\ufffd\ufffdH\ufffd\ufffdH\ufffd\ufffd?H\u0001\ufffdH\ufffd\ufffdI9\ufffd\u000f\ufffdA\u0003\u0000\u0000I\ufffd\u0006H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdI+N\u0018\ufffd\u0004\u0008AAAAH\ufffd|\u0008\u0004H\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\u000e\u0000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0000tzI\ufffdG\u0008I\ufffd\ufffd\u0018\u0001\u0000\u0000H\ufffd\ufffd\ufffd\u0018\u0000\u0000H\ufffd\ufffd\u0000\u0019\u0000\u0000H\ufffd\ufffd\u0010\ufffd\u0018\u0000\u0000\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffd\ufffd\u0002\u0000\u0000\u0000\ufffd\ufffdH\ufffd\ufffdH\ufffd\ufffd?H\u0001\ufffdH\ufffd\ufffdH9\ufffd\ufffd\ufffd\ufffd\ufffd\u000f\ufffd\ufffd\u0003\u0000\u0000I\ufffd\u0006M+n\u0018B\ufffd\u0004(AAAAJ\ufffd|(\u0004H\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffdt\ufffd\u000e\u0000H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd\u0010\u0019\u0000\u0000I\ufffdG\u0008H\ufffd\ufffd\ufffd\u0018\u0000\u0000H\ufffd\ufffd\u0000\u0019\u0000\u0000H\ufffd\ufffd\u0010\ufffd\u0018\u0000\u0000\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffd\ufffd\u0002\u0000\u0000\u0000\ufffd\ufffdH\ufffd\ufffdH\ufffd\ufffd?H\u0001\ufffdH\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH9\ufffd\u000f\ufffdz\u0002\u0000\u0000I\ufffd\u0006H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffdI+N\u0018\ufffd\u0004\u0008AAAAH\ufffd|\u0008\u0004I\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\u000e\u0000L\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffdH\ufffd\ufffdX\u0001\u0000\u0000[A\\A]A^A_]\ufffd\u000fW\ufffd\u000f)\ufffd \ufffd\ufffd\ufffdH\ufffd=\u001f\u0008\u0016\u0000H\ufffd50\u0007\u0016\u0000H\ufffd\ufffd \ufffd\ufffd\ufffd\ufffdw\u0001\u0000\u0000\ufffdo\ufffd\ufffd\ufffd\u000fW\ufffd\u000f)\ufffd\u0010\ufffd\ufffd\ufffdH\ufffd=$\u0008\u0016\u0000H\ufffd5\u0007\u0007\u0016\u0000H\ufffd\ufffd\u0010\ufffd\ufffd\ufffd\ufffd{\u0001\u0000\u0000\ufffdF\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffdNZ\ufffd\ufffdH\ufffd\ufffd\ufffdFZ\ufffd\ufffdH\ufffd\ufffd\ufffd\u003eZ\ufffd\ufffdH\ufffd\ufffd\ufffd6Z\ufffd\ufffdH\ufffd\ufffd\ufffd.Z\ufffd\ufffdH\ufffd\ufffd\ufffd\u0026Z\ufffd\ufffd\u000fW\ufffd\u000f)\ufffdP\ufffd\ufffd\ufffdH\ufffd=\ufffd\ufffd\u0014\u0000H\ufffd5E\ufffd\u0015\u0000H\ufffd\ufffdP\ufffd\ufffd\ufffd\ufffd\ufffd\u0005\u0000\u0000\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd=\ufffd\u0006\u0016\u0000H\ufffd5\ufffd\u0006\u0016\u0000\ufffd\u0016\u0001\u0000\u0000\ufffdu`\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdY\ufffd\ufffdH\ufffd=\ufffd\u0007\u0016\u0000H\ufffd5o\u0006\u0016\u0000\ufffd\ufffd\u0001\u0000\u0000H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdM\ufffd\ufffd\ufffdK`\ufffd\ufffdH\ufffd=R\u0008\u0016\u0000H\ufffd5M\u0006\u0016\u0000\ufffd\ufffd\u0001\u0000\u0000\ufffd3`\ufffd\ufffdH\ufffd=\ufffd\u0008\u0016\u0000H\ufffd55\u0006\u0016\u0000\ufffd\ufffd\u0001\u0000\u0000E1\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdY\u0006\u0000\u0000H\ufffd\ufffd聏\ufffd\ufffdH\ufffd=l\u0008\u0016\u0000H\ufffd5\u0003\u0006\u0016\u0000\ufffd\ufffd\u0001\u0000\u0000H\ufffd\ufffdI\ufffd\ufffd\ufffdC\u0006\u0000\u0000H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd'\u0006\u0000\u0000H\ufffd\ufffd\ufffdO\ufffd\ufffd\ufffdH\ufffd=\ufffd\u0008\u0016\u0000H\ufffd5\ufffd\u0005\u0016\u0000\ufffd\ufffd\u0001\u0000\u0000L\ufffd\ufffdI\ufffd\ufffd\ufffd\u0011\u0006\u0000\u0000H\ufffd\ufffd\ufffd\u0019Y\ufffd\ufffdI\ufffd\u0008H\ufffd\ufffd\ufffd\u0018\u0000\u0000\ufffd\u0002\u0000\u0000\u0000\ufffd$\u0010\u0000\u0000H\ufffd\ufffdH\ufffd\ufffd?L\ufffd\u0004\u0001I\ufffd\ufffdH\ufffd=\ufffd\t\u0016\u0000H\ufffd5\ufffd\u0005\u0016\u0000\ufffd\ufffd\u0002\u0000\u0000H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdg_\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdX\ufffd\ufffdI\ufffd\u0008H\ufffd\ufffd\ufffd\u0018\u0000\u0000\ufffd\u0002\u0000\u0000\u0000\ufffd\ufffd\u000f\u0000\u0000H\ufffd\ufffdH\ufffd\ufffd?L\ufffd\u0004\u0001I\ufffd\ufffdH\ufffd=\ufffd\t\u0016\u0000H\ufffd5\u003e\u0005\u0016\u0000\ufffd\ufffd\u0002\u0000\u0000L\ufffd\ufffd\ufffd!_\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdX\ufffd\ufffdI\ufffd\u0008H\ufffd\ufffd\ufffd\u0018\u0000\u0000\ufffd\u0002\u0000\u0000\u0000H\ufffd\ufffd\ufffd\ufffd\u000f\u0000\u0000H\ufffd\ufffdH\ufffd\ufffd?L\ufffd\u0004\u0001I\ufffd\ufffdH\ufffd=^\t\u0016\u0000H\ufffd5\ufffd\u0004\u0016\u0000\ufffd\ufffd\u0002\u0000\u0000H\ufffd\ufffd\ufffd\ufffd^\ufffd\ufffd\u000fW\ufffd\u000f)\ufffd@\ufffd\ufffd\ufffdH\ufffd=o\u0005\u0016\u0000H\ufffd5\ufffd\u0004\u0016\u0000H\ufffd\ufffd@\ufffd\ufffd\ufffd\ufffd\u0017\u0001\u0000\u0000\ufffd\u000f\ufffd\ufffd\ufffd\u000fW\ufffd\u000f)\ufffd\u0000\ufffd\ufffd\ufffdH\ufffd=%\u0006\u0016\u0000H\ufffd5\ufffd\u0004\u0016\u0000H\ufffd\ufffd\u0000\ufffd\ufffd\ufffd\ufffd\ufffd\u0001\u0000\u0000\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdW\ufffd\ufffdI\ufffd\u0008H\ufffd\ufffd\ufffd\u0018\u0000\u0000\ufffd\u0002\u0000\u0000\u0000\ufffd\ufffd\u000e\u0000\u0000H\ufffd\ufffdH\ufffd\ufffd?L\ufffd\u0004\u0001I\ufffd\ufffdH\ufffd=\ufffd\u0008\u0016\u0000H\ufffd5]\u0004\u0016\u0000\ufffd\ufffd\u0002\u0000\u0000H\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u003c^\ufffd\ufffd\u000fW\ufffd\u000f)\ufffd0\ufffd\ufffd\ufffdH\ufffd=j\u0003\u0016\u0000H\ufffd54\u0004\u0016\u0000H\ufffd\ufffd0\ufffd\ufffd\ufffd\ufffd)\u0001\u0000\u0000\ufffds\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd{W\ufffd\ufffdH\ufffd\ufffd\ufffdu\ufffd\u000e\u0000\u000f\u001f\u0000UH\ufffd\ufffdAWAVAUATSH\ufffd\ufffd(I\ufffd\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffdE\ufffdH\ufffd\ufffd\u000f\ufffd%\u0003\u0000\u0000H\ufffdM\ufffd\u000f\ufffd\u001b\u0003\u0000\u0000I\ufffdE\u0008\ufffd\ufffdY\u001a\u0000\u0000\ufffdE\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd]\ufffdI\ufffdE\u0018H\ufffdE\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffdE\ufffdE1\ufffdI\ufffdE I\ufffd}(H\u0003}Ш\u0001t\u0008H\ufffd\u000fH\ufffdD\u0008\ufffdL\ufffd\ufffd\ufffd\ufffdI\ufffd\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000I\ufffd\ufffd\ufffd\u0000\u0000\u0000H\u0001\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdL\ufffd\ufffd\ufffd\ufffdI\ufffd\ufffdI\ufffdt$\u0001I\ufffdM I\ufffd}(H\u0003}\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdH\ufffd\ufffd\ufffd\ufffdM\u0001\ufffdL9\ufffd\u000f\ufffd{\u0001\u0000\u0000\ufffd}\ufffd\u0000\u000f\ufffdz\u0001\u0000\u0000I\ufffd\ufffd\u0000\u0001\u0000\u0000I\ufffd\ufffd\u0008\u0001\u0000\u0000H\u0003}\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdL\ufffd\ufffd\ufffd\ufffdI;\ufffdp\u0001\u0000\u0000\u000f\ufffd\u0018\u0002\u0000\u0000I\ufffd\ufffd\u0000\u0001\u0000\u0000I\ufffd\ufffd\u0008\u0001\u0000\u0000H\u0003}\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdH\ufffd\ufffd\ufffd\ufffdI;\ufffdp\u0001\u0000\u0000\u000f\ufffd\ufffd\u0001\u0000\u0000I\ufffd\ufffd\ufffd\u0000\u0000\u0000I\ufffd\ufffd\ufffd\u0000\u0000\u0000H\u0003}\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdH\ufffd\ufffd\ufffd\ufffdL\u0001\ufffdL\ufffd}\ufffdL\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd'\ufffd\ufffdM\ufffdt$\u0002I\ufffdUPH\ufffd}\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd0\ufffd\ufffdI\ufffdMPH\ufffd\ufffdI\ufffdMPH\ufffd\ufffd\u0000\u0000\u0000\u0001\u000f\ufffd\ufffd\u0001\u0000\u0000I\ufffdE8H\ufffd\ufffdH\ufffd\ufffd\u0010\ufffdP\ufffd\ufffdh\ufffd\ufffdH\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000L\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd0\ufffd\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd\u0000\u0000\u0000\u0001\u000f\ufffd\ufffd\u0001\u0000\u0000I\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffdH\ufffd\ufffd\u0010\ufffdP\ufffd\ufffdh\ufffd\ufffdH\ufffdI\ufffd\ufffd0\u0001\u0000\u0000H\ufffd}\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffdr0\ufffd\ufffdI\ufffd\ufffd0\u0001\u0000\u0000H\ufffd\ufffdI\ufffd\ufffd0\u0001\u0000\u0000H\ufffd\ufffd\u0000\u0000\u0000\u0001\u000f\ufffd8\u0001\u0000\u0000I\ufffd\ufffd\u0018\u0001\u0000\u0000\ufffd\ufffd\u0000\u0000\u0000\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000H\ufffd]\ufffd\ufffd\ufffd\u0000\u0000\u0000I\ufffd\ufffd\ufffd\u0000\u0000\u0000I\ufffd\ufffd\ufffd\u0000\u0000\u0000H\u0003}\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdH\ufffd\ufffd\ufffd\ufffdL\u0001\ufffdL\ufffd}\ufffdL\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffdn\u0026\ufffd\ufffdM\ufffdt$\u0002I\ufffdUPH\ufffd}\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffdI\ufffdMPH\ufffd\ufffdI\ufffdMPH\ufffd\ufffd\u0000\u0000\u0000\u0001\u000f\ufffd\ufffd\u0000\u0000\u0000I\ufffdE8H\ufffd\ufffdH\ufffd\ufffd\u0010\ufffdP\ufffd\ufffdh\ufffd\ufffdH\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000L\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd\u0000\u0000\u0000\u0001soI\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffdH\ufffd\ufffd\u0010\ufffdP\ufffd\ufffdh\ufffd\ufffdH\ufffdL\ufffd\ufffdH\ufffdM\ufffdI\ufffd\ufffd\ufffd\u0018H\ufffd]\ufffd\ufffd\u0012H\ufffd]\ufffdfffff.\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000I\ufffd\ufffdL;e\ufffd\u000f\ufffd\u0013\ufffd\ufffd\ufffdH\ufffd\ufffd([A\\A]A^A_]\ufffdH\ufffd\ufffd\ufffd\u000cT\ufffd\ufffdH\ufffd\ufffd\ufffd\u0004T\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdS\ufffd\ufffdH\ufffd=\ufffd\ufffd\u0014\u0000H\ufffd5%\ufffd\u0015\u0000\ufffd\ufffd\u0006\u0000\u0000A\ufffd\ufffd\ufffd\ufffd\u0000\ufffdnZ\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdS\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdS\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdS\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdS\ufffd\ufffdfffff.\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000UH\ufffd\ufffdAWAVSPI\ufffd\ufffdH\ufffd\ufffdH\ufffd\ufffd\ufffd\u0000\u0000\u0000I\ufffd\ufffd\ufffd\u0003\u0000\u0000w\u0008L\ufffdE\ufffd1\ufffd\ufffdII\ufffd\ufffdI\ufffd\ufffdL\ufffdE\ufffdH\ufffd\ufffdL\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\u0004\u0000\u0000\ufffd}\ufffd\u0000u\u003cL\ufffdE\ufffd1\ufffdH\ufffd\ufffdL\ufffd\ufffdL\ufffd\ufffd\ufffd H\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\u0008\u0000\u0000H\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffdQ\ufffdL\ufffdE\ufffdH\ufffd\ufffdL\ufffd\ufffd\ufffdD\u0004\u0000\u0000\ufffd}\ufffd\u0000t\ufffdH\ufffd\ufffd\u0008[A^A_]\ufffd\u000f\u001f\u0000UH\ufffd\ufffd\u000f\ufffdGh]\ufffdf\u000f\u001fD\u0000\u0000UH\ufffd\ufffdH\ufffd\ufffd0\ufffdE\ufffd\u0001\u0000\u0000\u0000H\ufffdM\ufffd\ufffdE\ufffd\u0001\u0000\u0000\u0000L\ufffdE\ufffdH\ufffdE\ufffdH\ufffdE\ufffdH\ufffdE\ufffd\u0002\u0000\u0000\u0000H\ufffdM\ufffd\ufffdɘ\ufffd\ufffdf\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000UH\ufffd\ufffdAWAVAUATSPM\ufffd\ufffdI\ufffd\ufffdH\ufffd\ufffdI\ufffd\ufffdH\ufffd}\ufffdH\ufffdO\u0008H\ufffd\ufffd\ufffd\u0018\u0000\u0000H\ufffd\ufffd\u0000\u0019\u0000\u0000H\ufffd\ufffd\u0011\ufffd\u0018\u0000\u0000\ufffd\u0001t\u0008H\ufffd\u000fH\ufffdD\u0008\ufffd\ufffd\u0002\u0000\u0000\u0000\ufffd\ufffdM\ufffd,\u001fH\ufffd\ufffdH\ufffd\ufffd?H\u0001\ufffdH\ufffd\ufffdI9\ufffdw\u003eI\ufffd\u0004$I+\\$\u0018\ufffd\u0004\u0018AAAAH\ufffd|\u0018\u0004I\ufffd\ufffd\u0004I\ufffd\ufffd\ufffdL\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\u0008[A\\A]A^A_]\ufffdQ\ufffd\u000e\u0000H\ufffd\ufffd\ufffd1R\ufffd\ufffdH\ufffdE\ufffdH\ufffdx\u0008H\ufffd\ufffd\ufffd\u0018\u0000\u0000\ufffd\u0002\u0000\u0000\u0000\ufffd8\t\u0000\u0000H\ufffd\ufffdH\ufffd\ufffd?L\ufffd\u0004\u0001I\ufffd\ufffdH\ufffd=\u0005\u0003\u0016\u0000H\ufffd5\ufffd\ufffd\u0015\u0000\ufffd\ufffd\u0002\u0000\u0000L\ufffd\ufffd\ufffdX\ufffd\ufffdffffff.\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000UH\ufffd\ufffdAWAVATSI\ufffd\ufffdE1\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000\u0000tVE1\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000\u0000tIM\ufffd\ufffd\ufffd\u0000\u0000\u00001\ufffdE1\ufffdfff.\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000I\ufffd\ufffd\ufffd\u0000\u0000\u0000I\ufffd\ufffd\ufffd\u0000\u0000\u0000L\u0001\ufffd\ufffd\u0001t\u0008H\ufffd\u000fH\ufffdD\u0008\ufffdH\ufffd\ufffd\ufffd\ufffdI\u0001\ufffdH\ufffd\ufffdI;\ufffd\ufffd\u0000\u0000\u0000r\ufffdL\ufffd\ufffd[A\\A^A_]\ufffdH\ufffd\ufffd\ufffd[Q\ufffd\ufffdff.\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000UH\ufffd\ufffdAWAVAUATSH\ufffd\ufffd8I\ufffd\ufffdH\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\u0007\u000f\ufffd\ufffd\u0001\u0000\u0000H\ufffd\ufffdL\ufffd\ufffd\ufffdq\ufffd\ufffd\ufffdI\ufffd\ufffdI\ufffd\ufffdH\ufffdC\u0008H\ufffdK \ufffd\ufffdY\u001a\u0000\u0000L\ufffds\u0018H\ufffd{(L\u0001\ufffd\ufffd\ufffd\u0001u\u0005\ufffdE\ufffd\ufffd\u000b\ufffdE\ufffdH\ufffd\u0007H\ufffdL\u0001\ufffdL\ufffd\ufffd\ufffd\ufffdM9\ufffd\u000f\ufffd~\u0001\u0000\u0000A\ufffd\ufffd\u0007\u000f\ufffd\ufffd\u0001\u0000\u0000H\ufffdE\ufffdM)\ufffd\u000f\ufffd\ufffd\u0000\u0000\u0000M\ufffd\ufffdI\ufffd\ufffdH\ufffdSPL\ufffd\ufffdL\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd+\ufffd\ufffdH\ufffdKPH\ufffd\ufffdH\ufffdKPH\ufffd\ufffd\u0000\u0000\u0000\u0001\u000f\ufffd\ufffd\u0000\u0000\u0000H\ufffdC8H\ufffd\ufffdH\ufffd\ufffd\u0010\ufffdP\ufffd\ufffdh\ufffd\ufffdH\ufffdH\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd\ufffd\u0000\u0000\u0000L\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd+\ufffd\ufffdH\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffdH\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd\u0000\u0000\u0000\u0001\u000f\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffdH\ufffd\ufffd\u0010\ufffd}\ufffd\u0000\ufffdP\ufffd\ufffdh\ufffd\ufffdH\ufffdtsH\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd0\u0001\u0000\u0000L\ufffd\ufffdL\ufffd\ufffd\ufffd7+\ufffd\ufffdH\ufffd\ufffd0\u0001\u0000\u0000H\ufffd\ufffdH\ufffd\ufffd0\u0001\u0000\u0000H\ufffd\ufffd\u0000\u0000\u0000\u0001s[H\ufffd\ufffd\u0018\u0001\u0000\u0000H\ufffd\ufffdH\ufffd\ufffd\u0010\ufffdP\ufffd\ufffdh\ufffd\ufffdH\ufffd\ufffd'L\u0003e\ufffdL\ufffd\ufffdL\ufffd\ufffdL\ufffd\ufffd\ufffdb!\ufffd\ufffdH\ufffdÈ\u0000\u0000\u0000H\ufffd\ufffdL\ufffd\ufffdL\ufffd\ufffd\ufffdM!\ufffd\ufffdH\ufffdE\ufffd\ufffd\u0007\u000f\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd8[A\\A]A^A_]\ufffdH\ufffd=l\ufffd\u0014\u0000H\ufffd5\ufffd\ufffd\u0015\u0000\ufffd\ufffd\u0006\u0000\u0000A\ufffd\ufffd\ufffd\ufffd\u0000\ufffd\u0014V\ufffd\ufffdH\ufffd=#\ufffd\u0015\u0000H\ufffd5\u0016\ufffd\u0015\u0000\ufffd\u0017\u0002\u0000\u0000E1\ufffd\ufffdi\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffdaO\ufffd\ufffdH\ufffd= \ufffd\u0015\u0000H\ufffd5\ufffd\ufffd\u0015\u0000\ufffd!\u0002\u0000\u0000L\ufffd\ufffdM\ufffd\ufffd\ufffd\ufffdU\ufffd\ufffd\u000fW\ufffd\u000f)E\ufffdH\ufffd= \ufffd\u0015\u0000H\ufffd5\ufffd\ufffd\u0015\u0000H\ufffdM\ufffd\ufffd\"\u0002\u0000\u0000\ufffd\u0010\ufffd\ufffd\ufffd\u000fW\ufffd\u000f)E\ufffdH\ufffd=%\ufffd\u0015\u0000H\ufffd5\ufffd\ufffd\u0015\u0000H\ufffdM\ufffd\ufffd4\u0002\u0000\u0000\ufffd\ufffd\ufffd\ufffd\ufffdffff.\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000UH\ufffd\ufffdAWAVAUATSH\ufffd\ufffd\ufffd\u0000\u0000\u0000I\ufffd\ufffdL\ufffdm\ufffdH\ufffd\ufffdx\ufffd\ufffd\ufffdH\ufffd\ufffdH\ufffd\ufffd0\ufffd\ufffd\ufffdE1\ufffdL9\ufffd\u000f\ufffd\ufffd\u0001\u0000\u0000L\ufffd\ufffd(\ufffd\ufffd\ufffdH\ufffdC\u0008\ufffd\ufffdY\u001a\u0000\u0000\ufffd\ufffd'\ufffd\ufffd\ufffdH\ufffd\ufffd\u0008H\ufffd\ufffd`\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffdE\ufffdH\ufffdF\ufffdH\ufffdE\ufffdH\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffdh\ufffd\ufffd\ufffdH\ufffdC\u0018H\ufffd\ufffdp\ufffd\ufffd\ufffd\ufffd\ufffd\u000f\ufffd\ufffd\u0001\u0000\u0000H\ufffd\ufffdx\ufffd\ufffd\ufffdH\ufffd\u0005\ufffd=\u0018\u0000H\ufffd\ufffd\u0010H\ufffd\ufffdX\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdfH\u000fn\ufffd\u000f)\ufffd@\ufffd\ufffd\ufffdf\u000f\u001fD\u0000\u0000H9\ufffd\ufffd\u0000\u0000\u0000\u000f\ufffd8\u0003\u0000\u0000H\ufffd\ufffdX\ufffd\ufffd\ufffdH\ufffdE\ufffd\u000f(\u0005\u0011|\u0014\u0000\u000f\u0011E\ufffd\u000f(\ufffd@\ufffd\ufffd\ufffd\u000f\u0011E\ufffdH\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffdAPH\ufffdyXH\u0003}\ufffd\ufffd\u0001t\u0008H\ufffd\u000fH\ufffdD\u0008\ufffdE1\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdE1\ufffdH\ufffdu\ufffdL\ufffdM\ufffd\ufffd\ufffdL\ufffdu\ufffdI\ufffd\ufffd\ufffd\u000f\ufffd\u0012\u0002\u0000\u0000H\ufffd\ufffd\u0000\u0001\u0000\u0000H\ufffd\ufffd\u0008\u0001\u0000\u0000H\u0003\ufffdh\ufffd\ufffd\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdL\ufffd\ufffd\ufffd\ufffdI\ufffdV\u0001H;\ufffdp\u0001\u0000\u0000\u000f\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd\ufffd\u0000\u0000\u0000H\u0003}\ufffd\ufffd\ufffd\u0001u\u000fH\ufffd\ufffd8\ufffd\ufffd\ufffd\ufffd\u0015f\u000f\u001fD\u0000\u0000H\ufffd\ufffd8\ufffd\ufffd\ufffdH\ufffd\u0007H\ufffdL\u0001\ufffdL\ufffd\ufffd\ufffd\ufffdI\ufffd\ufffdH\ufffdK H\ufffd{(H\u0003\ufffdp\ufffd\ufffd\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdL\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd`\ufffd\ufffd\ufffdH\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffdx\ufffd\ufffd\ufffdI\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffdI\ufffd\ufffdM\ufffd\ufffdH\ufffd\ufffd8\ufffd\ufffd\ufffd\u000f\ufffdj\u0001\u0000\u0000E1\ufffdL\ufffdm\ufffdL9\ufffd\u000f\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd8\u0001\u0000\u0000L\ufffd\ufffd1\ufffd\ufffd\ufffd\u0001\u0000\u0000H\ufffd\u0005C\u003c\u0018\u0000H\ufffd\ufffd\u0010H\ufffd\ufffdX\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdfH\u000fn\ufffd\u000f)\ufffd@\ufffd\ufffd\ufffd\u000f\u001fD\u0000\u0000H9\ufffd\ufffd\u0000\u0000\u0000\u000f\ufffd\ufffd\u0001\u0000\u0000H\ufffd\ufffdX\ufffd\ufffd\ufffdH\ufffdE\ufffd\u000f(\u0005\ufffdz\u0014\u0000\u000f\u0011E\ufffd\u000f(\ufffd@\ufffd\ufffd\ufffd\u000f\u0011E\ufffdH\ufffd\ufffd\ufffd\u0000\u0000\u0000I\ufffd\ufffdH\ufffdXPH\ufffdxXH\u0003}\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffd\\\u0003\ufffdE1\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdE1\ufffdH\ufffdu\ufffdL\ufffdM\ufffd\ufffd\ufffdL\ufffdu\ufffdI\ufffd\ufffd\ufffd\u000f\ufffd\ufffd\u0000\u0000\u0000I\ufffd\ufffd$\ufffd\u0000\u0000\u0000I\ufffd\ufffd$\ufffd\u0000\u0000\u0000H\u0003}\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdL\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffdI\ufffdL$ I\ufffd|$(H\u0003\ufffdp\ufffd\ufffd\ufffd\ufffd\ufffd\u0001t\u0008H\ufffd\u0007H\ufffdL\u0001\ufffdL\ufffd\ufffd\ufffd\ufffdM\ufffdf\u0001H\ufffd\ufffd`\ufffd\ufffd\ufffdH\ufffd\ufffdH\ufffd\ufffdH\ufffd\ufffdx\ufffd\ufffd\ufffdI\ufffd\ufffd\ufffd\u000e\ufffd\ufffd\ufffdI\ufffd\ufffdM\ufffd\ufffdu+E1\ufffdL\ufffdm\ufffdM9\ufffdH\ufffd\ufffd0\ufffd\ufffd\ufffdL\ufffd\ufffd\u000f\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd1\ufffdL\ufffd\ufffd(\ufffd\ufffd\ufffd\ufffd\ufffd\u0000\u0000\u0000L\ufffd\ufffdL\ufffd\ufffd8\ufffd\ufffd\ufffd\ufffd\u0006L\ufffd\ufffdL\ufffd\ufffdA\ufffd\u0001M\ufffd\ufffdH\ufffd\ufffdI)\ufffdtnH\ufffd\ufffdp\ufffd\ufffd\ufffdL\ufffd\ufffdH\ufffdU\ufffd\ufffdh/\ufffd\ufffdH\ufffd}\ufffdL\ufffd\ufffdL\ufffd\ufffd\ufffdY/\ufffd\ufffd\ufffd\ufffd'\ufffd\ufffd\ufffd\u0000t\u00111\ufffdH\ufffd\ufffdh\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd?/\ufffd\ufffdH\ufffd\ufffdp\ufffd\ufffd\ufffdL\ufffd\ufffd8\ufffd\ufffd\ufffdL\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\u001c\ufffd\ufffdH\ufffdE\ufffdL)\ufffdH\u0001\ufffdH\ufffd}\ufffdL\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd\u001c\ufffd\ufffdL\ufffd\ufffdL\ufffd\ufffd(\ufffd\ufffd\ufffdE\ufffd8H\ufffd\ufffdH\ufffdĸ\u0000\u0000\u0000[A\\A]A^A_]\ufffd\u000fW\ufffd\u000f)E\ufffdH\ufffd=\ufffd\ufffd\u0015\u0000H\ufffd5\ufffd\u0015\u0000H\ufffdM\ufffd\ufffd\t\u000c\u0000\u0000踐\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdJ\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdJ\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdJ\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdJ\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdJ\ufffd\ufffdUH\ufffd\ufffdAWAVAUATSH\ufffd\ufffd(I\ufffd\ufffdI\ufffd\ufffdI\ufffd^\u0008\ufffd\ufffdY\u001a\u0000\u0000\ufffdE\ufffdH\ufffd\ufffd\ufffd\u0018\u0000\u0000H\ufffd\ufffd\u0000\u0019\u0000\u0000H\ufffd\ufffd\u000b\ufffd\u0018\u0000\u0000\ufffd\u0001t\u0008H\ufffd\u000fH\ufffdD\u0008\ufffd\ufffd\u0002\u0000\u0000\u0000\ufffd\ufffdL\ufffdc\u0008I\ufffd\ufffdI\ufffd\ufffd?I\u0001\ufffdI\ufffd\ufffdM\u0001\ufffdL\ufffd\ufffdL\ufffd\ufffd\ufffdt\ufffd\ufffd\ufffdH\ufffdKxL9\u003c\ufffdt\u0014L\ufffd\ufffdL\ufffd\ufffd\ufffd_\ufffd\ufffd\ufffdH\ufffdKxL\ufffd|\ufffd\u0008L\ufffd\ufffdH\ufffd\ufffd\u0007\u000f\ufffd\ufffd\u0000\u0000\u0000M\ufffd\ufffdM)\ufffd\u000f\ufffd\ufffd\u0000\u0000\u0000I\ufffd~\u0010L\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\u0007\u000f\ufffd\ufffd\u0000\u0000\u0000I\ufffd^PI\ufffd~\u0018H\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd-\ufffd\ufffdI\ufffd\ufffd\ufffd\u0000\u0000\u0000I\ufffd\ufffd\ufffd\u0000\u0000\u0000L\ufffd\ufffd\ufffd\ufffd-\ufffd\ufffd\ufffd}\ufffd\u0000t\u0015I\ufffd\ufffd\ufffd\u0000\u0000\u0000I\ufffd\ufffd0\u0001\u0000\u00001\ufffd\ufffd\ufffd-\ufffd\ufffdI\ufffd~\u0008H\ufffd\ufffd\ufffd\u0018\u0000\u0000K\ufffdT?\u0001\ufffd\u0002\u0000\u0000\u0000\ufffd\u0016\u001b\ufffd\ufffdM9\ufffdtqH\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd([A\\A]A^A_]\ufffdH\ufffd\ufffd\ufffddI\ufffd\ufffdH\ufffd=\ufffd\ufffd\u0015\u0000H\ufffd5\ufffd\ufffd\u0015\u0000\ufffd\ufffd\u0002\u0000\u0000E1\ufffd\ufffdI\ufffd\ufffd\ufffdH\ufffd=\ufffd\ufffd\u0015\u0000H\ufffd5\ufffd\ufffd\u0015\u0000\ufffd\ufffd\u0002\u0000\u0000L\ufffd\ufffdM\ufffd\ufffd\ufffd\ufffdO\ufffd\ufffdH\ufffd=\ufffd\ufffd\u0015\u0000H\ufffd5\ufffd\ufffd\u0015\u0000\ufffd\ufffd\u0002\u0000\u0000E1\ufffd\ufffd\u0010\ufffd\ufffd\ufffd\u000fW\ufffd\u000f)E\ufffdH\ufffd=\ufffd\ufffd\u0015\u0000H\ufffd5\ufffd\ufffd\u0015\u0000H\ufffdM\ufffd\ufffd\ufffd\u0002\u0000\u0000\ufffdݎ\ufffd\ufffdffff.\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000UH\ufffd\ufffdH\ufffdG\u0008H\u0003\u0010\ufffd\u0001t\u0008H\ufffd\u000fH\ufffdD\u0008\ufffd\ufffd\ufffd]\ufffdH\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffdfff.\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000UH\ufffd\ufffdAWAVATSI\ufffd\ufffdI\ufffd\ufffdI\ufffd\ufffdL\ufffd\ufffd\ufffdD\ufffd\ufffd\ufffdH\ufffd\ufffdH\ufffd\ufffdH\ufffd\ufffd\u0007uZL\ufffd\ufffdH\ufffd\ufffdL\ufffd\ufffd\ufffdj\ufffd\ufffd\ufffdI\ufffd\ufffdI+\\$\u0018I\u0003\u001c$I\ufffdL$\u0010H\ufffd\ufffdt1\ufffdH\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffdQ\ufffd\ufffdM\ufffd\ufffdt\u000eH\ufffd\ufffdL\ufffd\ufffdL\ufffd\ufffd\ufffdb\ufffd\u000e\u0000L\ufffd\ufffdH\ufffd\ufffdL\ufffd\ufffd[A\\A^A_]\ufffd.\ufffd\ufffd\ufffdH\ufffd=\u0006\ufffd\u0015\u0000H\ufffd5\ufffd\ufffd\u0015\u0000\ufffd\ufffd\u0002\u0000\u0000E1\ufffd\ufffd\u0013\ufffd\ufffd\ufffd\u000f\u001f\u0000UH\ufffd\ufffdAWAVAUATSP\ufffdM\ufffdI\ufffd\ufffdI\ufffd\ufffdH\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdI\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\u0007umH\ufffd\ufffdL\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffdM\ufffd\ufffdL+c\u0018L\u0003#H\ufffdK\u0010H\ufffd\ufffdt1\ufffdL\ufffd\ufffdL\ufffd\ufffd\ufffd\u0011Q\ufffd\ufffd\ufffdE\ufffdA\ufffd\u0004$I\ufffd|$\u0004I\ufffd\ufffd\u0004I\ufffdU\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\u000e\u0000H\ufffd\ufffdL\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd\u0008[A\\A]A^A_]\ufffdH\ufffd=M\ufffd\u0015\u0000H\ufffd5\u0007\ufffd\u0015\u0000\ufffd\ufffd\u0002\u0000\u0000E1\ufffd\ufffdZ\ufffd\ufffd\ufffdf.\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000UH\ufffd\ufffdAWAVAUATSH\ufffd\ufffd(I\ufffd\ufffdH\ufffd\ufffd1\ufffd\ufffd\u0018\u0000\u0000\u0000\ufffd\u001d\ufffd\ufffd\ufffdI\ufffd\ufffdM\ufffd\u003eI\ufffdN\u0010M+~\u0018H\ufffd\ufffdt\u000f\ufffd\u0018\u0000\u0000\u00001\ufffdL\ufffd\ufffd\ufffdkP\ufffd\ufffdH\ufffdC\u0010\ufffd@\u0018=\u0000\u0001\u0000\u0000\u000f\ufffd\ufffd\u0000\u0000\u0000E\u000f\ufffdo\u0017A\ufffd\ufffd\u0001D\ufffd\ufffd\ufffd\ufffd\u0001M\ufffd$\ufffdA\ufffdD\u000f\u0014\ufffd\ufffd\ufffd\u000e\u0000A\ufffdĺ\u0018\u0000\u0000\u0000L\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdE\ufffd\ufffdt\"E\ufffdo\u0017\ufffd\u0018\u0000\u0000\u0000L\ufffd\ufffdL\ufffd\ufffdH\ufffd\ufffd([A\\A]A^A_]\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffdH\ufffd\ufffdx\u0001\u0000\u0000L\ufffd\ufffd\ufffd\u0001\u0000\u0000L9\ufffdt)fff.\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000H\ufffd\u0003H\ufffd8H\ufffd\ufffdtFH\ufffdp\u0008\ufffdl:\ufffd\ufffdH\ufffd\ufffd\u0008I9\ufffdu\ufffdE\ufffdo\u0017\ufffd\u0018\u0000\u0000\u0000L\ufffd\ufffdL\ufffd\ufffd\ufffdO\ufffd\ufffd\ufffdI\ufffd\u003eH\ufffd\ufffdt\u0018I\ufffdv\u0008\ufffd\u003e:\ufffd\ufffdH\ufffd\ufffd([A\\A]A^A_]\ufffd\u000fW\ufffd\u000f)E\ufffdH\ufffd=\ufffd\ufffd\u0015\u0000H\ufffd5h\ufffd\u0015\u0000H\ufffdM\ufffd\ufffd*\u0004\u0000\u0000\ufffd\ufffd\ufffd\ufffd\ufffd\u000fW\ufffd\u000f)E\ufffdH\ufffd=D\ufffd\u0015\u0000H\ufffd5\ufffd\ufffd\u0015\u0000H\ufffdM\ufffd\ufffd\u0010\u0003\u0000\u0000\ufffdً\ufffd\ufffdf\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000UH\ufffd\ufffdAWAVAUATSH\ufffd\ufffd\u0018H\ufffd\ufffdI\ufffd\ufffdM\ufffdl$\u0010I\ufffdD$\u0018I9\ufffd\u000f\ufffd\ufffd\u0002\u0000\u0000I\ufffd\u0014$M\ufffdt$\u0008L\ufffd\ufffdH)\ufffd\u000f\ufffd\ufffd\u0000\u0000\u0000H\ufffd\ufffd\u0003H\ufffdA\u0001H\ufffd\ufffd?H\ufffdD\u0001\u0001H\ufffd\ufffdI\ufffd\ufffdI\ufffd\ufffdH\ufffd\ufffd\u0003L\ufffd\ufffdH)\ufffdH\ufffdM\ufffdM9\ufffd\u000f\ufffd\ufffd\u0000\u0000\u0000H\ufffd]\ufffdI\ufffdE\ufffdL)\ufffdH\ufffdE\ufffd\ufffdI\ufffd\u0006I\ufffd\u0006\u0000\u0000\u0000\u0000K\ufffd\u001c\ufffdK\ufffd\u0004\ufffdH\ufffd\ufffdt\u0019H\ufffd;H\ufffd\ufffdt\tH\ufffds\u0008\ufffd\ufffd8\ufffd\ufffdH\ufffd\ufffd\ufffd\u0026\ufffd\u000e\u0000I\ufffd\ufffd\u0008M9\ufffdu\ufffdH\ufffdM\ufffdH\ufffd\ufffd\ufffdH\ufffdE\ufffdH\ufffdD\u0001\u0008M\ufffdl$\u0008H\ufffd]\ufffd\ufffd\ufffd\u0000\u0000\u0000H\ufffd]\ufffdH)\ufffdH\ufffd\ufffd\u0002\ufffd\u0001\u0000\u0000\u0000H\u000fE\ufffdH\ufffdU\ufffdI\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdI!\ufffdH\ufffd\u003c\ufffd\u0000\u0000\u0000\u0000\ufffd\ufffd\ufffd\u000e\u0000J\ufffd\u0014xL\ufffd\u0004\ufffdM9\ufffdt]I\ufffd}\ufffdH\ufffd\ufffdL)\ufffd\ufffd\ufffd\ufffd\ufffd\u0003\ufffd\ufffd@\ufffd\ufffd\u0007tfD)\ufffd\ufffd\ufffd\u0003\ufffdǃ\ufffd\u0007H\ufffd\ufffdH\ufffd֐I\ufffd\u000eI\ufffd\u0006\u0000\u0000\u0000\u0000H\ufffd\u000eH\ufffd\ufffd\u0008I\ufffd\ufffd\u0008H\ufffd\ufffdu\ufffd\ufffd;H\ufffdE\ufffdI\ufffdD$\u0010K\ufffdD\ufffd\u0000I\ufffdD$\u0008\ufffdF\u0001\u0000\u0000I\ufffd\u0004$I\ufffdT$\u0008I\ufffdT$\u0010M\ufffdD$\u0018H\ufffd]\ufffdL\ufffd}\ufffd\ufffd\u0019\u0001\u0000\u0000H\ufffd\ufffdH\ufffd\ufffd8\u000f\ufffd\ufffd\u0000\u0000\u0000ffffff.\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000I\ufffd\u000eI\ufffd\u0006\u0000\u0000\u0000\u0000H\ufffd\u000eI\ufffdN\u0008I\ufffdF\u0008\u0000\u0000\u0000\u0000H\ufffdN\u0008I\ufffdN\u0010I\ufffdF\u0010\u0000\u0000\u0000\u0000H\ufffdN\u0010I\ufffdN\u0018I\ufffdF\u0018\u0000\u0000\u0000\u0000H\ufffdN\u0018I\ufffdN I\ufffdF \u0000\u0000\u0000\u0000H\ufffdN I\ufffdN(I\ufffdF(\u0000\u0000\u0000\u0000H\ufffdN(I\ufffdN0I\ufffdF0\u0000\u0000\u0000\u0000H\ufffdN0I\ufffdN8I\ufffdF8\u0000\u0000\u0000\u0000H\ufffdN8H\ufffd\ufffd@I\ufffd\ufffd@M9\ufffd\u000f\ufffdr\ufffd\ufffd\ufffdM\ufffd\u003c$M\ufffdt$\u0008M\ufffdl$\u0010I\ufffd\u0004$I\ufffdT$\u0008I\ufffdt$\u0010M\ufffdD$\u0018M9\ufffdtEfff.\u000f\u001f\ufffd\u0000\u0000\u0000\u0000\u0000I\ufffd]\ufffdI\ufffdE\ufffd\u0000\u0000\u0000\u0000M\ufffdm\ufffdH\ufffd\ufffdt\u0019H\ufffd;H\ufffd\ufffdt\tH\ufffds\u0008\ufffd",
   "column": 1595,
   "description": "File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "iGoat/iGoat/iGoat/ThirdParty/Realm/Realm.framework/Realm (13423:1595)",
   "recomendation": "Credentials must not be stored in the git code or repository, an attacker could decompile the application and obtain the credential. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  }
 ],
 "none": 4,
 "low": 5,
 "medium": 203,
 "high": 352,
 "critical": 2,
 "total": 566,
 "ios": {
  "binName": "iGoat",
  "averageCvss": 9.8,
  "securityScore": 2,
  "size": "172385201 Bytes",
  "numberOfLines": 1671255
 }
}